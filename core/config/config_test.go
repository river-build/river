package config_test

import (
	"bytes"
	"os"
	"regexp"
	"testing"

	"github.com/stretchr/testify/require"
	"go.uber.org/zap"

	"github.com/river-build/river/core/config"
	"github.com/river-build/river/core/node/testutils"
)

// removeTextTimestamp removes the timestamp from a text log line generated by dlog.
func removeTextTimestamp(logOutput string) string {
	// Remove timestamp from output
	re := regexp.MustCompile(`\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}-\d{4}`)
	return string(re.ReplaceAllString(logOutput, "[TIMESTAMP]"))
}

func TestDatabaseConfig_UrlAndPasswordDoesNotLog(t *testing.T) {
	cfg := config.DatabaseConfig{
		Url:           "pg://host:port",
		Host:          "localhost",
		Port:          5432,
		User:          "user",
		Password:      "password",
		Database:      "testdb",
		Extra:         "extra",
		NumPartitions: 256,
	}

	tests := map[string]struct {
		logCreator      func() (*zap.SugaredLogger, *bytes.Buffer)
		removeTimestamp func(string) string
		testFile        string
		expectFile      string
	}{
		"TextLogger": {
			logCreator:      testutils.DlogTextLogger,
			removeTimestamp: removeTextTimestamp,
			expectFile:      "testdata/databaseconfig.txt",
		},
		"JSONLogger": {
			logCreator:      testutils.DlogJsonLogger,
			removeTimestamp: testutils.RemoveJsonTimestamp,
			expectFile:      "testdata/databaseconfig_json.txt",
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			// Log cfg to buffer
			logger, buffer := tc.logCreator()
			logger.Infow("test message", "databaseConfig", cfg)
			logger.Sync()

			logOutput := buffer.String()
			logOutput = tc.removeTimestamp(logOutput)

			expectedBytes, err := os.ReadFile(tc.expectFile)
			require.NoError(t, err)
			expected := tc.removeTimestamp(string(expectedBytes[:]))

			// Assert output is as expected: password is not logged, other fields included
			require.Equal(t, expected, logOutput)
		})
	}
}

func TestTlsConfig_KeyDoesNotLog(t *testing.T) {
	cfg := config.TLSConfig{
		Key:  "keyvalue",
		Cert: "certvalue",
	}

	tests := map[string]struct {
		logCreator      func() (*zap.SugaredLogger, *bytes.Buffer)
		removeTimestamp func(string) string
		expectFile      string
	}{
		"TextLogger": {
			logCreator:      testutils.DlogTextLogger,
			removeTimestamp: removeTextTimestamp,
			expectFile:      "testdata/tlsconfig.txt",
		},
		"JSONLogger": {
			logCreator:      testutils.DlogJsonLogger,
			removeTimestamp: testutils.RemoveJsonTimestamp,
			expectFile:      "testdata/tlsconfig_json.txt",
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			// Log cfg to buffer
			logger, buffer := tc.logCreator()
			logger.Infow("test message", "tlsConfig", cfg)

			logOutput := buffer.String()
			logOutput = tc.removeTimestamp(logOutput)

			expectedBytes, err := os.ReadFile(tc.expectFile)
			require.NoError(t, err)
			expected := tc.removeTimestamp(string(expectedBytes[:]))

			// Assert output is as expected: TLS Key is not logged, other fields included
			require.Equal(t, expected, logOutput)
		})
	}
}

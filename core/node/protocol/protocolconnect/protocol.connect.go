// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol.proto

package protocolconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protocol "github.com/towns-protocol/towns/core/node/protocol"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "river.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamServiceCreateStreamProcedure is the fully-qualified name of the StreamService's
	// CreateStream RPC.
	StreamServiceCreateStreamProcedure = "/river.StreamService/CreateStream"
	// StreamServiceCreateMediaStreamProcedure is the fully-qualified name of the StreamService's
	// CreateMediaStream RPC.
	StreamServiceCreateMediaStreamProcedure = "/river.StreamService/CreateMediaStream"
	// StreamServiceGetStreamProcedure is the fully-qualified name of the StreamService's GetStream RPC.
	StreamServiceGetStreamProcedure = "/river.StreamService/GetStream"
	// StreamServiceGetStreamExProcedure is the fully-qualified name of the StreamService's GetStreamEx
	// RPC.
	StreamServiceGetStreamExProcedure = "/river.StreamService/GetStreamEx"
	// StreamServiceGetMiniblocksProcedure is the fully-qualified name of the StreamService's
	// GetMiniblocks RPC.
	StreamServiceGetMiniblocksProcedure = "/river.StreamService/GetMiniblocks"
	// StreamServiceGetLastMiniblockHashProcedure is the fully-qualified name of the StreamService's
	// GetLastMiniblockHash RPC.
	StreamServiceGetLastMiniblockHashProcedure = "/river.StreamService/GetLastMiniblockHash"
	// StreamServiceGetMiniblockHeaderProcedure is the fully-qualified name of the StreamService's
	// GetMiniblockHeader RPC.
	StreamServiceGetMiniblockHeaderProcedure = "/river.StreamService/GetMiniblockHeader"
	// StreamServiceAddEventProcedure is the fully-qualified name of the StreamService's AddEvent RPC.
	StreamServiceAddEventProcedure = "/river.StreamService/AddEvent"
	// StreamServiceAddMediaEventProcedure is the fully-qualified name of the StreamService's
	// AddMediaEvent RPC.
	StreamServiceAddMediaEventProcedure = "/river.StreamService/AddMediaEvent"
	// StreamServiceSyncStreamsProcedure is the fully-qualified name of the StreamService's SyncStreams
	// RPC.
	StreamServiceSyncStreamsProcedure = "/river.StreamService/SyncStreams"
	// StreamServiceAddStreamToSyncProcedure is the fully-qualified name of the StreamService's
	// AddStreamToSync RPC.
	StreamServiceAddStreamToSyncProcedure = "/river.StreamService/AddStreamToSync"
	// StreamServiceModifySyncProcedure is the fully-qualified name of the StreamService's ModifySync
	// RPC.
	StreamServiceModifySyncProcedure = "/river.StreamService/ModifySync"
	// StreamServiceCancelSyncProcedure is the fully-qualified name of the StreamService's CancelSync
	// RPC.
	StreamServiceCancelSyncProcedure = "/river.StreamService/CancelSync"
	// StreamServiceRemoveStreamFromSyncProcedure is the fully-qualified name of the StreamService's
	// RemoveStreamFromSync RPC.
	StreamServiceRemoveStreamFromSyncProcedure = "/river.StreamService/RemoveStreamFromSync"
	// StreamServiceInfoProcedure is the fully-qualified name of the StreamService's Info RPC.
	StreamServiceInfoProcedure = "/river.StreamService/Info"
	// StreamServicePingSyncProcedure is the fully-qualified name of the StreamService's PingSync RPC.
	StreamServicePingSyncProcedure = "/river.StreamService/PingSync"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	streamServiceServiceDescriptor                    = protocol.File_protocol_proto.Services().ByName("StreamService")
	streamServiceCreateStreamMethodDescriptor         = streamServiceServiceDescriptor.Methods().ByName("CreateStream")
	streamServiceCreateMediaStreamMethodDescriptor    = streamServiceServiceDescriptor.Methods().ByName("CreateMediaStream")
	streamServiceGetStreamMethodDescriptor            = streamServiceServiceDescriptor.Methods().ByName("GetStream")
	streamServiceGetStreamExMethodDescriptor          = streamServiceServiceDescriptor.Methods().ByName("GetStreamEx")
	streamServiceGetMiniblocksMethodDescriptor        = streamServiceServiceDescriptor.Methods().ByName("GetMiniblocks")
	streamServiceGetLastMiniblockHashMethodDescriptor = streamServiceServiceDescriptor.Methods().ByName("GetLastMiniblockHash")
	streamServiceGetMiniblockHeaderMethodDescriptor   = streamServiceServiceDescriptor.Methods().ByName("GetMiniblockHeader")
	streamServiceAddEventMethodDescriptor             = streamServiceServiceDescriptor.Methods().ByName("AddEvent")
	streamServiceAddMediaEventMethodDescriptor        = streamServiceServiceDescriptor.Methods().ByName("AddMediaEvent")
	streamServiceSyncStreamsMethodDescriptor          = streamServiceServiceDescriptor.Methods().ByName("SyncStreams")
	streamServiceAddStreamToSyncMethodDescriptor      = streamServiceServiceDescriptor.Methods().ByName("AddStreamToSync")
	streamServiceModifySyncMethodDescriptor           = streamServiceServiceDescriptor.Methods().ByName("ModifySync")
	streamServiceCancelSyncMethodDescriptor           = streamServiceServiceDescriptor.Methods().ByName("CancelSync")
	streamServiceRemoveStreamFromSyncMethodDescriptor = streamServiceServiceDescriptor.Methods().ByName("RemoveStreamFromSync")
	streamServiceInfoMethodDescriptor                 = streamServiceServiceDescriptor.Methods().ByName("Info")
	streamServicePingSyncMethodDescriptor             = streamServiceServiceDescriptor.Methods().ByName("PingSync")
)

// StreamServiceClient is a client for the river.StreamService service.
type StreamServiceClient interface {
	CreateStream(context.Context, *connect.Request[protocol.CreateStreamRequest]) (*connect.Response[protocol.CreateStreamResponse], error)
	CreateMediaStream(context.Context, *connect.Request[protocol.CreateMediaStreamRequest]) (*connect.Response[protocol.CreateMediaStreamResponse], error)
	GetStream(context.Context, *connect.Request[protocol.GetStreamRequest]) (*connect.Response[protocol.GetStreamResponse], error)
	GetStreamEx(context.Context, *connect.Request[protocol.GetStreamExRequest]) (*connect.ServerStreamForClient[protocol.GetStreamExResponse], error)
	GetMiniblocks(context.Context, *connect.Request[protocol.GetMiniblocksRequest]) (*connect.Response[protocol.GetMiniblocksResponse], error)
	GetLastMiniblockHash(context.Context, *connect.Request[protocol.GetLastMiniblockHashRequest]) (*connect.Response[protocol.GetLastMiniblockHashResponse], error)
	GetMiniblockHeader(context.Context, *connect.Request[protocol.GetMiniblockHeaderRequest]) (*connect.Response[protocol.GetMiniblockHeaderResponse], error)
	AddEvent(context.Context, *connect.Request[protocol.AddEventRequest]) (*connect.Response[protocol.AddEventResponse], error)
	AddMediaEvent(context.Context, *connect.Request[protocol.AddMediaEventRequest]) (*connect.Response[protocol.AddMediaEventResponse], error)
	SyncStreams(context.Context, *connect.Request[protocol.SyncStreamsRequest]) (*connect.ServerStreamForClient[protocol.SyncStreamsResponse], error)
	AddStreamToSync(context.Context, *connect.Request[protocol.AddStreamToSyncRequest]) (*connect.Response[protocol.AddStreamToSyncResponse], error)
	// ModifySync adds/removes streams to/from an in progress sync session.
	// The client must check ModifySyncResponse to determine which streams failed to add/remove.
	//
	// Note that it is possible for the client to receive stream updates for streams that are added
	// or stops receiving stream updates for streams that are removed before this calls returns.
	ModifySync(context.Context, *connect.Request[protocol.ModifySyncRequest]) (*connect.Response[protocol.ModifySyncResponse], error)
	CancelSync(context.Context, *connect.Request[protocol.CancelSyncRequest]) (*connect.Response[protocol.CancelSyncResponse], error)
	RemoveStreamFromSync(context.Context, *connect.Request[protocol.RemoveStreamFromSyncRequest]) (*connect.Response[protocol.RemoveStreamFromSyncResponse], error)
	Info(context.Context, *connect.Request[protocol.InfoRequest]) (*connect.Response[protocol.InfoResponse], error)
	PingSync(context.Context, *connect.Request[protocol.PingSyncRequest]) (*connect.Response[protocol.PingSyncResponse], error)
}

// NewStreamServiceClient constructs a client for the river.StreamService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamServiceClient{
		createStream: connect.NewClient[protocol.CreateStreamRequest, protocol.CreateStreamResponse](
			httpClient,
			baseURL+StreamServiceCreateStreamProcedure,
			connect.WithSchema(streamServiceCreateStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMediaStream: connect.NewClient[protocol.CreateMediaStreamRequest, protocol.CreateMediaStreamResponse](
			httpClient,
			baseURL+StreamServiceCreateMediaStreamProcedure,
			connect.WithSchema(streamServiceCreateMediaStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStream: connect.NewClient[protocol.GetStreamRequest, protocol.GetStreamResponse](
			httpClient,
			baseURL+StreamServiceGetStreamProcedure,
			connect.WithSchema(streamServiceGetStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStreamEx: connect.NewClient[protocol.GetStreamExRequest, protocol.GetStreamExResponse](
			httpClient,
			baseURL+StreamServiceGetStreamExProcedure,
			connect.WithSchema(streamServiceGetStreamExMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMiniblocks: connect.NewClient[protocol.GetMiniblocksRequest, protocol.GetMiniblocksResponse](
			httpClient,
			baseURL+StreamServiceGetMiniblocksProcedure,
			connect.WithSchema(streamServiceGetMiniblocksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLastMiniblockHash: connect.NewClient[protocol.GetLastMiniblockHashRequest, protocol.GetLastMiniblockHashResponse](
			httpClient,
			baseURL+StreamServiceGetLastMiniblockHashProcedure,
			connect.WithSchema(streamServiceGetLastMiniblockHashMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMiniblockHeader: connect.NewClient[protocol.GetMiniblockHeaderRequest, protocol.GetMiniblockHeaderResponse](
			httpClient,
			baseURL+StreamServiceGetMiniblockHeaderProcedure,
			connect.WithSchema(streamServiceGetMiniblockHeaderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addEvent: connect.NewClient[protocol.AddEventRequest, protocol.AddEventResponse](
			httpClient,
			baseURL+StreamServiceAddEventProcedure,
			connect.WithSchema(streamServiceAddEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMediaEvent: connect.NewClient[protocol.AddMediaEventRequest, protocol.AddMediaEventResponse](
			httpClient,
			baseURL+StreamServiceAddMediaEventProcedure,
			connect.WithSchema(streamServiceAddMediaEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syncStreams: connect.NewClient[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse](
			httpClient,
			baseURL+StreamServiceSyncStreamsProcedure,
			connect.WithSchema(streamServiceSyncStreamsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addStreamToSync: connect.NewClient[protocol.AddStreamToSyncRequest, protocol.AddStreamToSyncResponse](
			httpClient,
			baseURL+StreamServiceAddStreamToSyncProcedure,
			connect.WithSchema(streamServiceAddStreamToSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modifySync: connect.NewClient[protocol.ModifySyncRequest, protocol.ModifySyncResponse](
			httpClient,
			baseURL+StreamServiceModifySyncProcedure,
			connect.WithSchema(streamServiceModifySyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelSync: connect.NewClient[protocol.CancelSyncRequest, protocol.CancelSyncResponse](
			httpClient,
			baseURL+StreamServiceCancelSyncProcedure,
			connect.WithSchema(streamServiceCancelSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeStreamFromSync: connect.NewClient[protocol.RemoveStreamFromSyncRequest, protocol.RemoveStreamFromSyncResponse](
			httpClient,
			baseURL+StreamServiceRemoveStreamFromSyncProcedure,
			connect.WithSchema(streamServiceRemoveStreamFromSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		info: connect.NewClient[protocol.InfoRequest, protocol.InfoResponse](
			httpClient,
			baseURL+StreamServiceInfoProcedure,
			connect.WithSchema(streamServiceInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pingSync: connect.NewClient[protocol.PingSyncRequest, protocol.PingSyncResponse](
			httpClient,
			baseURL+StreamServicePingSyncProcedure,
			connect.WithSchema(streamServicePingSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	createStream         *connect.Client[protocol.CreateStreamRequest, protocol.CreateStreamResponse]
	createMediaStream    *connect.Client[protocol.CreateMediaStreamRequest, protocol.CreateMediaStreamResponse]
	getStream            *connect.Client[protocol.GetStreamRequest, protocol.GetStreamResponse]
	getStreamEx          *connect.Client[protocol.GetStreamExRequest, protocol.GetStreamExResponse]
	getMiniblocks        *connect.Client[protocol.GetMiniblocksRequest, protocol.GetMiniblocksResponse]
	getLastMiniblockHash *connect.Client[protocol.GetLastMiniblockHashRequest, protocol.GetLastMiniblockHashResponse]
	getMiniblockHeader   *connect.Client[protocol.GetMiniblockHeaderRequest, protocol.GetMiniblockHeaderResponse]
	addEvent             *connect.Client[protocol.AddEventRequest, protocol.AddEventResponse]
	addMediaEvent        *connect.Client[protocol.AddMediaEventRequest, protocol.AddMediaEventResponse]
	syncStreams          *connect.Client[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse]
	addStreamToSync      *connect.Client[protocol.AddStreamToSyncRequest, protocol.AddStreamToSyncResponse]
	modifySync           *connect.Client[protocol.ModifySyncRequest, protocol.ModifySyncResponse]
	cancelSync           *connect.Client[protocol.CancelSyncRequest, protocol.CancelSyncResponse]
	removeStreamFromSync *connect.Client[protocol.RemoveStreamFromSyncRequest, protocol.RemoveStreamFromSyncResponse]
	info                 *connect.Client[protocol.InfoRequest, protocol.InfoResponse]
	pingSync             *connect.Client[protocol.PingSyncRequest, protocol.PingSyncResponse]
}

// CreateStream calls river.StreamService.CreateStream.
func (c *streamServiceClient) CreateStream(ctx context.Context, req *connect.Request[protocol.CreateStreamRequest]) (*connect.Response[protocol.CreateStreamResponse], error) {
	return c.createStream.CallUnary(ctx, req)
}

// CreateMediaStream calls river.StreamService.CreateMediaStream.
func (c *streamServiceClient) CreateMediaStream(ctx context.Context, req *connect.Request[protocol.CreateMediaStreamRequest]) (*connect.Response[protocol.CreateMediaStreamResponse], error) {
	return c.createMediaStream.CallUnary(ctx, req)
}

// GetStream calls river.StreamService.GetStream.
func (c *streamServiceClient) GetStream(ctx context.Context, req *connect.Request[protocol.GetStreamRequest]) (*connect.Response[protocol.GetStreamResponse], error) {
	return c.getStream.CallUnary(ctx, req)
}

// GetStreamEx calls river.StreamService.GetStreamEx.
func (c *streamServiceClient) GetStreamEx(ctx context.Context, req *connect.Request[protocol.GetStreamExRequest]) (*connect.ServerStreamForClient[protocol.GetStreamExResponse], error) {
	return c.getStreamEx.CallServerStream(ctx, req)
}

// GetMiniblocks calls river.StreamService.GetMiniblocks.
func (c *streamServiceClient) GetMiniblocks(ctx context.Context, req *connect.Request[protocol.GetMiniblocksRequest]) (*connect.Response[protocol.GetMiniblocksResponse], error) {
	return c.getMiniblocks.CallUnary(ctx, req)
}

// GetLastMiniblockHash calls river.StreamService.GetLastMiniblockHash.
func (c *streamServiceClient) GetLastMiniblockHash(ctx context.Context, req *connect.Request[protocol.GetLastMiniblockHashRequest]) (*connect.Response[protocol.GetLastMiniblockHashResponse], error) {
	return c.getLastMiniblockHash.CallUnary(ctx, req)
}

// GetMiniblockHeader calls river.StreamService.GetMiniblockHeader.
func (c *streamServiceClient) GetMiniblockHeader(ctx context.Context, req *connect.Request[protocol.GetMiniblockHeaderRequest]) (*connect.Response[protocol.GetMiniblockHeaderResponse], error) {
	return c.getMiniblockHeader.CallUnary(ctx, req)
}

// AddEvent calls river.StreamService.AddEvent.
func (c *streamServiceClient) AddEvent(ctx context.Context, req *connect.Request[protocol.AddEventRequest]) (*connect.Response[protocol.AddEventResponse], error) {
	return c.addEvent.CallUnary(ctx, req)
}

// AddMediaEvent calls river.StreamService.AddMediaEvent.
func (c *streamServiceClient) AddMediaEvent(ctx context.Context, req *connect.Request[protocol.AddMediaEventRequest]) (*connect.Response[protocol.AddMediaEventResponse], error) {
	return c.addMediaEvent.CallUnary(ctx, req)
}

// SyncStreams calls river.StreamService.SyncStreams.
func (c *streamServiceClient) SyncStreams(ctx context.Context, req *connect.Request[protocol.SyncStreamsRequest]) (*connect.ServerStreamForClient[protocol.SyncStreamsResponse], error) {
	return c.syncStreams.CallServerStream(ctx, req)
}

// AddStreamToSync calls river.StreamService.AddStreamToSync.
func (c *streamServiceClient) AddStreamToSync(ctx context.Context, req *connect.Request[protocol.AddStreamToSyncRequest]) (*connect.Response[protocol.AddStreamToSyncResponse], error) {
	return c.addStreamToSync.CallUnary(ctx, req)
}

// ModifySync calls river.StreamService.ModifySync.
func (c *streamServiceClient) ModifySync(ctx context.Context, req *connect.Request[protocol.ModifySyncRequest]) (*connect.Response[protocol.ModifySyncResponse], error) {
	return c.modifySync.CallUnary(ctx, req)
}

// CancelSync calls river.StreamService.CancelSync.
func (c *streamServiceClient) CancelSync(ctx context.Context, req *connect.Request[protocol.CancelSyncRequest]) (*connect.Response[protocol.CancelSyncResponse], error) {
	return c.cancelSync.CallUnary(ctx, req)
}

// RemoveStreamFromSync calls river.StreamService.RemoveStreamFromSync.
func (c *streamServiceClient) RemoveStreamFromSync(ctx context.Context, req *connect.Request[protocol.RemoveStreamFromSyncRequest]) (*connect.Response[protocol.RemoveStreamFromSyncResponse], error) {
	return c.removeStreamFromSync.CallUnary(ctx, req)
}

// Info calls river.StreamService.Info.
func (c *streamServiceClient) Info(ctx context.Context, req *connect.Request[protocol.InfoRequest]) (*connect.Response[protocol.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// PingSync calls river.StreamService.PingSync.
func (c *streamServiceClient) PingSync(ctx context.Context, req *connect.Request[protocol.PingSyncRequest]) (*connect.Response[protocol.PingSyncResponse], error) {
	return c.pingSync.CallUnary(ctx, req)
}

// StreamServiceHandler is an implementation of the river.StreamService service.
type StreamServiceHandler interface {
	CreateStream(context.Context, *connect.Request[protocol.CreateStreamRequest]) (*connect.Response[protocol.CreateStreamResponse], error)
	CreateMediaStream(context.Context, *connect.Request[protocol.CreateMediaStreamRequest]) (*connect.Response[protocol.CreateMediaStreamResponse], error)
	GetStream(context.Context, *connect.Request[protocol.GetStreamRequest]) (*connect.Response[protocol.GetStreamResponse], error)
	GetStreamEx(context.Context, *connect.Request[protocol.GetStreamExRequest], *connect.ServerStream[protocol.GetStreamExResponse]) error
	GetMiniblocks(context.Context, *connect.Request[protocol.GetMiniblocksRequest]) (*connect.Response[protocol.GetMiniblocksResponse], error)
	GetLastMiniblockHash(context.Context, *connect.Request[protocol.GetLastMiniblockHashRequest]) (*connect.Response[protocol.GetLastMiniblockHashResponse], error)
	GetMiniblockHeader(context.Context, *connect.Request[protocol.GetMiniblockHeaderRequest]) (*connect.Response[protocol.GetMiniblockHeaderResponse], error)
	AddEvent(context.Context, *connect.Request[protocol.AddEventRequest]) (*connect.Response[protocol.AddEventResponse], error)
	AddMediaEvent(context.Context, *connect.Request[protocol.AddMediaEventRequest]) (*connect.Response[protocol.AddMediaEventResponse], error)
	SyncStreams(context.Context, *connect.Request[protocol.SyncStreamsRequest], *connect.ServerStream[protocol.SyncStreamsResponse]) error
	AddStreamToSync(context.Context, *connect.Request[protocol.AddStreamToSyncRequest]) (*connect.Response[protocol.AddStreamToSyncResponse], error)
	// ModifySync adds/removes streams to/from an in progress sync session.
	// The client must check ModifySyncResponse to determine which streams failed to add/remove.
	//
	// Note that it is possible for the client to receive stream updates for streams that are added
	// or stops receiving stream updates for streams that are removed before this calls returns.
	ModifySync(context.Context, *connect.Request[protocol.ModifySyncRequest]) (*connect.Response[protocol.ModifySyncResponse], error)
	CancelSync(context.Context, *connect.Request[protocol.CancelSyncRequest]) (*connect.Response[protocol.CancelSyncResponse], error)
	RemoveStreamFromSync(context.Context, *connect.Request[protocol.RemoveStreamFromSyncRequest]) (*connect.Response[protocol.RemoveStreamFromSyncResponse], error)
	Info(context.Context, *connect.Request[protocol.InfoRequest]) (*connect.Response[protocol.InfoResponse], error)
	PingSync(context.Context, *connect.Request[protocol.PingSyncRequest]) (*connect.Response[protocol.PingSyncResponse], error)
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamServiceCreateStreamHandler := connect.NewUnaryHandler(
		StreamServiceCreateStreamProcedure,
		svc.CreateStream,
		connect.WithSchema(streamServiceCreateStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceCreateMediaStreamHandler := connect.NewUnaryHandler(
		StreamServiceCreateMediaStreamProcedure,
		svc.CreateMediaStream,
		connect.WithSchema(streamServiceCreateMediaStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceGetStreamHandler := connect.NewUnaryHandler(
		StreamServiceGetStreamProcedure,
		svc.GetStream,
		connect.WithSchema(streamServiceGetStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceGetStreamExHandler := connect.NewServerStreamHandler(
		StreamServiceGetStreamExProcedure,
		svc.GetStreamEx,
		connect.WithSchema(streamServiceGetStreamExMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceGetMiniblocksHandler := connect.NewUnaryHandler(
		StreamServiceGetMiniblocksProcedure,
		svc.GetMiniblocks,
		connect.WithSchema(streamServiceGetMiniblocksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceGetLastMiniblockHashHandler := connect.NewUnaryHandler(
		StreamServiceGetLastMiniblockHashProcedure,
		svc.GetLastMiniblockHash,
		connect.WithSchema(streamServiceGetLastMiniblockHashMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceGetMiniblockHeaderHandler := connect.NewUnaryHandler(
		StreamServiceGetMiniblockHeaderProcedure,
		svc.GetMiniblockHeader,
		connect.WithSchema(streamServiceGetMiniblockHeaderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceAddEventHandler := connect.NewUnaryHandler(
		StreamServiceAddEventProcedure,
		svc.AddEvent,
		connect.WithSchema(streamServiceAddEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceAddMediaEventHandler := connect.NewUnaryHandler(
		StreamServiceAddMediaEventProcedure,
		svc.AddMediaEvent,
		connect.WithSchema(streamServiceAddMediaEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceSyncStreamsHandler := connect.NewServerStreamHandler(
		StreamServiceSyncStreamsProcedure,
		svc.SyncStreams,
		connect.WithSchema(streamServiceSyncStreamsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceAddStreamToSyncHandler := connect.NewUnaryHandler(
		StreamServiceAddStreamToSyncProcedure,
		svc.AddStreamToSync,
		connect.WithSchema(streamServiceAddStreamToSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceModifySyncHandler := connect.NewUnaryHandler(
		StreamServiceModifySyncProcedure,
		svc.ModifySync,
		connect.WithSchema(streamServiceModifySyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceCancelSyncHandler := connect.NewUnaryHandler(
		StreamServiceCancelSyncProcedure,
		svc.CancelSync,
		connect.WithSchema(streamServiceCancelSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceRemoveStreamFromSyncHandler := connect.NewUnaryHandler(
		StreamServiceRemoveStreamFromSyncProcedure,
		svc.RemoveStreamFromSync,
		connect.WithSchema(streamServiceRemoveStreamFromSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceInfoHandler := connect.NewUnaryHandler(
		StreamServiceInfoProcedure,
		svc.Info,
		connect.WithSchema(streamServiceInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServicePingSyncHandler := connect.NewUnaryHandler(
		StreamServicePingSyncProcedure,
		svc.PingSync,
		connect.WithSchema(streamServicePingSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/river.StreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamServiceCreateStreamProcedure:
			streamServiceCreateStreamHandler.ServeHTTP(w, r)
		case StreamServiceCreateMediaStreamProcedure:
			streamServiceCreateMediaStreamHandler.ServeHTTP(w, r)
		case StreamServiceGetStreamProcedure:
			streamServiceGetStreamHandler.ServeHTTP(w, r)
		case StreamServiceGetStreamExProcedure:
			streamServiceGetStreamExHandler.ServeHTTP(w, r)
		case StreamServiceGetMiniblocksProcedure:
			streamServiceGetMiniblocksHandler.ServeHTTP(w, r)
		case StreamServiceGetLastMiniblockHashProcedure:
			streamServiceGetLastMiniblockHashHandler.ServeHTTP(w, r)
		case StreamServiceGetMiniblockHeaderProcedure:
			streamServiceGetMiniblockHeaderHandler.ServeHTTP(w, r)
		case StreamServiceAddEventProcedure:
			streamServiceAddEventHandler.ServeHTTP(w, r)
		case StreamServiceAddMediaEventProcedure:
			streamServiceAddMediaEventHandler.ServeHTTP(w, r)
		case StreamServiceSyncStreamsProcedure:
			streamServiceSyncStreamsHandler.ServeHTTP(w, r)
		case StreamServiceAddStreamToSyncProcedure:
			streamServiceAddStreamToSyncHandler.ServeHTTP(w, r)
		case StreamServiceModifySyncProcedure:
			streamServiceModifySyncHandler.ServeHTTP(w, r)
		case StreamServiceCancelSyncProcedure:
			streamServiceCancelSyncHandler.ServeHTTP(w, r)
		case StreamServiceRemoveStreamFromSyncProcedure:
			streamServiceRemoveStreamFromSyncHandler.ServeHTTP(w, r)
		case StreamServiceInfoProcedure:
			streamServiceInfoHandler.ServeHTTP(w, r)
		case StreamServicePingSyncProcedure:
			streamServicePingSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) CreateStream(context.Context, *connect.Request[protocol.CreateStreamRequest]) (*connect.Response[protocol.CreateStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.CreateStream is not implemented"))
}

func (UnimplementedStreamServiceHandler) CreateMediaStream(context.Context, *connect.Request[protocol.CreateMediaStreamRequest]) (*connect.Response[protocol.CreateMediaStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.CreateMediaStream is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetStream(context.Context, *connect.Request[protocol.GetStreamRequest]) (*connect.Response[protocol.GetStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.GetStream is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetStreamEx(context.Context, *connect.Request[protocol.GetStreamExRequest], *connect.ServerStream[protocol.GetStreamExResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.GetStreamEx is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetMiniblocks(context.Context, *connect.Request[protocol.GetMiniblocksRequest]) (*connect.Response[protocol.GetMiniblocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.GetMiniblocks is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetLastMiniblockHash(context.Context, *connect.Request[protocol.GetLastMiniblockHashRequest]) (*connect.Response[protocol.GetLastMiniblockHashResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.GetLastMiniblockHash is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetMiniblockHeader(context.Context, *connect.Request[protocol.GetMiniblockHeaderRequest]) (*connect.Response[protocol.GetMiniblockHeaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.GetMiniblockHeader is not implemented"))
}

func (UnimplementedStreamServiceHandler) AddEvent(context.Context, *connect.Request[protocol.AddEventRequest]) (*connect.Response[protocol.AddEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.AddEvent is not implemented"))
}

func (UnimplementedStreamServiceHandler) AddMediaEvent(context.Context, *connect.Request[protocol.AddMediaEventRequest]) (*connect.Response[protocol.AddMediaEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.AddMediaEvent is not implemented"))
}

func (UnimplementedStreamServiceHandler) SyncStreams(context.Context, *connect.Request[protocol.SyncStreamsRequest], *connect.ServerStream[protocol.SyncStreamsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.SyncStreams is not implemented"))
}

func (UnimplementedStreamServiceHandler) AddStreamToSync(context.Context, *connect.Request[protocol.AddStreamToSyncRequest]) (*connect.Response[protocol.AddStreamToSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.AddStreamToSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) ModifySync(context.Context, *connect.Request[protocol.ModifySyncRequest]) (*connect.Response[protocol.ModifySyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.ModifySync is not implemented"))
}

func (UnimplementedStreamServiceHandler) CancelSync(context.Context, *connect.Request[protocol.CancelSyncRequest]) (*connect.Response[protocol.CancelSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.CancelSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) RemoveStreamFromSync(context.Context, *connect.Request[protocol.RemoveStreamFromSyncRequest]) (*connect.Response[protocol.RemoveStreamFromSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.RemoveStreamFromSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) Info(context.Context, *connect.Request[protocol.InfoRequest]) (*connect.Response[protocol.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.Info is not implemented"))
}

func (UnimplementedStreamServiceHandler) PingSync(context.Context, *connect.Request[protocol.PingSyncRequest]) (*connect.Response[protocol.PingSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.StreamService.PingSync is not implemented"))
}

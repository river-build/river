// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notifications.proto

package protocolconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protocol "github.com/river-build/river/core/node/protocol"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "river.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceGetSettingsProcedure is the fully-qualified name of the NotificationService's
	// GetSettings RPC.
	NotificationServiceGetSettingsProcedure = "/river.NotificationService/GetSettings"
	// NotificationServiceSetSettingsProcedure is the fully-qualified name of the NotificationService's
	// SetSettings RPC.
	NotificationServiceSetSettingsProcedure = "/river.NotificationService/SetSettings"
	// NotificationServiceSetDmGdmSettingsProcedure is the fully-qualified name of the
	// NotificationService's SetDmGdmSettings RPC.
	NotificationServiceSetDmGdmSettingsProcedure = "/river.NotificationService/SetDmGdmSettings"
	// NotificationServiceSetDmChannelSettingProcedure is the fully-qualified name of the
	// NotificationService's SetDmChannelSetting RPC.
	NotificationServiceSetDmChannelSettingProcedure = "/river.NotificationService/SetDmChannelSetting"
	// NotificationServiceSetGdmChannelSettingProcedure is the fully-qualified name of the
	// NotificationService's SetGdmChannelSetting RPC.
	NotificationServiceSetGdmChannelSettingProcedure = "/river.NotificationService/SetGdmChannelSetting"
	// NotificationServiceSetSpaceSettingsProcedure is the fully-qualified name of the
	// NotificationService's SetSpaceSettings RPC.
	NotificationServiceSetSpaceSettingsProcedure = "/river.NotificationService/SetSpaceSettings"
	// NotificationServiceSetSpaceChannelSettingsProcedure is the fully-qualified name of the
	// NotificationService's SetSpaceChannelSettings RPC.
	NotificationServiceSetSpaceChannelSettingsProcedure = "/river.NotificationService/SetSpaceChannelSettings"
	// NotificationServiceSubscribeWebPushProcedure is the fully-qualified name of the
	// NotificationService's SubscribeWebPush RPC.
	NotificationServiceSubscribeWebPushProcedure = "/river.NotificationService/SubscribeWebPush"
	// NotificationServiceUnsubscribeWebPushProcedure is the fully-qualified name of the
	// NotificationService's UnsubscribeWebPush RPC.
	NotificationServiceUnsubscribeWebPushProcedure = "/river.NotificationService/UnsubscribeWebPush"
	// NotificationServiceSubscribeAPNProcedure is the fully-qualified name of the NotificationService's
	// SubscribeAPN RPC.
	NotificationServiceSubscribeAPNProcedure = "/river.NotificationService/SubscribeAPN"
	// NotificationServiceUnsubscribeAPNProcedure is the fully-qualified name of the
	// NotificationService's UnsubscribeAPN RPC.
	NotificationServiceUnsubscribeAPNProcedure = "/river.NotificationService/UnsubscribeAPN"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notificationServiceServiceDescriptor                       = protocol.File_notifications_proto.Services().ByName("NotificationService")
	notificationServiceGetSettingsMethodDescriptor             = notificationServiceServiceDescriptor.Methods().ByName("GetSettings")
	notificationServiceSetSettingsMethodDescriptor             = notificationServiceServiceDescriptor.Methods().ByName("SetSettings")
	notificationServiceSetDmGdmSettingsMethodDescriptor        = notificationServiceServiceDescriptor.Methods().ByName("SetDmGdmSettings")
	notificationServiceSetDmChannelSettingMethodDescriptor     = notificationServiceServiceDescriptor.Methods().ByName("SetDmChannelSetting")
	notificationServiceSetGdmChannelSettingMethodDescriptor    = notificationServiceServiceDescriptor.Methods().ByName("SetGdmChannelSetting")
	notificationServiceSetSpaceSettingsMethodDescriptor        = notificationServiceServiceDescriptor.Methods().ByName("SetSpaceSettings")
	notificationServiceSetSpaceChannelSettingsMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName("SetSpaceChannelSettings")
	notificationServiceSubscribeWebPushMethodDescriptor        = notificationServiceServiceDescriptor.Methods().ByName("SubscribeWebPush")
	notificationServiceUnsubscribeWebPushMethodDescriptor      = notificationServiceServiceDescriptor.Methods().ByName("UnsubscribeWebPush")
	notificationServiceSubscribeAPNMethodDescriptor            = notificationServiceServiceDescriptor.Methods().ByName("SubscribeAPN")
	notificationServiceUnsubscribeAPNMethodDescriptor          = notificationServiceServiceDescriptor.Methods().ByName("UnsubscribeAPN")
)

// NotificationServiceClient is a client for the river.NotificationService service.
type NotificationServiceClient interface {
	// GetSettings returns user stored notification settings.
	GetSettings(context.Context, *connect.Request[protocol.GetSettingsRequest]) (*connect.Response[protocol.GetSettingsResponse], error)
	// SetSettings sets the notification settings, overwriting all existing settings.
	SetSettings(context.Context, *connect.Request[protocol.SetSettingsRequest]) (*connect.Response[protocol.SetSettingsResponse], error)
	// SetDmGdmSettings updates global settings for DM/GDM channels.
	SetDmGdmSettings(context.Context, *connect.Request[protocol.SetDmGdmSettingsRequest]) (*connect.Response[protocol.SetDmGdmSettingsResponse], error)
	// SetDmChannelSetting updates settings for a DM channel
	SetDmChannelSetting(context.Context, *connect.Request[protocol.SetDmChannelSettingRequest]) (*connect.Response[protocol.SetDmChannelSettingResponse], error)
	// SetGdmChannelSetting updates settings for a GDM channel
	SetGdmChannelSetting(context.Context, *connect.Request[protocol.SetGdmChannelSettingRequest]) (*connect.Response[protocol.SetGdmChannelSettingResponse], error)
	// SetSpaceSettings updates space setting that are applied to all channels within that stream.
	SetSpaceSettings(context.Context, *connect.Request[protocol.SetSpaceSettingsRequest]) (*connect.Response[protocol.SetSpaceSettingsResponse], error)
	// SetSpaceChannelSettings updates settings for a channel that is part of a space.
	SetSpaceChannelSettings(context.Context, *connect.Request[protocol.SetSpaceChannelSettingsRequest]) (*connect.Response[protocol.SetSpaceChannelSettingsResponse], error)
	// SubscribeWebPush subscribes a client to receive notifications through web push.
	// If the given req.subscription is already associated with a web push subscription the user id is updated (upsert).
	SubscribeWebPush(context.Context, *connect.Request[protocol.SubscribeWebPushRequest]) (*connect.Response[protocol.SubscribeWebPushResponse], error)
	// UnsubscribeWebPush deletes web push subscription.
	UnsubscribeWebPush(context.Context, *connect.Request[protocol.UnsubscribeWebPushRequest]) (*connect.Response[protocol.UnsubscribeWebPushResponse], error)
	// SubscribeAPN subscribes a device to receive Apple Push Notifications.
	// If the given device token is already associated with an APN subscription the user id is updated (upsert).
	SubscribeAPN(context.Context, *connect.Request[protocol.SubscribeAPNRequest]) (*connect.Response[protocol.SubscribeAPNResponse], error)
	// UnsubscribeAPN unsubscribes a device from receiving Apple Push Notifications.
	UnsubscribeAPN(context.Context, *connect.Request[protocol.UnsubscribeAPNRequest]) (*connect.Response[protocol.UnsubscribeAPNResponse], error)
}

// NewNotificationServiceClient constructs a client for the river.NotificationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		getSettings: connect.NewClient[protocol.GetSettingsRequest, protocol.GetSettingsResponse](
			httpClient,
			baseURL+NotificationServiceGetSettingsProcedure,
			connect.WithSchema(notificationServiceGetSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSettings: connect.NewClient[protocol.SetSettingsRequest, protocol.SetSettingsResponse](
			httpClient,
			baseURL+NotificationServiceSetSettingsProcedure,
			connect.WithSchema(notificationServiceSetSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDmGdmSettings: connect.NewClient[protocol.SetDmGdmSettingsRequest, protocol.SetDmGdmSettingsResponse](
			httpClient,
			baseURL+NotificationServiceSetDmGdmSettingsProcedure,
			connect.WithSchema(notificationServiceSetDmGdmSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDmChannelSetting: connect.NewClient[protocol.SetDmChannelSettingRequest, protocol.SetDmChannelSettingResponse](
			httpClient,
			baseURL+NotificationServiceSetDmChannelSettingProcedure,
			connect.WithSchema(notificationServiceSetDmChannelSettingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setGdmChannelSetting: connect.NewClient[protocol.SetGdmChannelSettingRequest, protocol.SetGdmChannelSettingResponse](
			httpClient,
			baseURL+NotificationServiceSetGdmChannelSettingProcedure,
			connect.WithSchema(notificationServiceSetGdmChannelSettingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSpaceSettings: connect.NewClient[protocol.SetSpaceSettingsRequest, protocol.SetSpaceSettingsResponse](
			httpClient,
			baseURL+NotificationServiceSetSpaceSettingsProcedure,
			connect.WithSchema(notificationServiceSetSpaceSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSpaceChannelSettings: connect.NewClient[protocol.SetSpaceChannelSettingsRequest, protocol.SetSpaceChannelSettingsResponse](
			httpClient,
			baseURL+NotificationServiceSetSpaceChannelSettingsProcedure,
			connect.WithSchema(notificationServiceSetSpaceChannelSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeWebPush: connect.NewClient[protocol.SubscribeWebPushRequest, protocol.SubscribeWebPushResponse](
			httpClient,
			baseURL+NotificationServiceSubscribeWebPushProcedure,
			connect.WithSchema(notificationServiceSubscribeWebPushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsubscribeWebPush: connect.NewClient[protocol.UnsubscribeWebPushRequest, protocol.UnsubscribeWebPushResponse](
			httpClient,
			baseURL+NotificationServiceUnsubscribeWebPushProcedure,
			connect.WithSchema(notificationServiceUnsubscribeWebPushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeAPN: connect.NewClient[protocol.SubscribeAPNRequest, protocol.SubscribeAPNResponse](
			httpClient,
			baseURL+NotificationServiceSubscribeAPNProcedure,
			connect.WithSchema(notificationServiceSubscribeAPNMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsubscribeAPN: connect.NewClient[protocol.UnsubscribeAPNRequest, protocol.UnsubscribeAPNResponse](
			httpClient,
			baseURL+NotificationServiceUnsubscribeAPNProcedure,
			connect.WithSchema(notificationServiceUnsubscribeAPNMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	getSettings             *connect.Client[protocol.GetSettingsRequest, protocol.GetSettingsResponse]
	setSettings             *connect.Client[protocol.SetSettingsRequest, protocol.SetSettingsResponse]
	setDmGdmSettings        *connect.Client[protocol.SetDmGdmSettingsRequest, protocol.SetDmGdmSettingsResponse]
	setDmChannelSetting     *connect.Client[protocol.SetDmChannelSettingRequest, protocol.SetDmChannelSettingResponse]
	setGdmChannelSetting    *connect.Client[protocol.SetGdmChannelSettingRequest, protocol.SetGdmChannelSettingResponse]
	setSpaceSettings        *connect.Client[protocol.SetSpaceSettingsRequest, protocol.SetSpaceSettingsResponse]
	setSpaceChannelSettings *connect.Client[protocol.SetSpaceChannelSettingsRequest, protocol.SetSpaceChannelSettingsResponse]
	subscribeWebPush        *connect.Client[protocol.SubscribeWebPushRequest, protocol.SubscribeWebPushResponse]
	unsubscribeWebPush      *connect.Client[protocol.UnsubscribeWebPushRequest, protocol.UnsubscribeWebPushResponse]
	subscribeAPN            *connect.Client[protocol.SubscribeAPNRequest, protocol.SubscribeAPNResponse]
	unsubscribeAPN          *connect.Client[protocol.UnsubscribeAPNRequest, protocol.UnsubscribeAPNResponse]
}

// GetSettings calls river.NotificationService.GetSettings.
func (c *notificationServiceClient) GetSettings(ctx context.Context, req *connect.Request[protocol.GetSettingsRequest]) (*connect.Response[protocol.GetSettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// SetSettings calls river.NotificationService.SetSettings.
func (c *notificationServiceClient) SetSettings(ctx context.Context, req *connect.Request[protocol.SetSettingsRequest]) (*connect.Response[protocol.SetSettingsResponse], error) {
	return c.setSettings.CallUnary(ctx, req)
}

// SetDmGdmSettings calls river.NotificationService.SetDmGdmSettings.
func (c *notificationServiceClient) SetDmGdmSettings(ctx context.Context, req *connect.Request[protocol.SetDmGdmSettingsRequest]) (*connect.Response[protocol.SetDmGdmSettingsResponse], error) {
	return c.setDmGdmSettings.CallUnary(ctx, req)
}

// SetDmChannelSetting calls river.NotificationService.SetDmChannelSetting.
func (c *notificationServiceClient) SetDmChannelSetting(ctx context.Context, req *connect.Request[protocol.SetDmChannelSettingRequest]) (*connect.Response[protocol.SetDmChannelSettingResponse], error) {
	return c.setDmChannelSetting.CallUnary(ctx, req)
}

// SetGdmChannelSetting calls river.NotificationService.SetGdmChannelSetting.
func (c *notificationServiceClient) SetGdmChannelSetting(ctx context.Context, req *connect.Request[protocol.SetGdmChannelSettingRequest]) (*connect.Response[protocol.SetGdmChannelSettingResponse], error) {
	return c.setGdmChannelSetting.CallUnary(ctx, req)
}

// SetSpaceSettings calls river.NotificationService.SetSpaceSettings.
func (c *notificationServiceClient) SetSpaceSettings(ctx context.Context, req *connect.Request[protocol.SetSpaceSettingsRequest]) (*connect.Response[protocol.SetSpaceSettingsResponse], error) {
	return c.setSpaceSettings.CallUnary(ctx, req)
}

// SetSpaceChannelSettings calls river.NotificationService.SetSpaceChannelSettings.
func (c *notificationServiceClient) SetSpaceChannelSettings(ctx context.Context, req *connect.Request[protocol.SetSpaceChannelSettingsRequest]) (*connect.Response[protocol.SetSpaceChannelSettingsResponse], error) {
	return c.setSpaceChannelSettings.CallUnary(ctx, req)
}

// SubscribeWebPush calls river.NotificationService.SubscribeWebPush.
func (c *notificationServiceClient) SubscribeWebPush(ctx context.Context, req *connect.Request[protocol.SubscribeWebPushRequest]) (*connect.Response[protocol.SubscribeWebPushResponse], error) {
	return c.subscribeWebPush.CallUnary(ctx, req)
}

// UnsubscribeWebPush calls river.NotificationService.UnsubscribeWebPush.
func (c *notificationServiceClient) UnsubscribeWebPush(ctx context.Context, req *connect.Request[protocol.UnsubscribeWebPushRequest]) (*connect.Response[protocol.UnsubscribeWebPushResponse], error) {
	return c.unsubscribeWebPush.CallUnary(ctx, req)
}

// SubscribeAPN calls river.NotificationService.SubscribeAPN.
func (c *notificationServiceClient) SubscribeAPN(ctx context.Context, req *connect.Request[protocol.SubscribeAPNRequest]) (*connect.Response[protocol.SubscribeAPNResponse], error) {
	return c.subscribeAPN.CallUnary(ctx, req)
}

// UnsubscribeAPN calls river.NotificationService.UnsubscribeAPN.
func (c *notificationServiceClient) UnsubscribeAPN(ctx context.Context, req *connect.Request[protocol.UnsubscribeAPNRequest]) (*connect.Response[protocol.UnsubscribeAPNResponse], error) {
	return c.unsubscribeAPN.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the river.NotificationService service.
type NotificationServiceHandler interface {
	// GetSettings returns user stored notification settings.
	GetSettings(context.Context, *connect.Request[protocol.GetSettingsRequest]) (*connect.Response[protocol.GetSettingsResponse], error)
	// SetSettings sets the notification settings, overwriting all existing settings.
	SetSettings(context.Context, *connect.Request[protocol.SetSettingsRequest]) (*connect.Response[protocol.SetSettingsResponse], error)
	// SetDmGdmSettings updates global settings for DM/GDM channels.
	SetDmGdmSettings(context.Context, *connect.Request[protocol.SetDmGdmSettingsRequest]) (*connect.Response[protocol.SetDmGdmSettingsResponse], error)
	// SetDmChannelSetting updates settings for a DM channel
	SetDmChannelSetting(context.Context, *connect.Request[protocol.SetDmChannelSettingRequest]) (*connect.Response[protocol.SetDmChannelSettingResponse], error)
	// SetGdmChannelSetting updates settings for a GDM channel
	SetGdmChannelSetting(context.Context, *connect.Request[protocol.SetGdmChannelSettingRequest]) (*connect.Response[protocol.SetGdmChannelSettingResponse], error)
	// SetSpaceSettings updates space setting that are applied to all channels within that stream.
	SetSpaceSettings(context.Context, *connect.Request[protocol.SetSpaceSettingsRequest]) (*connect.Response[protocol.SetSpaceSettingsResponse], error)
	// SetSpaceChannelSettings updates settings for a channel that is part of a space.
	SetSpaceChannelSettings(context.Context, *connect.Request[protocol.SetSpaceChannelSettingsRequest]) (*connect.Response[protocol.SetSpaceChannelSettingsResponse], error)
	// SubscribeWebPush subscribes a client to receive notifications through web push.
	// If the given req.subscription is already associated with a web push subscription the user id is updated (upsert).
	SubscribeWebPush(context.Context, *connect.Request[protocol.SubscribeWebPushRequest]) (*connect.Response[protocol.SubscribeWebPushResponse], error)
	// UnsubscribeWebPush deletes web push subscription.
	UnsubscribeWebPush(context.Context, *connect.Request[protocol.UnsubscribeWebPushRequest]) (*connect.Response[protocol.UnsubscribeWebPushResponse], error)
	// SubscribeAPN subscribes a device to receive Apple Push Notifications.
	// If the given device token is already associated with an APN subscription the user id is updated (upsert).
	SubscribeAPN(context.Context, *connect.Request[protocol.SubscribeAPNRequest]) (*connect.Response[protocol.SubscribeAPNResponse], error)
	// UnsubscribeAPN unsubscribes a device from receiving Apple Push Notifications.
	UnsubscribeAPN(context.Context, *connect.Request[protocol.UnsubscribeAPNRequest]) (*connect.Response[protocol.UnsubscribeAPNResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceGetSettingsHandler := connect.NewUnaryHandler(
		NotificationServiceGetSettingsProcedure,
		svc.GetSettings,
		connect.WithSchema(notificationServiceGetSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetSettingsHandler := connect.NewUnaryHandler(
		NotificationServiceSetSettingsProcedure,
		svc.SetSettings,
		connect.WithSchema(notificationServiceSetSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetDmGdmSettingsHandler := connect.NewUnaryHandler(
		NotificationServiceSetDmGdmSettingsProcedure,
		svc.SetDmGdmSettings,
		connect.WithSchema(notificationServiceSetDmGdmSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetDmChannelSettingHandler := connect.NewUnaryHandler(
		NotificationServiceSetDmChannelSettingProcedure,
		svc.SetDmChannelSetting,
		connect.WithSchema(notificationServiceSetDmChannelSettingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetGdmChannelSettingHandler := connect.NewUnaryHandler(
		NotificationServiceSetGdmChannelSettingProcedure,
		svc.SetGdmChannelSetting,
		connect.WithSchema(notificationServiceSetGdmChannelSettingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetSpaceSettingsHandler := connect.NewUnaryHandler(
		NotificationServiceSetSpaceSettingsProcedure,
		svc.SetSpaceSettings,
		connect.WithSchema(notificationServiceSetSpaceSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSetSpaceChannelSettingsHandler := connect.NewUnaryHandler(
		NotificationServiceSetSpaceChannelSettingsProcedure,
		svc.SetSpaceChannelSettings,
		connect.WithSchema(notificationServiceSetSpaceChannelSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSubscribeWebPushHandler := connect.NewUnaryHandler(
		NotificationServiceSubscribeWebPushProcedure,
		svc.SubscribeWebPush,
		connect.WithSchema(notificationServiceSubscribeWebPushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUnsubscribeWebPushHandler := connect.NewUnaryHandler(
		NotificationServiceUnsubscribeWebPushProcedure,
		svc.UnsubscribeWebPush,
		connect.WithSchema(notificationServiceUnsubscribeWebPushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSubscribeAPNHandler := connect.NewUnaryHandler(
		NotificationServiceSubscribeAPNProcedure,
		svc.SubscribeAPN,
		connect.WithSchema(notificationServiceSubscribeAPNMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUnsubscribeAPNHandler := connect.NewUnaryHandler(
		NotificationServiceUnsubscribeAPNProcedure,
		svc.UnsubscribeAPN,
		connect.WithSchema(notificationServiceUnsubscribeAPNMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/river.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceGetSettingsProcedure:
			notificationServiceGetSettingsHandler.ServeHTTP(w, r)
		case NotificationServiceSetSettingsProcedure:
			notificationServiceSetSettingsHandler.ServeHTTP(w, r)
		case NotificationServiceSetDmGdmSettingsProcedure:
			notificationServiceSetDmGdmSettingsHandler.ServeHTTP(w, r)
		case NotificationServiceSetDmChannelSettingProcedure:
			notificationServiceSetDmChannelSettingHandler.ServeHTTP(w, r)
		case NotificationServiceSetGdmChannelSettingProcedure:
			notificationServiceSetGdmChannelSettingHandler.ServeHTTP(w, r)
		case NotificationServiceSetSpaceSettingsProcedure:
			notificationServiceSetSpaceSettingsHandler.ServeHTTP(w, r)
		case NotificationServiceSetSpaceChannelSettingsProcedure:
			notificationServiceSetSpaceChannelSettingsHandler.ServeHTTP(w, r)
		case NotificationServiceSubscribeWebPushProcedure:
			notificationServiceSubscribeWebPushHandler.ServeHTTP(w, r)
		case NotificationServiceUnsubscribeWebPushProcedure:
			notificationServiceUnsubscribeWebPushHandler.ServeHTTP(w, r)
		case NotificationServiceSubscribeAPNProcedure:
			notificationServiceSubscribeAPNHandler.ServeHTTP(w, r)
		case NotificationServiceUnsubscribeAPNProcedure:
			notificationServiceUnsubscribeAPNHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) GetSettings(context.Context, *connect.Request[protocol.GetSettingsRequest]) (*connect.Response[protocol.GetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.GetSettings is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetSettings(context.Context, *connect.Request[protocol.SetSettingsRequest]) (*connect.Response[protocol.SetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetSettings is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetDmGdmSettings(context.Context, *connect.Request[protocol.SetDmGdmSettingsRequest]) (*connect.Response[protocol.SetDmGdmSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetDmGdmSettings is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetDmChannelSetting(context.Context, *connect.Request[protocol.SetDmChannelSettingRequest]) (*connect.Response[protocol.SetDmChannelSettingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetDmChannelSetting is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetGdmChannelSetting(context.Context, *connect.Request[protocol.SetGdmChannelSettingRequest]) (*connect.Response[protocol.SetGdmChannelSettingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetGdmChannelSetting is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetSpaceSettings(context.Context, *connect.Request[protocol.SetSpaceSettingsRequest]) (*connect.Response[protocol.SetSpaceSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetSpaceSettings is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SetSpaceChannelSettings(context.Context, *connect.Request[protocol.SetSpaceChannelSettingsRequest]) (*connect.Response[protocol.SetSpaceChannelSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SetSpaceChannelSettings is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SubscribeWebPush(context.Context, *connect.Request[protocol.SubscribeWebPushRequest]) (*connect.Response[protocol.SubscribeWebPushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SubscribeWebPush is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UnsubscribeWebPush(context.Context, *connect.Request[protocol.UnsubscribeWebPushRequest]) (*connect.Response[protocol.UnsubscribeWebPushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.UnsubscribeWebPush is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SubscribeAPN(context.Context, *connect.Request[protocol.SubscribeAPNRequest]) (*connect.Response[protocol.SubscribeAPNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.SubscribeAPN is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UnsubscribeAPN(context.Context, *connect.Request[protocol.UnsubscribeAPNRequest]) (*connect.Response[protocol.UnsubscribeAPNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NotificationService.UnsubscribeAPN is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth.proto

package protocolconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protocol "github.com/towns-protocol/towns/core/node/protocol"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "river.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceStartAuthenticationProcedure is the fully-qualified name of the
	// AuthenticationService's StartAuthentication RPC.
	AuthenticationServiceStartAuthenticationProcedure = "/river.AuthenticationService/StartAuthentication"
	// AuthenticationServiceFinishAuthenticationProcedure is the fully-qualified name of the
	// AuthenticationService's FinishAuthentication RPC.
	AuthenticationServiceFinishAuthenticationProcedure = "/river.AuthenticationService/FinishAuthentication"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authenticationServiceServiceDescriptor                    = protocol.File_auth_proto.Services().ByName("AuthenticationService")
	authenticationServiceStartAuthenticationMethodDescriptor  = authenticationServiceServiceDescriptor.Methods().ByName("StartAuthentication")
	authenticationServiceFinishAuthenticationMethodDescriptor = authenticationServiceServiceDescriptor.Methods().ByName("FinishAuthentication")
)

// AuthenticationServiceClient is a client for the river.AuthenticationService service.
type AuthenticationServiceClient interface {
	// StartAuthentication returns a challenge that the client must sign to prove its identity.
	StartAuthentication(context.Context, *connect.Request[protocol.StartAuthenticationRequest]) (*connect.Response[protocol.StartAuthenticationResponse], error)
	// FinishAuthentication expects the signed challenge and if valid returns a session token
	// that can be used in the NotificationService.
	FinishAuthentication(context.Context, *connect.Request[protocol.FinishAuthenticationRequest]) (*connect.Response[protocol.FinishAuthenticationResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the river.AuthenticationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		startAuthentication: connect.NewClient[protocol.StartAuthenticationRequest, protocol.StartAuthenticationResponse](
			httpClient,
			baseURL+AuthenticationServiceStartAuthenticationProcedure,
			connect.WithSchema(authenticationServiceStartAuthenticationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		finishAuthentication: connect.NewClient[protocol.FinishAuthenticationRequest, protocol.FinishAuthenticationResponse](
			httpClient,
			baseURL+AuthenticationServiceFinishAuthenticationProcedure,
			connect.WithSchema(authenticationServiceFinishAuthenticationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	startAuthentication  *connect.Client[protocol.StartAuthenticationRequest, protocol.StartAuthenticationResponse]
	finishAuthentication *connect.Client[protocol.FinishAuthenticationRequest, protocol.FinishAuthenticationResponse]
}

// StartAuthentication calls river.AuthenticationService.StartAuthentication.
func (c *authenticationServiceClient) StartAuthentication(ctx context.Context, req *connect.Request[protocol.StartAuthenticationRequest]) (*connect.Response[protocol.StartAuthenticationResponse], error) {
	return c.startAuthentication.CallUnary(ctx, req)
}

// FinishAuthentication calls river.AuthenticationService.FinishAuthentication.
func (c *authenticationServiceClient) FinishAuthentication(ctx context.Context, req *connect.Request[protocol.FinishAuthenticationRequest]) (*connect.Response[protocol.FinishAuthenticationResponse], error) {
	return c.finishAuthentication.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the river.AuthenticationService service.
type AuthenticationServiceHandler interface {
	// StartAuthentication returns a challenge that the client must sign to prove its identity.
	StartAuthentication(context.Context, *connect.Request[protocol.StartAuthenticationRequest]) (*connect.Response[protocol.StartAuthenticationResponse], error)
	// FinishAuthentication expects the signed challenge and if valid returns a session token
	// that can be used in the NotificationService.
	FinishAuthentication(context.Context, *connect.Request[protocol.FinishAuthenticationRequest]) (*connect.Response[protocol.FinishAuthenticationResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceStartAuthenticationHandler := connect.NewUnaryHandler(
		AuthenticationServiceStartAuthenticationProcedure,
		svc.StartAuthentication,
		connect.WithSchema(authenticationServiceStartAuthenticationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceFinishAuthenticationHandler := connect.NewUnaryHandler(
		AuthenticationServiceFinishAuthenticationProcedure,
		svc.FinishAuthentication,
		connect.WithSchema(authenticationServiceFinishAuthenticationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/river.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceStartAuthenticationProcedure:
			authenticationServiceStartAuthenticationHandler.ServeHTTP(w, r)
		case AuthenticationServiceFinishAuthenticationProcedure:
			authenticationServiceFinishAuthenticationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) StartAuthentication(context.Context, *connect.Request[protocol.StartAuthenticationRequest]) (*connect.Response[protocol.StartAuthenticationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AuthenticationService.StartAuthentication is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) FinishAuthentication(context.Context, *connect.Request[protocol.FinishAuthenticationRequest]) (*connect.Response[protocol.FinishAuthenticationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AuthenticationService.FinishAuthentication is not implemented"))
}

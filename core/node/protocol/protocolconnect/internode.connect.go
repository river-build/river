// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internode.proto

package protocolconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protocol "github.com/river-build/river/core/node/protocol"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeToNodeName is the fully-qualified name of the NodeToNode service.
	NodeToNodeName = "river.NodeToNode"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeToNodeAllocateStreamProcedure is the fully-qualified name of the NodeToNode's AllocateStream
	// RPC.
	NodeToNodeAllocateStreamProcedure = "/river.NodeToNode/AllocateStream"
	// NodeToNodeNewEventReceivedProcedure is the fully-qualified name of the NodeToNode's
	// NewEventReceived RPC.
	NodeToNodeNewEventReceivedProcedure = "/river.NodeToNode/NewEventReceived"
	// NodeToNodeNewEventInPoolProcedure is the fully-qualified name of the NodeToNode's NewEventInPool
	// RPC.
	NodeToNodeNewEventInPoolProcedure = "/river.NodeToNode/NewEventInPool"
	// NodeToNodeProposeMiniblockProcedure is the fully-qualified name of the NodeToNode's
	// ProposeMiniblock RPC.
	NodeToNodeProposeMiniblockProcedure = "/river.NodeToNode/ProposeMiniblock"
	// NodeToNodeSaveMiniblockCandidateProcedure is the fully-qualified name of the NodeToNode's
	// SaveMiniblockCandidate RPC.
	NodeToNodeSaveMiniblockCandidateProcedure = "/river.NodeToNode/SaveMiniblockCandidate"
	// NodeToNodeGetMiniblocksByIdsProcedure is the fully-qualified name of the NodeToNode's
	// GetMiniblocksByIds RPC.
	NodeToNodeGetMiniblocksByIdsProcedure = "/river.NodeToNode/GetMiniblocksByIds"
	// NodeToNodeAllocateEphemeralStreamProcedure is the fully-qualified name of the NodeToNode's
	// AllocateEphemeralStream RPC.
	NodeToNodeAllocateEphemeralStreamProcedure = "/river.NodeToNode/AllocateEphemeralStream"
	// NodeToNodeSaveEphemeralMiniblockProcedure is the fully-qualified name of the NodeToNode's
	// SaveEphemeralMiniblock RPC.
	NodeToNodeSaveEphemeralMiniblockProcedure = "/river.NodeToNode/SaveEphemeralMiniblock"
	// NodeToNodeSealEphemeralStreamProcedure is the fully-qualified name of the NodeToNode's
	// SealEphemeralStream RPC.
	NodeToNodeSealEphemeralStreamProcedure = "/river.NodeToNode/SealEphemeralStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeToNodeServiceDescriptor                       = protocol.File_internode_proto.Services().ByName("NodeToNode")
	nodeToNodeAllocateStreamMethodDescriptor          = nodeToNodeServiceDescriptor.Methods().ByName("AllocateStream")
	nodeToNodeNewEventReceivedMethodDescriptor        = nodeToNodeServiceDescriptor.Methods().ByName("NewEventReceived")
	nodeToNodeNewEventInPoolMethodDescriptor          = nodeToNodeServiceDescriptor.Methods().ByName("NewEventInPool")
	nodeToNodeProposeMiniblockMethodDescriptor        = nodeToNodeServiceDescriptor.Methods().ByName("ProposeMiniblock")
	nodeToNodeSaveMiniblockCandidateMethodDescriptor  = nodeToNodeServiceDescriptor.Methods().ByName("SaveMiniblockCandidate")
	nodeToNodeGetMiniblocksByIdsMethodDescriptor      = nodeToNodeServiceDescriptor.Methods().ByName("GetMiniblocksByIds")
	nodeToNodeAllocateEphemeralStreamMethodDescriptor = nodeToNodeServiceDescriptor.Methods().ByName("AllocateEphemeralStream")
	nodeToNodeSaveEphemeralMiniblockMethodDescriptor  = nodeToNodeServiceDescriptor.Methods().ByName("SaveEphemeralMiniblock")
	nodeToNodeSealEphemeralStreamMethodDescriptor     = nodeToNodeServiceDescriptor.Methods().ByName("SealEphemeralStream")
)

// NodeToNodeClient is a client for the river.NodeToNode service.
type NodeToNodeClient interface {
	AllocateStream(context.Context, *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error)
	NewEventReceived(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error)
	NewEventInPool(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error)
	ProposeMiniblock(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error)
	SaveMiniblockCandidate(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error)
	GetMiniblocksByIds(context.Context, *connect.Request[protocol.GetMiniblocksByIdsRequest]) (*connect.ServerStreamForClient[protocol.GetMiniblockResponse], error)
	// Endpoints for ephemeral streams
	AllocateEphemeralStream(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error)
	SaveEphemeralMiniblock(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error)
	SealEphemeralStream(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error)
}

// NewNodeToNodeClient constructs a client for the river.NodeToNode service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeToNodeClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeToNodeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeToNodeClient{
		allocateStream: connect.NewClient[protocol.AllocateStreamRequest, protocol.AllocateStreamResponse](
			httpClient,
			baseURL+NodeToNodeAllocateStreamProcedure,
			connect.WithSchema(nodeToNodeAllocateStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		newEventReceived: connect.NewClient[protocol.NewEventReceivedRequest, protocol.NewEventReceivedResponse](
			httpClient,
			baseURL+NodeToNodeNewEventReceivedProcedure,
			connect.WithSchema(nodeToNodeNewEventReceivedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		newEventInPool: connect.NewClient[protocol.NewEventInPoolRequest, protocol.NewEventInPoolResponse](
			httpClient,
			baseURL+NodeToNodeNewEventInPoolProcedure,
			connect.WithSchema(nodeToNodeNewEventInPoolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		proposeMiniblock: connect.NewClient[protocol.ProposeMiniblockRequest, protocol.ProposeMiniblockResponse](
			httpClient,
			baseURL+NodeToNodeProposeMiniblockProcedure,
			connect.WithSchema(nodeToNodeProposeMiniblockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveMiniblockCandidate: connect.NewClient[protocol.SaveMiniblockCandidateRequest, protocol.SaveMiniblockCandidateResponse](
			httpClient,
			baseURL+NodeToNodeSaveMiniblockCandidateProcedure,
			connect.WithSchema(nodeToNodeSaveMiniblockCandidateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMiniblocksByIds: connect.NewClient[protocol.GetMiniblocksByIdsRequest, protocol.GetMiniblockResponse](
			httpClient,
			baseURL+NodeToNodeGetMiniblocksByIdsProcedure,
			connect.WithSchema(nodeToNodeGetMiniblocksByIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		allocateEphemeralStream: connect.NewClient[protocol.AllocateEphemeralStreamRequest, protocol.AllocateEphemeralStreamResponse](
			httpClient,
			baseURL+NodeToNodeAllocateEphemeralStreamProcedure,
			connect.WithSchema(nodeToNodeAllocateEphemeralStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveEphemeralMiniblock: connect.NewClient[protocol.SaveEphemeralMiniblockRequest, protocol.SaveEphemeralMiniblockResponse](
			httpClient,
			baseURL+NodeToNodeSaveEphemeralMiniblockProcedure,
			connect.WithSchema(nodeToNodeSaveEphemeralMiniblockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sealEphemeralStream: connect.NewClient[protocol.SealEphemeralStreamRequest, protocol.SealEphemeralStreamResponse](
			httpClient,
			baseURL+NodeToNodeSealEphemeralStreamProcedure,
			connect.WithSchema(nodeToNodeSealEphemeralStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeToNodeClient implements NodeToNodeClient.
type nodeToNodeClient struct {
	allocateStream          *connect.Client[protocol.AllocateStreamRequest, protocol.AllocateStreamResponse]
	newEventReceived        *connect.Client[protocol.NewEventReceivedRequest, protocol.NewEventReceivedResponse]
	newEventInPool          *connect.Client[protocol.NewEventInPoolRequest, protocol.NewEventInPoolResponse]
	proposeMiniblock        *connect.Client[protocol.ProposeMiniblockRequest, protocol.ProposeMiniblockResponse]
	saveMiniblockCandidate  *connect.Client[protocol.SaveMiniblockCandidateRequest, protocol.SaveMiniblockCandidateResponse]
	getMiniblocksByIds      *connect.Client[protocol.GetMiniblocksByIdsRequest, protocol.GetMiniblockResponse]
	allocateEphemeralStream *connect.Client[protocol.AllocateEphemeralStreamRequest, protocol.AllocateEphemeralStreamResponse]
	saveEphemeralMiniblock  *connect.Client[protocol.SaveEphemeralMiniblockRequest, protocol.SaveEphemeralMiniblockResponse]
	sealEphemeralStream     *connect.Client[protocol.SealEphemeralStreamRequest, protocol.SealEphemeralStreamResponse]
}

// AllocateStream calls river.NodeToNode.AllocateStream.
func (c *nodeToNodeClient) AllocateStream(ctx context.Context, req *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error) {
	return c.allocateStream.CallUnary(ctx, req)
}

// NewEventReceived calls river.NodeToNode.NewEventReceived.
func (c *nodeToNodeClient) NewEventReceived(ctx context.Context, req *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error) {
	return c.newEventReceived.CallUnary(ctx, req)
}

// NewEventInPool calls river.NodeToNode.NewEventInPool.
func (c *nodeToNodeClient) NewEventInPool(ctx context.Context, req *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error) {
	return c.newEventInPool.CallUnary(ctx, req)
}

// ProposeMiniblock calls river.NodeToNode.ProposeMiniblock.
func (c *nodeToNodeClient) ProposeMiniblock(ctx context.Context, req *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error) {
	return c.proposeMiniblock.CallUnary(ctx, req)
}

// SaveMiniblockCandidate calls river.NodeToNode.SaveMiniblockCandidate.
func (c *nodeToNodeClient) SaveMiniblockCandidate(ctx context.Context, req *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error) {
	return c.saveMiniblockCandidate.CallUnary(ctx, req)
}

// GetMiniblocksByIds calls river.NodeToNode.GetMiniblocksByIds.
func (c *nodeToNodeClient) GetMiniblocksByIds(ctx context.Context, req *connect.Request[protocol.GetMiniblocksByIdsRequest]) (*connect.ServerStreamForClient[protocol.GetMiniblockResponse], error) {
	return c.getMiniblocksByIds.CallServerStream(ctx, req)
}

// AllocateEphemeralStream calls river.NodeToNode.AllocateEphemeralStream.
func (c *nodeToNodeClient) AllocateEphemeralStream(ctx context.Context, req *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error) {
	return c.allocateEphemeralStream.CallUnary(ctx, req)
}

// SaveEphemeralMiniblock calls river.NodeToNode.SaveEphemeralMiniblock.
func (c *nodeToNodeClient) SaveEphemeralMiniblock(ctx context.Context, req *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error) {
	return c.saveEphemeralMiniblock.CallUnary(ctx, req)
}

// SealEphemeralStream calls river.NodeToNode.SealEphemeralStream.
func (c *nodeToNodeClient) SealEphemeralStream(ctx context.Context, req *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error) {
	return c.sealEphemeralStream.CallUnary(ctx, req)
}

// NodeToNodeHandler is an implementation of the river.NodeToNode service.
type NodeToNodeHandler interface {
	AllocateStream(context.Context, *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error)
	NewEventReceived(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error)
	NewEventInPool(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error)
	ProposeMiniblock(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error)
	SaveMiniblockCandidate(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error)
	GetMiniblocksByIds(context.Context, *connect.Request[protocol.GetMiniblocksByIdsRequest], *connect.ServerStream[protocol.GetMiniblockResponse]) error
	// Endpoints for ephemeral streams
	AllocateEphemeralStream(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error)
	SaveEphemeralMiniblock(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error)
	SealEphemeralStream(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error)
}

// NewNodeToNodeHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeToNodeHandler(svc NodeToNodeHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeToNodeAllocateStreamHandler := connect.NewUnaryHandler(
		NodeToNodeAllocateStreamProcedure,
		svc.AllocateStream,
		connect.WithSchema(nodeToNodeAllocateStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeNewEventReceivedHandler := connect.NewUnaryHandler(
		NodeToNodeNewEventReceivedProcedure,
		svc.NewEventReceived,
		connect.WithSchema(nodeToNodeNewEventReceivedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeNewEventInPoolHandler := connect.NewUnaryHandler(
		NodeToNodeNewEventInPoolProcedure,
		svc.NewEventInPool,
		connect.WithSchema(nodeToNodeNewEventInPoolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeProposeMiniblockHandler := connect.NewUnaryHandler(
		NodeToNodeProposeMiniblockProcedure,
		svc.ProposeMiniblock,
		connect.WithSchema(nodeToNodeProposeMiniblockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeSaveMiniblockCandidateHandler := connect.NewUnaryHandler(
		NodeToNodeSaveMiniblockCandidateProcedure,
		svc.SaveMiniblockCandidate,
		connect.WithSchema(nodeToNodeSaveMiniblockCandidateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeGetMiniblocksByIdsHandler := connect.NewServerStreamHandler(
		NodeToNodeGetMiniblocksByIdsProcedure,
		svc.GetMiniblocksByIds,
		connect.WithSchema(nodeToNodeGetMiniblocksByIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeAllocateEphemeralStreamHandler := connect.NewUnaryHandler(
		NodeToNodeAllocateEphemeralStreamProcedure,
		svc.AllocateEphemeralStream,
		connect.WithSchema(nodeToNodeAllocateEphemeralStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeSaveEphemeralMiniblockHandler := connect.NewUnaryHandler(
		NodeToNodeSaveEphemeralMiniblockProcedure,
		svc.SaveEphemeralMiniblock,
		connect.WithSchema(nodeToNodeSaveEphemeralMiniblockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeToNodeSealEphemeralStreamHandler := connect.NewUnaryHandler(
		NodeToNodeSealEphemeralStreamProcedure,
		svc.SealEphemeralStream,
		connect.WithSchema(nodeToNodeSealEphemeralStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/river.NodeToNode/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeToNodeAllocateStreamProcedure:
			nodeToNodeAllocateStreamHandler.ServeHTTP(w, r)
		case NodeToNodeNewEventReceivedProcedure:
			nodeToNodeNewEventReceivedHandler.ServeHTTP(w, r)
		case NodeToNodeNewEventInPoolProcedure:
			nodeToNodeNewEventInPoolHandler.ServeHTTP(w, r)
		case NodeToNodeProposeMiniblockProcedure:
			nodeToNodeProposeMiniblockHandler.ServeHTTP(w, r)
		case NodeToNodeSaveMiniblockCandidateProcedure:
			nodeToNodeSaveMiniblockCandidateHandler.ServeHTTP(w, r)
		case NodeToNodeGetMiniblocksByIdsProcedure:
			nodeToNodeGetMiniblocksByIdsHandler.ServeHTTP(w, r)
		case NodeToNodeAllocateEphemeralStreamProcedure:
			nodeToNodeAllocateEphemeralStreamHandler.ServeHTTP(w, r)
		case NodeToNodeSaveEphemeralMiniblockProcedure:
			nodeToNodeSaveEphemeralMiniblockHandler.ServeHTTP(w, r)
		case NodeToNodeSealEphemeralStreamProcedure:
			nodeToNodeSealEphemeralStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeToNodeHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeToNodeHandler struct{}

func (UnimplementedNodeToNodeHandler) AllocateStream(context.Context, *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.AllocateStream is not implemented"))
}

func (UnimplementedNodeToNodeHandler) NewEventReceived(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.NewEventReceived is not implemented"))
}

func (UnimplementedNodeToNodeHandler) NewEventInPool(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.NewEventInPool is not implemented"))
}

func (UnimplementedNodeToNodeHandler) ProposeMiniblock(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.ProposeMiniblock is not implemented"))
}

func (UnimplementedNodeToNodeHandler) SaveMiniblockCandidate(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.SaveMiniblockCandidate is not implemented"))
}

func (UnimplementedNodeToNodeHandler) GetMiniblocksByIds(context.Context, *connect.Request[protocol.GetMiniblocksByIdsRequest], *connect.ServerStream[protocol.GetMiniblockResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.GetMiniblocksByIds is not implemented"))
}

func (UnimplementedNodeToNodeHandler) AllocateEphemeralStream(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.AllocateEphemeralStream is not implemented"))
}

func (UnimplementedNodeToNodeHandler) SaveEphemeralMiniblock(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.SaveEphemeralMiniblock is not implemented"))
}

func (UnimplementedNodeToNodeHandler) SealEphemeralStream(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.NodeToNode.SealEphemeralStream is not implemented"))
}

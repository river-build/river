// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: mls_tools.proto

package mls_tools

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mls_Info_FullMethodName             = "/mls_tools.Mls/Info"
	Mls_InitialGroupInfo_FullMethodName = "/mls_tools.Mls/InitialGroupInfo"
	Mls_ExternalJoin_FullMethodName     = "/mls_tools.Mls/ExternalJoin"
)

// MlsClient is the client API for Mls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MlsClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	InitialGroupInfo(ctx context.Context, in *InitialGroupInfoRequest, opts ...grpc.CallOption) (*InitialGroupInfoResponse, error)
	ExternalJoin(ctx context.Context, in *ExternalJoinRequest, opts ...grpc.CallOption) (*ExternalJoinResponse, error)
}

type mlsClient struct {
	cc grpc.ClientConnInterface
}

func NewMlsClient(cc grpc.ClientConnInterface) MlsClient {
	return &mlsClient{cc}
}

func (c *mlsClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Mls_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsClient) InitialGroupInfo(ctx context.Context, in *InitialGroupInfoRequest, opts ...grpc.CallOption) (*InitialGroupInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitialGroupInfoResponse)
	err := c.cc.Invoke(ctx, Mls_InitialGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsClient) ExternalJoin(ctx context.Context, in *ExternalJoinRequest, opts ...grpc.CallOption) (*ExternalJoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalJoinResponse)
	err := c.cc.Invoke(ctx, Mls_ExternalJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlsServer is the server API for Mls service.
// All implementations must embed UnimplementedMlsServer
// for forward compatibility.
type MlsServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	InitialGroupInfo(context.Context, *InitialGroupInfoRequest) (*InitialGroupInfoResponse, error)
	ExternalJoin(context.Context, *ExternalJoinRequest) (*ExternalJoinResponse, error)
	mustEmbedUnimplementedMlsServer()
}

// UnimplementedMlsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMlsServer struct{}

func (UnimplementedMlsServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMlsServer) InitialGroupInfo(context.Context, *InitialGroupInfoRequest) (*InitialGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialGroupInfo not implemented")
}
func (UnimplementedMlsServer) ExternalJoin(context.Context, *ExternalJoinRequest) (*ExternalJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalJoin not implemented")
}
func (UnimplementedMlsServer) mustEmbedUnimplementedMlsServer() {}
func (UnimplementedMlsServer) testEmbeddedByValue()             {}

// UnsafeMlsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MlsServer will
// result in compilation errors.
type UnsafeMlsServer interface {
	mustEmbedUnimplementedMlsServer()
}

func RegisterMlsServer(s grpc.ServiceRegistrar, srv MlsServer) {
	// If the following call pancis, it indicates UnimplementedMlsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mls_ServiceDesc, srv)
}

func _Mls_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mls_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mls_InitialGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsServer).InitialGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mls_InitialGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsServer).InitialGroupInfo(ctx, req.(*InitialGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mls_ExternalJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsServer).ExternalJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mls_ExternalJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsServer).ExternalJoin(ctx, req.(*ExternalJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mls_ServiceDesc is the grpc.ServiceDesc for Mls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mls_tools.Mls",
	HandlerType: (*MlsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Mls_Info_Handler,
		},
		{
			MethodName: "InitialGroupInfo",
			Handler:    _Mls_InitialGroupInfo_Handler,
		},
		{
			MethodName: "ExternalJoin",
			Handler:    _Mls_ExternalJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mls_tools.proto",
}

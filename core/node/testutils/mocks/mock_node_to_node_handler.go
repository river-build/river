// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/river-build/river/core/node/protocol"
)

// MockNodeToNodeHandler is an autogenerated mock type for the NodeToNodeHandler type
type MockNodeToNodeHandler struct {
	mock.Mock
}

// AllocateEphemeralStream provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) AllocateEphemeralStream(_a0 context.Context, _a1 *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AllocateEphemeralStream")
	}

	var r0 *connect.Response[protocol.AllocateEphemeralStreamResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) (*connect.Response[protocol.AllocateEphemeralStreamResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) *connect.Response[protocol.AllocateEphemeralStreamResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.AllocateEphemeralStreamResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.AllocateEphemeralStreamRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateStream provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) AllocateStream(_a0 context.Context, _a1 *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AllocateStream")
	}

	var r0 *connect.Response[protocol.AllocateStreamResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.AllocateStreamRequest]) (*connect.Response[protocol.AllocateStreamResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.AllocateStreamRequest]) *connect.Response[protocol.AllocateStreamResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.AllocateStreamResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.AllocateStreamRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMiniblocksByIds provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockNodeToNodeHandler) GetMiniblocksByIds(_a0 context.Context, _a1 *connect.Request[protocol.GetMiniblocksByIdsRequest], _a2 *connect.ServerStream[protocol.GetMiniblockResponse]) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetMiniblocksByIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.GetMiniblocksByIdsRequest], *connect.ServerStream[protocol.GetMiniblockResponse]) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventInPool provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) NewEventInPool(_a0 context.Context, _a1 *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewEventInPool")
	}

	var r0 *connect.Response[protocol.NewEventInPoolResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) (*connect.Response[protocol.NewEventInPoolResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) *connect.Response[protocol.NewEventInPoolResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.NewEventInPoolResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.NewEventInPoolRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventReceived provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) NewEventReceived(_a0 context.Context, _a1 *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewEventReceived")
	}

	var r0 *connect.Response[protocol.NewEventReceivedResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) (*connect.Response[protocol.NewEventReceivedResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) *connect.Response[protocol.NewEventReceivedResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.NewEventReceivedResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.NewEventReceivedRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposeMiniblock provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) ProposeMiniblock(_a0 context.Context, _a1 *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ProposeMiniblock")
	}

	var r0 *connect.Response[protocol.ProposeMiniblockResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) (*connect.Response[protocol.ProposeMiniblockResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) *connect.Response[protocol.ProposeMiniblockResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.ProposeMiniblockResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.ProposeMiniblockRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEphemeralMiniblock provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) SaveEphemeralMiniblock(_a0 context.Context, _a1 *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveEphemeralMiniblock")
	}

	var r0 *connect.Response[protocol.SaveEphemeralMiniblockResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) (*connect.Response[protocol.SaveEphemeralMiniblockResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) *connect.Response[protocol.SaveEphemeralMiniblockResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.SaveEphemeralMiniblockResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.SaveEphemeralMiniblockRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMiniblockCandidate provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) SaveMiniblockCandidate(_a0 context.Context, _a1 *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveMiniblockCandidate")
	}

	var r0 *connect.Response[protocol.SaveMiniblockCandidateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) (*connect.Response[protocol.SaveMiniblockCandidateResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) *connect.Response[protocol.SaveMiniblockCandidateResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.SaveMiniblockCandidateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.SaveMiniblockCandidateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SealEphemeralStream provides a mock function with given fields: _a0, _a1
func (_m *MockNodeToNodeHandler) SealEphemeralStream(_a0 context.Context, _a1 *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SealEphemeralStream")
	}

	var r0 *connect.Response[protocol.SealEphemeralStreamResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) (*connect.Response[protocol.SealEphemeralStreamResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) *connect.Response[protocol.SealEphemeralStreamResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[protocol.SealEphemeralStreamResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[protocol.SealEphemeralStreamRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockNodeToNodeHandler creates a new instance of MockNodeToNodeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeToNodeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeToNodeHandler {
	mock := &MockNodeToNodeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

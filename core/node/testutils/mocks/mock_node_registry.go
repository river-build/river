// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	nodes "github.com/river-build/river/core/node/nodes"

	protocolconnect "github.com/river-build/river/core/node/protocol/protocolconnect"
)

// MockNodeRegistry is an autogenerated mock type for the NodeRegistry type
type MockNodeRegistry struct {
	mock.Mock
}

// GetAllNodes provides a mock function with no fields
func (_m *MockNodeRegistry) GetAllNodes() []*nodes.NodeRecord {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllNodes")
	}

	var r0 []*nodes.NodeRecord
	if rf, ok := ret.Get(0).(func() []*nodes.NodeRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*nodes.NodeRecord)
		}
	}

	return r0
}

// GetNode provides a mock function with given fields: address
func (_m *MockNodeRegistry) GetNode(address common.Address) (*nodes.NodeRecord, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *nodes.NodeRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (*nodes.NodeRecord, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) *nodes.NodeRecord); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nodes.NodeRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeToNodeClientForAddress provides a mock function with given fields: address
func (_m *MockNodeRegistry) GetNodeToNodeClientForAddress(address common.Address) (protocolconnect.NodeToNodeClient, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeToNodeClientForAddress")
	}

	var r0 protocolconnect.NodeToNodeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (protocolconnect.NodeToNodeClient, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) protocolconnect.NodeToNodeClient); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocolconnect.NodeToNodeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamServiceClientForAddress provides a mock function with given fields: address
func (_m *MockNodeRegistry) GetStreamServiceClientForAddress(address common.Address) (protocolconnect.StreamServiceClient, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamServiceClientForAddress")
	}

	var r0 protocolconnect.StreamServiceClient
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (protocolconnect.StreamServiceClient, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) protocolconnect.StreamServiceClient); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocolconnect.StreamServiceClient)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidNodeAddresses provides a mock function with no fields
func (_m *MockNodeRegistry) GetValidNodeAddresses() []common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidNodeAddresses")
	}

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

// NewMockNodeRegistry creates a new instance of MockNodeRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeRegistry {
	mock := &MockNodeRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

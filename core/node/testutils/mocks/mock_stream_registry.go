// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/river-build/river/core/node/shared"
)

// MockStreamRegistry is an autogenerated mock type for the StreamRegistry type
type MockStreamRegistry struct {
	mock.Mock
}

// AddStream provides a mock function with given fields: ctx, streamId, addrs, genesisMiniblockHash, lastMiniblockHash, lastMiniblockNum, isSealed
func (_m *MockStreamRegistry) AddStream(ctx context.Context, streamId shared.StreamId, addrs []common.Address, genesisMiniblockHash common.Hash, lastMiniblockHash common.Hash, lastMiniblockNum int64, isSealed bool) error {
	ret := _m.Called(ctx, streamId, addrs, genesisMiniblockHash, lastMiniblockHash, lastMiniblockNum, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for AddStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId, []common.Address, common.Hash, common.Hash, int64, bool) error); ok {
		r0 = rf(ctx, streamId, addrs, genesisMiniblockHash, lastMiniblockHash, lastMiniblockNum, isSealed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllocateStream provides a mock function with given fields: ctx, streamId, genesisMiniblockHash, genesisMiniblock
func (_m *MockStreamRegistry) AllocateStream(ctx context.Context, streamId shared.StreamId, genesisMiniblockHash common.Hash, genesisMiniblock []byte) ([]common.Address, error) {
	ret := _m.Called(ctx, streamId, genesisMiniblockHash, genesisMiniblock)

	if len(ret) == 0 {
		panic("no return value specified for AllocateStream")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId, common.Hash, []byte) ([]common.Address, error)); ok {
		return rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId, common.Hash, []byte) []common.Address); ok {
		r0 = rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.StreamId, common.Hash, []byte) error); ok {
		r1 = rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChooseStreamNodes provides a mock function with given fields: streamId
func (_m *MockStreamRegistry) ChooseStreamNodes(streamId shared.StreamId) ([]common.Address, error) {
	ret := _m.Called(streamId)

	if len(ret) == 0 {
		panic("no return value specified for ChooseStreamNodes")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(shared.StreamId) ([]common.Address, error)); ok {
		return rf(streamId)
	}
	if rf, ok := ret.Get(0).(func(shared.StreamId) []common.Address); ok {
		r0 = rf(streamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(shared.StreamId) error); ok {
		r1 = rf(streamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockStreamRegistry creates a new instance of MockStreamRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamRegistry {
	mock := &MockStreamRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

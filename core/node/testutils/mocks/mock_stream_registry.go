// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	nodes "github.com/towns-protocol/towns/core/node/nodes"

	shared "github.com/towns-protocol/towns/core/node/shared"
)

// MockStreamRegistry is an autogenerated mock type for the StreamRegistry type
type MockStreamRegistry struct {
	mock.Mock
}

// AllocateStream provides a mock function with given fields: ctx, streamId, genesisMiniblockHash, genesisMiniblock
func (_m *MockStreamRegistry) AllocateStream(ctx context.Context, streamId shared.StreamId, genesisMiniblockHash common.Hash, genesisMiniblock []byte) ([]common.Address, error) {
	ret := _m.Called(ctx, streamId, genesisMiniblockHash, genesisMiniblock)

	if len(ret) == 0 {
		panic("no return value specified for AllocateStream")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId, common.Hash, []byte) ([]common.Address, error)); ok {
		return rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId, common.Hash, []byte) []common.Address); ok {
		r0 = rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.StreamId, common.Hash, []byte) error); ok {
		r1 = rf(ctx, streamId, genesisMiniblockHash, genesisMiniblock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamInfo provides a mock function with given fields: ctx, streamId
func (_m *MockStreamRegistry) GetStreamInfo(ctx context.Context, streamId shared.StreamId) (nodes.StreamNodes, error) {
	ret := _m.Called(ctx, streamId)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInfo")
	}

	var r0 nodes.StreamNodes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId) (nodes.StreamNodes, error)); ok {
		return rf(ctx, streamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.StreamId) nodes.StreamNodes); ok {
		r0 = rf(ctx, streamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodes.StreamNodes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.StreamId) error); ok {
		r1 = rf(ctx, streamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockStreamRegistry creates a new instance of MockStreamRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamRegistry {
	mock := &MockStreamRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

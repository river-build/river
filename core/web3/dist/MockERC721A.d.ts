declare const MockERC721A: {
    readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ApprovalCallerNotOwnerNorApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ApprovalQueryForNonexistentToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BalanceQueryForZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Initializable_InInitializingState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Initializable_NotInInitializingState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Introspection_AlreadySupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Introspection_NotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MintERC2309QuantityExceedsLimit";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MintToZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MintZeroQuantity";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OwnerQueryForNonexistentToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OwnershipNotInitializedForExtraData";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferCallerNotOwnerNorApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFromIncorrectOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferToNonERC721ReceiverImplementer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferToZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "URIQueryForNonexistentToken";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "approved";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "fromTokenId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "toTokenId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "ConsecutiveTransfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "version";
            readonly type: "uint32";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "InterfaceAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "InterfaceRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "symbol_";
            readonly type: "string";
        }];
        readonly name: "__ERC721A_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "token";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "mintTo";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    readonly bytecode: {
        readonly object: "0x608060405234801561001057600080fd5b5061001961001e565b6100c4565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de8054640100000000900460ff161561006a576040516366008a2d60e01b815260040160405180910390fd5b805463ffffffff90811610156100c157805463ffffffff191663ffffffff90811782556040519081527fe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c9060200160405180910390a15b50565b611551806100d36000396000f3fe6080604052600436106100fe5760003560e01c80636352211e11610095578063a22cb46511610064578063a22cb46514610279578063b88d4fde14610299578063c87b56dd146102ac578063d2f01f19146102cc578063e985e9c5146102ec57600080fd5b80636352211e1461020457806370a0823114610224578063755edd171461024457806395d89b411461026457600080fd5b806323b872dd116100d157806323b872dd1461019e57806340c10f19146101b157806342842e0e146101d157806342966c68146101e457600080fd5b806306fdde0314610103578063081812fc1461012e578063095ea7b31461016657806318160ddd1461017b575b600080fd5b34801561010f57600080fd5b5061011861031c565b604051610125919061109b565b60405180910390f35b34801561013a57600080fd5b5061014e6101493660046110ae565b6103b7565b6040516001600160a01b039091168152602001610125565b6101796101743660046110de565b6103c8565b005b34801561018757600080fd5b506101906103d8565b604051908152602001610125565b6101796101ac366004611108565b6103e7565b3480156101bd57600080fd5b506101796101cc3660046110de565b6105cc565b6101796101df366004611108565b6105d6565b3480156101f057600080fd5b506101796101ff3660046110ae565b6105f6565b34801561021057600080fd5b5061014e61021f3660046110ae565b610602565b34801561023057600080fd5b5061019061023f366004611144565b61060d565b34801561025057600080fd5b5061019061025f366004611144565b610618565b34801561027057600080fd5b50610118610634565b34801561028557600080fd5b5061017961029436600461115f565b61064c565b6101796102a7366004611227565b6106c9565b3480156102b857600080fd5b506101186102c73660046110ae565b610713565b3480156102d857600080fd5b506101796102e73660046112c3565b6107a4565b3480156102f857600080fd5b5061030c610307366004611327565b6107f8565b6040519015158152602001610125565b6060610326610804565b60020180546103349061135a565b80601f01602080910402602001604051908101604052809291908181526020018280546103609061135a565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b5050505050905090565b60006103c282610828565b92915050565b6103d482826001610875565b5050565b60006103e261092a565b905090565b60006103f282610949565b9050836001600160a01b0316816001600160a01b0316146104255760405162a1148160e81b815260040160405180910390fd5b600080610431846109ed565b9150915061045681876104413390565b6001600160a01b039081169116811491141790565b6104815761046486336107f8565b61048157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166104a857604051633a954ecd60e21b815260040160405180910390fd5b80156104b357600082555b6104bb610804565b6001600160a01b03871660009081526005919091016020526040902080546000190190556104e7610804565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b1761051e610804565b60008681526004919091016020526040812091909155600160e11b84169003610594576001840161054d610804565b6000828152600491909101602052604081205490036105925761056e610804565b548114610592578361057e610804565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b031660008051602061153183398151915260405160405180910390a45b505050505050565b6103d48282610a15565b6105f1838383604051806020016040528060008152506106c9565b505050565b6105ff81610b2c565b50565b60006103c282610949565b60006103c282610b37565b6000610622610ba0565b905061062f826001610a15565b919050565b606061063e610804565b60030180546103349061135a565b80610655610804565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6106d48484846103e7565b6001600160a01b0383163b1561070d576106f084848484610bb0565b61070d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061071e82610c9b565b61073b57604051630a14c4b560e41b815260040160405180910390fd5b600061075260408051602081019091526000815290565b90508051600003610772576040518060200160405280600081525061079d565b8061077c84610cd7565b60405160200161078d929190611394565b6040516020818303038152906040525b9392505050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff166107ee57604051630ef4733760e31b815260040160405180910390fd5b6103d48282610d1b565b600061079d8383610d8f565b7f234d8962d7c9a6a6604d7f98797e6ad6d7a886804f7409feb26422e27bf8125490565b600061083382610c9b565b610850576040516333d1c03960e21b815260040160405180910390fd5b610858610804565b60009283526006016020525060409020546001600160a01b031690565b600061088083610602565b905081156108bf57336001600160a01b038216146108bf576108a28133610d8f565b6108bf576040516367d9dca160e11b815260040160405180910390fd5b836108c8610804565b6000858152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551859287811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a450505050565b600080610935610804565b60010154610941610804565b540303919050565b6000610953610804565b600083815260049190910160205260408120549150600160e01b821690036109d4578060000361062f57610985610804565b5482106109a557604051636f96cda160e11b815260040160405180910390fd5b6109ad610804565b6000199092016000818152600493909301602052604090922054905080156109a557919050565b604051636f96cda160e11b815260040160405180910390fd5b60008060006109fa610804565b60009485526006016020525050604090912080549092909150565b6000610a1f610804565b5490506000829003610a445760405163b562e8dd60e01b815260040160405180910390fd5b680100000000000000018202610a58610804565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b6001841460e11b1717610a93610804565b600083815260049190910160205260408120919091556001600160a01b0384169083830190839083906000805160206115318339815191528180a4600183015b818114610af95780836000600080516020611531833981519152600080a4600101610ad3565b5081600003610b1a57604051622e076360e81b815260040160405180910390fd5b80610b23610804565b55506105f19050565b6105ff816000610dcc565b60006001600160a01b038216610b60576040516323d3ad8160e21b815260040160405180910390fd5b67ffffffffffffffff610b71610804565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b6000610baa610804565b54919050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610be59033908990889088906004016113c3565b6020604051808303816000875af1925050508015610c20575060408051601f3d908101601f19168201909252610c1d91810190611400565b60015b610c7e573d808015610c4e576040519150601f19603f3d011682016040523d82523d6000602084013e610c53565b606091505b508051600003610c76576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000610ca5610804565b54821080156103c25750600160e01b610cbc610804565b60008481526004919091016020526040902054161592915050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610cf15750819003601f19909101908152919050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff16610d6557604051630ef4733760e31b815260040160405180910390fd5b610d756380ac58cd60e01b610f3b565b610d85635b5e139f60e01b610f3b565b6103d48282611019565b6000610d99610804565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b6000610dd783610949565b905080600080610de6866109ed565b915091508415610e2657610dfb818433610441565b610e2657610e098333610d8f565b610e2657604051632ce44b5f60e11b815260040160405180910390fd5b8015610e3157600082555b6fffffffffffffffffffffffffffffffff610e4a610804565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b17600360e01b17610e83610804565b60008881526004919091016020526040812091909155600160e11b85169003610ef95760018601610eb2610804565b600082815260049190910160205260408120549003610ef757610ed3610804565b548114610ef75784610ee3610804565b600083815260049190910160205260409020555b505b60405186906000906001600160a01b03861690600080516020611531833981519152908390a4610f27610804565b600190810180549091019055505050505050565b6001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c4602052604090205460ff161515600114610fc8576001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c460205260409020805460ff19166001179055610fe1565b604051637967f77d60e11b815260040160405180910390fd5b6040516001600160e01b03198216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f2290600090a250565b6000611023610804565b9050600281016110338482611470565b50600381016110428382611470565b50600090555050565b60005b8381101561106657818101518382015260200161104e565b50506000910152565b6000815180845261108781602086016020860161104b565b601f01601f19169290920160200192915050565b60208152600061079d602083018461106f565b6000602082840312156110c057600080fd5b5035919050565b80356001600160a01b038116811461062f57600080fd5b600080604083850312156110f157600080fd5b6110fa836110c7565b946020939093013593505050565b60008060006060848603121561111d57600080fd5b611126846110c7565b9250611134602085016110c7565b9150604084013590509250925092565b60006020828403121561115657600080fd5b61079d826110c7565b6000806040838503121561117257600080fd5b61117b836110c7565b91506020830135801515811461119057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111cc576111cc61119b565b604051601f8501601f19908116603f011681019082821181831017156111f4576111f461119b565b8160405280935085815286868601111561120d57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561123d57600080fd5b611246856110c7565b9350611254602086016110c7565b925060408501359150606085013567ffffffffffffffff81111561127757600080fd5b8501601f8101871361128857600080fd5b611297878235602084016111b1565b91505092959194509250565b600082601f8301126112b457600080fd5b61079d838335602085016111b1565b600080604083850312156112d657600080fd5b823567ffffffffffffffff808211156112ee57600080fd5b6112fa868387016112a3565b9350602085013591508082111561131057600080fd5b5061131d858286016112a3565b9150509250929050565b6000806040838503121561133a57600080fd5b611343836110c7565b9150611351602084016110c7565b90509250929050565b600181811c9082168061136e57607f821691505b60208210810361138e57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113a681846020880161104b565b8351908301906113ba81836020880161104b565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113f69083018461106f565b9695505050505050565b60006020828403121561141257600080fd5b81516001600160e01b03198116811461079d57600080fd5b601f8211156105f157600081815260208120601f850160051c810160208610156114515750805b601f850160051c820191505b818110156105c45782815560010161145d565b815167ffffffffffffffff81111561148a5761148a61119b565b61149e81611498845461135a565b8461142a565b602080601f8311600181146114d357600084156114bb5750858301515b600019600386901b1c1916600185901b1785556105c4565b600085815260208120601f198616915b82811015611502578886015182559484019460019091019084016114e3565b50858210156115205787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
        readonly sourceMap: "188:302:261:-:0;;;;;;;;;;;;-1:-1:-1;385:22:43;:20;:22::i;:::-;188:302:261;;1653:314:54;186:68:55;1779:14:54;;;;;;;1775:62;;;1802:35;;-1:-1:-1;;;1802:35:54;;;;;;;;;;;1775:62;1848:9;;1860:16;1848:9;;;:28;1844:119;;;1886:28;;-1:-1:-1;;1886:28:54;1898:16;1886:28;;;;;1927:29;;158:42:420;;;1927:29:54;;146:2:420;131:18;1927:29:54;;;;;;;1844:119;1694:273;1653:314::o;14:192:420:-;188:302:261;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "0x6080604052600436106100fe5760003560e01c80636352211e11610095578063a22cb46511610064578063a22cb46514610279578063b88d4fde14610299578063c87b56dd146102ac578063d2f01f19146102cc578063e985e9c5146102ec57600080fd5b80636352211e1461020457806370a0823114610224578063755edd171461024457806395d89b411461026457600080fd5b806323b872dd116100d157806323b872dd1461019e57806340c10f19146101b157806342842e0e146101d157806342966c68146101e457600080fd5b806306fdde0314610103578063081812fc1461012e578063095ea7b31461016657806318160ddd1461017b575b600080fd5b34801561010f57600080fd5b5061011861031c565b604051610125919061109b565b60405180910390f35b34801561013a57600080fd5b5061014e6101493660046110ae565b6103b7565b6040516001600160a01b039091168152602001610125565b6101796101743660046110de565b6103c8565b005b34801561018757600080fd5b506101906103d8565b604051908152602001610125565b6101796101ac366004611108565b6103e7565b3480156101bd57600080fd5b506101796101cc3660046110de565b6105cc565b6101796101df366004611108565b6105d6565b3480156101f057600080fd5b506101796101ff3660046110ae565b6105f6565b34801561021057600080fd5b5061014e61021f3660046110ae565b610602565b34801561023057600080fd5b5061019061023f366004611144565b61060d565b34801561025057600080fd5b5061019061025f366004611144565b610618565b34801561027057600080fd5b50610118610634565b34801561028557600080fd5b5061017961029436600461115f565b61064c565b6101796102a7366004611227565b6106c9565b3480156102b857600080fd5b506101186102c73660046110ae565b610713565b3480156102d857600080fd5b506101796102e73660046112c3565b6107a4565b3480156102f857600080fd5b5061030c610307366004611327565b6107f8565b6040519015158152602001610125565b6060610326610804565b60020180546103349061135a565b80601f01602080910402602001604051908101604052809291908181526020018280546103609061135a565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b5050505050905090565b60006103c282610828565b92915050565b6103d482826001610875565b5050565b60006103e261092a565b905090565b60006103f282610949565b9050836001600160a01b0316816001600160a01b0316146104255760405162a1148160e81b815260040160405180910390fd5b600080610431846109ed565b9150915061045681876104413390565b6001600160a01b039081169116811491141790565b6104815761046486336107f8565b61048157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166104a857604051633a954ecd60e21b815260040160405180910390fd5b80156104b357600082555b6104bb610804565b6001600160a01b03871660009081526005919091016020526040902080546000190190556104e7610804565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b1761051e610804565b60008681526004919091016020526040812091909155600160e11b84169003610594576001840161054d610804565b6000828152600491909101602052604081205490036105925761056e610804565b548114610592578361057e610804565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b031660008051602061153183398151915260405160405180910390a45b505050505050565b6103d48282610a15565b6105f1838383604051806020016040528060008152506106c9565b505050565b6105ff81610b2c565b50565b60006103c282610949565b60006103c282610b37565b6000610622610ba0565b905061062f826001610a15565b919050565b606061063e610804565b60030180546103349061135a565b80610655610804565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6106d48484846103e7565b6001600160a01b0383163b1561070d576106f084848484610bb0565b61070d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061071e82610c9b565b61073b57604051630a14c4b560e41b815260040160405180910390fd5b600061075260408051602081019091526000815290565b90508051600003610772576040518060200160405280600081525061079d565b8061077c84610cd7565b60405160200161078d929190611394565b6040516020818303038152906040525b9392505050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff166107ee57604051630ef4733760e31b815260040160405180910390fd5b6103d48282610d1b565b600061079d8383610d8f565b7f234d8962d7c9a6a6604d7f98797e6ad6d7a886804f7409feb26422e27bf8125490565b600061083382610c9b565b610850576040516333d1c03960e21b815260040160405180910390fd5b610858610804565b60009283526006016020525060409020546001600160a01b031690565b600061088083610602565b905081156108bf57336001600160a01b038216146108bf576108a28133610d8f565b6108bf576040516367d9dca160e11b815260040160405180910390fd5b836108c8610804565b6000858152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551859287811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a450505050565b600080610935610804565b60010154610941610804565b540303919050565b6000610953610804565b600083815260049190910160205260408120549150600160e01b821690036109d4578060000361062f57610985610804565b5482106109a557604051636f96cda160e11b815260040160405180910390fd5b6109ad610804565b6000199092016000818152600493909301602052604090922054905080156109a557919050565b604051636f96cda160e11b815260040160405180910390fd5b60008060006109fa610804565b60009485526006016020525050604090912080549092909150565b6000610a1f610804565b5490506000829003610a445760405163b562e8dd60e01b815260040160405180910390fd5b680100000000000000018202610a58610804565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b6001841460e11b1717610a93610804565b600083815260049190910160205260408120919091556001600160a01b0384169083830190839083906000805160206115318339815191528180a4600183015b818114610af95780836000600080516020611531833981519152600080a4600101610ad3565b5081600003610b1a57604051622e076360e81b815260040160405180910390fd5b80610b23610804565b55506105f19050565b6105ff816000610dcc565b60006001600160a01b038216610b60576040516323d3ad8160e21b815260040160405180910390fd5b67ffffffffffffffff610b71610804565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b6000610baa610804565b54919050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610be59033908990889088906004016113c3565b6020604051808303816000875af1925050508015610c20575060408051601f3d908101601f19168201909252610c1d91810190611400565b60015b610c7e573d808015610c4e576040519150601f19603f3d011682016040523d82523d6000602084013e610c53565b606091505b508051600003610c76576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000610ca5610804565b54821080156103c25750600160e01b610cbc610804565b60008481526004919091016020526040902054161592915050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610cf15750819003601f19909101908152919050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff16610d6557604051630ef4733760e31b815260040160405180910390fd5b610d756380ac58cd60e01b610f3b565b610d85635b5e139f60e01b610f3b565b6103d48282611019565b6000610d99610804565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b6000610dd783610949565b905080600080610de6866109ed565b915091508415610e2657610dfb818433610441565b610e2657610e098333610d8f565b610e2657604051632ce44b5f60e11b815260040160405180910390fd5b8015610e3157600082555b6fffffffffffffffffffffffffffffffff610e4a610804565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b17600360e01b17610e83610804565b60008881526004919091016020526040812091909155600160e11b85169003610ef95760018601610eb2610804565b600082815260049190910160205260408120549003610ef757610ed3610804565b548114610ef75784610ee3610804565b600083815260049190910160205260409020555b505b60405186906000906001600160a01b03861690600080516020611531833981519152908390a4610f27610804565b600190810180549091019055505050505050565b6001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c4602052604090205460ff161515600114610fc8576001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c460205260409020805460ff19166001179055610fe1565b604051637967f77d60e11b815260040160405180910390fd5b6040516001600160e01b03198216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f2290600090a250565b6000611023610804565b9050600281016110338482611470565b50600381016110428382611470565b50600090555050565b60005b8381101561106657818101518382015260200161104e565b50506000910152565b6000815180845261108781602086016020860161104b565b601f01601f19169290920160200192915050565b60208152600061079d602083018461106f565b6000602082840312156110c057600080fd5b5035919050565b80356001600160a01b038116811461062f57600080fd5b600080604083850312156110f157600080fd5b6110fa836110c7565b946020939093013593505050565b60008060006060848603121561111d57600080fd5b611126846110c7565b9250611134602085016110c7565b9150604084013590509250925092565b60006020828403121561115657600080fd5b61079d826110c7565b6000806040838503121561117257600080fd5b61117b836110c7565b91506020830135801515811461119057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111cc576111cc61119b565b604051601f8501601f19908116603f011681019082821181831017156111f4576111f461119b565b8160405280935085815286868601111561120d57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561123d57600080fd5b611246856110c7565b9350611254602086016110c7565b925060408501359150606085013567ffffffffffffffff81111561127757600080fd5b8501601f8101871361128857600080fd5b611297878235602084016111b1565b91505092959194509250565b600082601f8301126112b457600080fd5b61079d838335602085016111b1565b600080604083850312156112d657600080fd5b823567ffffffffffffffff808211156112ee57600080fd5b6112fa868387016112a3565b9350602085013591508082111561131057600080fd5b5061131d858286016112a3565b9150509250929050565b6000806040838503121561133a57600080fd5b611343836110c7565b9150611351602084016110c7565b90509250929050565b600181811c9082168061136e57607f821691505b60208210810361138e57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113a681846020880161104b565b8351908301906113ba81836020880161104b565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113f69083018461106f565b9695505050505050565b60006020828403121561141257600080fd5b81516001600160e01b03198116811461079d57600080fd5b601f8211156105f157600081815260208120601f850160051c810160208610156114515750805b601f850160051c820191505b818110156105c45782815560010161145d565b815167ffffffffffffffff81111561148a5761148a61119b565b61149e81611498845461135a565b8461142a565b602080601f8311600181146114d357600084156114bb5750858301515b600019600386901b1c1916600185901b1785556105c4565b600085815260208120601f198616915b82811015611502578886015182559484019460019091019084016114e3565b50858210156115205787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
        readonly sourceMap: "188:302:261:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2044:116:90;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3522:132;;;;;;;;;;-1:-1:-1;3522:132:90;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1119:32:420;;;1101:51;;1089:2;1074:18;3522:132:90;955:203:420;3260:128:90;;;;;;:::i;:::-;;:::i;:::-;;1527:93;;;;;;;;;;;;;:::i;:::-;;;1746:25:420;;;1734:2;1719:18;1527:93:90;1600:177:420;4917:2680:90;;;;;;:::i;:::-;;:::i;344:79:261:-;;;;;;;;;;-1:-1:-1;344:79:261;;;;;:::i;:::-;;:::i;7680:167:90:-;;;;;;:::i;:::-;;:::i;427:61:261:-;;;;;;;;;;-1:-1:-1;427:61:261;;;;;:::i;:::-;;:::i;2891:152:90:-;;;;;;;;;;-1:-1:-1;2891:152:90;;;;;:::i;:::-;;:::i;1697:107::-;;;;;;;;;;-1:-1:-1;1697:107:90;;;;;:::i;:::-;;:::i;224:116:261:-;;;;;;;;;;-1:-1:-1;224:116:261;;;;;:::i;:::-;;:::i;2223:120:90:-;;;;;;;;;;;;;:::i;3957:269::-;;;;;;;;;;-1:-1:-1;3957:269:90;;;;;:::i;:::-;;:::i;8396:348::-;;;;;;:::i;:::-;;:::i;2436:329::-;;;;;;;;;;-1:-1:-1;2436:329:90;;;;;:::i;:::-;;:::i;876:157::-;;;;;;;;;;-1:-1:-1;876:157:90;;;;;:::i;:::-;;:::i;4364:167::-;;;;;;;;;;-1:-1:-1;4364:167:90;;;;;:::i;:::-;;:::i;:::-;;;5301:14:420;;5294:22;5276:41;;5264:2;5249:18;4364:167:90;5136:187:420;2044:116:90;2098:13;2126:23;:21;:23::i;:::-;:29;;2119:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2044:116;:::o;3522:132::-;3606:7;3628:21;3641:7;3628:12;:21::i;:::-;3621:28;3522:132;-1:-1:-1;;3522:132:90:o;3260:128::-;3356:27;3365:2;3369:7;3378:4;3356:8;:27::i;:::-;3260:128;;:::o;1527:93::-;1579:7;1601:14;:12;:14::i;:::-;1594:21;;1527:93;:::o;4917:2680::-;5036:27;5066;5085:7;5066:18;:27::i;:::-;5036:57;;5145:4;-1:-1:-1;;;;;5104:45:90;5120:19;-1:-1:-1;;;;;5104:45:90;;5100:92;;5164:28;;-1:-1:-1;;;5164:28:90;;;;;;;;;;;5100:92;5207:27;5242:23;5274:35;5301:7;5274:26;:35::i;:::-;5199:110;;;;5398:68;5423:15;5440:4;5446:19;29472:10:91;;29390:97;5446:19:90;-1:-1:-1;;;;;11873:32:91;;;11731:28;;11988:20;;12010:30;;11985:56;;11464:587;5398:68:90;5393:181;;5479:43;5496:4;29472:10:91;4364:167:90;:::i;5479:43::-;5474:100;;5539:35;;-1:-1:-1;;;5539:35:90;;;;;;;;;;;5474:100;-1:-1:-1;;;;;5585:16:90;;5581:52;;5610:23;;-1:-1:-1;;;5610:23:90;;;;;;;;;;;5581:52;5758:15;5755:135;;;5880:1;5859:19;5852:30;5755:135;6230:23;:21;:23::i;:::-;-1:-1:-1;;;;;6230:48:90;;;;;;:42;;;;;:48;;;;;6228:50;;-1:-1:-1;;6228:50:90;;;6316:23;:21;:23::i;:::-;-1:-1:-1;;;;;6316:46:90;;;;;;:42;;;;;:46;;;;;;6314:48;;;;;;10232:11:91;10207:23;10203:41;10190:63;-1:-1:-1;;;10190:63:91;6590:23:90;:21;:23::i;:::-;:50;;;;:41;;;;;:50;;;;;:184;;;;-1:-1:-1;;;6879:47:90;;:52;;6875:625;;6975:1;6965:11;;7080:23;:21;:23::i;:::-;:54;;;;:41;;;;;:54;;;;;;:59;;7076:416;;7220:23;:21;:23::i;:::-;:37;7205:52;;7201:281;;7450:19;7365:23;:21;:23::i;:::-;:82;;;;:41;;;;;:82;;;;;:104;7201:281;6933:567;6875:625;7536:7;7532:2;-1:-1:-1;;;;;7517:27:90;7526:4;-1:-1:-1;;;;;7517:27:90;-1:-1:-1;;;;;;;;;;;7517:27:90;;;;;;;;;7550:42;5030:2567;;;4917:2680;;;:::o;344:79:261:-;401:17;407:2;411:6;401:5;:17::i;7680:167:90:-;7803:39;7820:4;7826:2;7830:7;7803:39;;;;;;;;;;;;:16;:39::i;:::-;7680:167;;;:::o;427:61:261:-;471:12;477:5;471;:12::i;:::-;427:61;:::o;2891:152:90:-;2971:7;3009:27;3028:7;3009:18;:27::i;1697:107::-;1760:7;1782:17;1793:5;1782:10;:17::i;224:116:261:-;270:15;303:14;:12;:14::i;:::-;293:24;;323:12;329:2;333:1;323:5;:12::i;:::-;224:116;;;:::o;2223:120:90:-;2279:13;2307:23;:21;:23::i;:::-;:31;;2300:38;;;;;:::i;3957:269::-;4147:8;4059:23;:21;:23::i;:::-;29472:10:91;4059:63:90;;;;:42;;;;;:63;;;;;;;;-1:-1:-1;;;;;4059:85:90;;;;;;;;;;;;:96;;-1:-1:-1;;4059:96:90;;;;;;;;;;;4166:55;;5301:14:420;;5294:22;5276:41;;4059:85:90;;29472:10:91;;4166:55:90;;5249:18:420;4166:55:90;;;;;;;3957:269;;:::o;8396:348::-;8543:31;8556:4;8562:2;8566:7;8543:12;:31::i;:::-;-1:-1:-1;;;;;8584:14:90;;;:19;8580:160;;8616:56;8647:4;8653:2;8657:7;8666:5;8616:30;:56::i;:::-;8611:129;;8691:40;;-1:-1:-1;;;8691:40:90;;;;;;;;;;;8611:129;8396:348;;;;:::o;2436:329::-;2517:13;2543:16;2551:7;2543;:16::i;:::-;2538:59;;2568:29;;-1:-1:-1;;;2568:29:90;;;;;;;;;;;2538:59;2604:21;2628:10;6624:9:91;;;;;;;;;-1:-1:-1;6624:9:91;;;6552:86;2628:10:90;2604:34;;2663:7;2657:21;2682:1;2657:26;:103;;;;;;;;;;;;;;;;;2718:7;2727:18;2737:7;2727:9;:18::i;:::-;2701:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2657:103;2644:116;2436:329;-1:-1:-1;;;2436:329:90:o;876:157::-;186:68:55;1263:42:54;;;;;;1258:100;;1320:38;;-1:-1:-1;;;1320:38:54;;;;;;;;;;;1258:100;988:40:90::1;1013:5;1020:7;988:24;:40::i;4364:167::-:0;4473:4;4492:34;4510:5;4517:8;4492:17;:34::i;1557:139:92:-;183:44;;1557:139::o;22507:230:91:-;22585:7;22605:16;22613:7;22605;:16::i;:::-;22600:64;;22630:34;;-1:-1:-1;;;22630:34:91;;;;;;;;;;;22600:64;22678:23;:21;:23::i;:::-;:48;;;;:39;;:48;;-1:-1:-1;22678:48:91;;;:54;-1:-1:-1;;;;;22678:54:91;;22507:230::o;23287:439::-;23393:13;23409:17;23418:7;23409:8;:17::i;:::-;23393:33;;23437:13;23433:184;;;29472:10;-1:-1:-1;;;;;23462:28:91;;;23458:159;;23505:45;23523:5;29472:10;23505:17;:45::i;:::-;23500:117;;23571:35;;-1:-1:-1;;;23571:35:91;;;;;;;;;;;23500:117;23680:2;23623:23;:21;:23::i;:::-;:48;;;;:39;;;;;:48;;;;;;:59;;-1:-1:-1;;;;;;23623:59:91;-1:-1:-1;;;;;23623:59:91;;;;;;23693:28;23623:48;;23693:28;;;;;;;;;;23623:48;23693:28;23387:339;23287:439;;;:::o;2985:351::-;3032:7;;3263:23;:21;:23::i;:::-;:36;;;3215:23;:21;:23::i;:::-;:37;:84;:110;;2985:351;-1:-1:-1;2985:351:91:o;7836:1497::-;7912:14;7983:23;:21;:23::i;:::-;:50;;;;:41;;;;;:50;;;;;;;-1:-1:-1;;;;8069:24:91;;:29;;8065:1214;;8190:6;8200:1;8190:11;8186:833;;8230:23;:21;:23::i;:::-;:37;8219:48;;8215:104;;8288:31;;-1:-1:-1;;;8288:31:91;;;;;;;;;;;8215:104;8864:23;:21;:23::i;:::-;-1:-1:-1;;8906:9:91;;;8864:52;;;;:41;;;;;:52;;;;;;;;-1:-1:-1;8944:25:91;;8806:203;8944:25;7836:1497;;;:::o;8065:1214::-;9297:31;;-1:-1:-1;;;9297:31:91;;;;;;;;;;;12151:478;12247:27;12276:23;12309:38;12350:30;:28;:30::i;:::-;:62;;;;:53;;:62;;-1:-1:-1;;12350:62:91;;;;12593:26;;12350:62;;12593:26;;-1:-1:-1;12151:478:91:o;15802:2642::-;15870:20;15893:23;:21;:23::i;:::-;:37;;-1:-1:-1;15893:37:91;15940:13;;;15936:44;;15962:18;;-1:-1:-1;;;15962:18:91;;;;;;;;;;;15936:44;16477:32;16457:53;;16399:23;:21;:23::i;:::-;-1:-1:-1;;;;;16399:46:91;;;;;;:42;;;;;:46;;;;;;:111;;;;;;;;;10232:11;10207:23;10203:41;-1:-1:-1;10627:15:91;;10601:24;10597:46;10200:52;10190:63;16710:23;:21;:23::i;:::-;:71;;;;:41;;;;;:71;;;;;:188;;;;-1:-1:-1;;;;;17419:25:91;;;16945:23;;;;16761:12;;17419:25;;-1:-1:-1;;;;;;;;;;;16710:71:91;;17491:260;18029:1;18015:12;18011:20;17980:275;18061:3;18052:7;18049:16;17980:275;;18237:7;18227:8;18224:1;-1:-1:-1;;;;;;;;;;;18194:1:91;18191;18186:59;18103:1;18090:15;17980:275;;;17984:57;18274:8;18286:1;18274:13;18270:45;;18296:19;;-1:-1:-1;;;18296:19:91;;;;;;;;;;;18270:45;18364:3;18324:23;:21;:23::i;:::-;:43;-1:-1:-1;18379:60:91;;-1:-1:-1;8396:348:90;23970:81:91;24025:21;24031:7;24040:5;24025;:21::i;3340:242::-;3398:7;-1:-1:-1;;;;;3417:19:91;;3413:60;;3445:28;;-1:-1:-1;;;3445:28:91;;;;;;;;;;;3413:60;571:13;3492:23;:21;:23::i;:::-;:42;;:49;3535:5;-1:-1:-1;;;;;3492:49:91;-1:-1:-1;;;;;3492:49:91;;;;;;;;;;;;;:85;3479:98;;3340:242;;;:::o;4042:119::-;4097:7;4119:23;:21;:23::i;:::-;:37;;4042:119;-1:-1:-1;4042:119:91:o;14710:674::-;14873:139;;-1:-1:-1;;;14873:139:91;;14851:4;;-1:-1:-1;;;;;14873:56:91;;;;;:139;;29472:10;;14968:4;;14982:7;;14999:5;;14873:139;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14873:139:91;;;;;;;;-1:-1:-1;;14873:139:91;;;;;;;;;;;;:::i;:::-;;;14863:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15195:6;:13;15212:1;15195:18;15191:183;;15232:40;;-1:-1:-1;;;15232:40:91;;;;;;;;;;;15191:183;15348:6;15342:13;15333:6;15329:2;15325:15;15318:38;14863:517;-1:-1:-1;;;;;;15064:83:91;-1:-1:-1;;;15064:83:91;;-1:-1:-1;14710:674:91;;;;;;:::o;11067:301::-;11132:4;11203:23;:21;:23::i;:::-;:37;11193:47;;11157:187;;;;;-1:-1:-1;;;11271:23:91;:21;:23::i;:::-;:50;;;;:41;;;;;:50;;;;;;:68;:73;11144:200;11067:301;-1:-1:-1;;11067:301:91:o;29576:1574::-;29649:17;30043:4;30036;30030:11;30026:22;30121:1;30115:4;30108:15;30182:4;30179:1;30175:12;30168:19;;;30250:1;30245:3;30238:14;30339:3;30549:5;30531:419;30596:1;30591:3;30587:11;30580:18;;30764:2;30758:4;30754:13;30750:2;30746:22;30741:3;30733:36;30856:2;30846:13;;30911:25;30531:419;30911:25;-1:-1:-1;30972:13:91;;;-1:-1:-1;;31073:14:91;;;31121:19;;;31073:14;29576:1574;-1:-1:-1;29576:1574:91:o;1037:299:90:-;186:68:55;1263:42:54;;;;;;1258:100;;1320:38;;-1:-1:-1;;;1320:38:54;;;;;;;;;;;1258:100;1159:25:90::1;-1:-1:-1::0;;;1159:13:90::1;:25::i;:::-;1224;-1:-1:-1::0;;;1224:13:90::1;:25::i;:::-;1297:34;1316:5;1323:7;1297:18;:34::i;22317:186:91:-:0;22420:4;22439:23;:21;:23::i;:::-;-1:-1:-1;;;;;22439:49:91;;;;;;;:42;;;;;:49;;;;;;;;:59;;;;;;;;;;-1:-1:-1;22439:59:91;;;;;22317:186::o;24246:2906::-;24321:27;24351;24370:7;24351:18;:27::i;:::-;24321:57;-1:-1:-1;24321:57:91;24385:12;;24519:35;24546:7;24519:26;:35::i;:::-;24444:110;;;;24565:13;24561:299;;;24672:68;24697:15;24714:4;29472:10;24720:19;29390:97;24672:68;24667:186;;24755:44;24773:4;29472:10;23505:17;:45::i;24755:44::-;24750:103;;24818:35;;-1:-1:-1;;;24818:35:91;;;;;;;;;;;24750:103;24992:15;24989:135;;;25114:1;25093:19;25086:30;24989:135;25711:40;25651:23;:21;:23::i;:::-;-1:-1:-1;;;;;25651:48:91;;;;;;:42;;;;;:48;;;;;;:100;;;;;;;;;10232:11;10207:23;10203:41;10190:63;-1:-1:-1;;;10190:63:91;25946:23;:21;:23::i;:::-;:50;;;;:41;;;;;:50;;;;;:214;;;;-1:-1:-1;;;26265:47:91;;:52;;26261:625;;26361:1;26351:11;;26466:23;:21;:23::i;:::-;:54;;;;:41;;;;;:54;;;;;;:59;;26462:416;;26606:23;:21;:23::i;:::-;:37;26591:52;;26587:281;;26836:19;26751:23;:21;:23::i;:::-;:82;;;;:41;;;;;:82;;;;;:104;26587:281;26319:567;26261:625;26903:35;;26930:7;;26926:1;;-1:-1:-1;;;;;26903:35:91;;;-1:-1:-1;;;;;;;;;;;26903:35:91;26926:1;;26903:35;27103:23;:21;:23::i;:::-;:36;;;;:38;;;;;;;-1:-1:-1;;;;;;24246:2906:91:o;461:282:57:-;-1:-1:-1;;;;;;1130:62:57;;1105:4;1130:62;;;186:68:59;1130:62:57;;;;;;;;:70;;:62;:70;519:182;;-1:-1:-1;;;;;;565:62:57;;:49;:62;;;186:68:59;565:62:57;;;;;:69;;-1:-1:-1;;565:69:57;630:4;565:69;;;519:182;;;662:32;;-1:-1:-1;;;662:32:57;;;;;;;;;;;519:182;711:27;;-1:-1:-1;;;;;;711:27:57;;;;;;;;461:282;:::o;2560:247:91:-;2657:32;2692:23;:21;:23::i;:::-;2657:58;-1:-1:-1;2722:8:91;;;:15;2733:4;2722:8;:15;:::i;:::-;-1:-1:-1;2743:10:91;;;:19;2756:6;2743:10;:19;:::i;:::-;-1:-1:-1;3948:7:91;2768:34;;-1:-1:-1;;2560:247:91:o;14:250:420:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:420;238:16;;231:27;14:250::o;269:271::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;522:2;501:15;-1:-1:-1;;497:29:420;488:39;;;;529:4;484:50;;269:271;-1:-1:-1;;269:271:420:o;545:220::-;694:2;683:9;676:21;657:4;714:45;755:2;744:9;740:18;732:6;714:45;:::i;770:180::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;-1:-1:-1;921:23:420;;770:180;-1:-1:-1;770:180:420:o;1163:173::-;1231:20;;-1:-1:-1;;;;;1280:31:420;;1270:42;;1260:70;;1326:1;1323;1316:12;1341:254;1409:6;1417;1470:2;1458:9;1449:7;1445:23;1441:32;1438:52;;;1486:1;1483;1476:12;1438:52;1509:29;1528:9;1509:29;:::i;:::-;1499:39;1585:2;1570:18;;;;1557:32;;-1:-1:-1;;;1341:254:420:o;1782:328::-;1859:6;1867;1875;1928:2;1916:9;1907:7;1903:23;1899:32;1896:52;;;1944:1;1941;1934:12;1896:52;1967:29;1986:9;1967:29;:::i;:::-;1957:39;;2015:38;2049:2;2038:9;2034:18;2015:38;:::i;:::-;2005:48;;2100:2;2089:9;2085:18;2072:32;2062:42;;1782:328;;;;;:::o;2115:186::-;2174:6;2227:2;2215:9;2206:7;2202:23;2198:32;2195:52;;;2243:1;2240;2233:12;2195:52;2266:29;2285:9;2266:29;:::i;2306:347::-;2371:6;2379;2432:2;2420:9;2411:7;2407:23;2403:32;2400:52;;;2448:1;2445;2438:12;2400:52;2471:29;2490:9;2471:29;:::i;:::-;2461:39;;2550:2;2539:9;2535:18;2522:32;2597:5;2590:13;2583:21;2576:5;2573:32;2563:60;;2619:1;2616;2609:12;2563:60;2642:5;2632:15;;;2306:347;;;;;:::o;2658:127::-;2719:10;2714:3;2710:20;2707:1;2700:31;2750:4;2747:1;2740:15;2774:4;2771:1;2764:15;2790:631;2854:5;2884:18;2925:2;2917:6;2914:14;2911:40;;;2931:18;;:::i;:::-;3006:2;3000:9;2974:2;3060:15;;-1:-1:-1;;3056:24:420;;;3082:2;3052:33;3048:42;3036:55;;;3106:18;;;3126:22;;;3103:46;3100:72;;;3152:18;;:::i;:::-;3192:10;3188:2;3181:22;3221:6;3212:15;;3251:6;3243;3236:22;3291:3;3282:6;3277:3;3273:16;3270:25;3267:45;;;3308:1;3305;3298:12;3267:45;3358:6;3353:3;3346:4;3338:6;3334:17;3321:44;3413:1;3406:4;3397:6;3389;3385:19;3381:30;3374:41;;;;2790:631;;;;;:::o;3426:666::-;3521:6;3529;3537;3545;3598:3;3586:9;3577:7;3573:23;3569:33;3566:53;;;3615:1;3612;3605:12;3566:53;3638:29;3657:9;3638:29;:::i;:::-;3628:39;;3686:38;3720:2;3709:9;3705:18;3686:38;:::i;:::-;3676:48;;3771:2;3760:9;3756:18;3743:32;3733:42;;3826:2;3815:9;3811:18;3798:32;3853:18;3845:6;3842:30;3839:50;;;3885:1;3882;3875:12;3839:50;3908:22;;3961:4;3953:13;;3949:27;-1:-1:-1;3939:55:420;;3990:1;3987;3980:12;3939:55;4013:73;4078:7;4073:2;4060:16;4055:2;4051;4047:11;4013:73;:::i;:::-;4003:83;;;3426:666;;;;;;;:::o;4097:221::-;4140:5;4193:3;4186:4;4178:6;4174:17;4170:27;4160:55;;4211:1;4208;4201:12;4160:55;4233:79;4308:3;4299:6;4286:20;4279:4;4271:6;4267:17;4233:79;:::i;4323:543::-;4411:6;4419;4472:2;4460:9;4451:7;4447:23;4443:32;4440:52;;;4488:1;4485;4478:12;4440:52;4528:9;4515:23;4557:18;4598:2;4590:6;4587:14;4584:34;;;4614:1;4611;4604:12;4584:34;4637:50;4679:7;4670:6;4659:9;4655:22;4637:50;:::i;:::-;4627:60;;4740:2;4729:9;4725:18;4712:32;4696:48;;4769:2;4759:8;4756:16;4753:36;;;4785:1;4782;4775:12;4753:36;;4808:52;4852:7;4841:8;4830:9;4826:24;4808:52;:::i;:::-;4798:62;;;4323:543;;;;;:::o;4871:260::-;4939:6;4947;5000:2;4988:9;4979:7;4975:23;4971:32;4968:52;;;5016:1;5013;5006:12;4968:52;5039:29;5058:9;5039:29;:::i;:::-;5029:39;;5087:38;5121:2;5110:9;5106:18;5087:38;:::i;:::-;5077:48;;4871:260;;;;;:::o;5328:380::-;5407:1;5403:12;;;;5450;;;5471:61;;5525:4;5517:6;5513:17;5503:27;;5471:61;5578:2;5570:6;5567:14;5547:18;5544:38;5541:161;;5624:10;5619:3;5615:20;5612:1;5605:31;5659:4;5656:1;5649:15;5687:4;5684:1;5677:15;5541:161;;5328:380;;;:::o;5713:496::-;5892:3;5930:6;5924:13;5946:66;6005:6;6000:3;5993:4;5985:6;5981:17;5946:66;:::i;:::-;6075:13;;6034:16;;;;6097:70;6075:13;6034:16;6144:4;6132:17;;6097:70;:::i;:::-;6183:20;;5713:496;-1:-1:-1;;;;5713:496:420:o;6214:489::-;-1:-1:-1;;;;;6483:15:420;;;6465:34;;6535:15;;6530:2;6515:18;;6508:43;6582:2;6567:18;;6560:34;;;6630:3;6625:2;6610:18;;6603:31;;;6408:4;;6651:46;;6677:19;;6669:6;6651:46;:::i;:::-;6643:54;6214:489;-1:-1:-1;;;;;;6214:489:420:o;6708:290::-;6777:6;6830:2;6818:9;6809:7;6805:23;6801:32;6798:52;;;6846:1;6843;6836:12;6798:52;6872:16;;-1:-1:-1;;;;;;6917:32:420;;6907:43;;6897:71;;6964:1;6961;6954:12;7129:545;7231:2;7226:3;7223:11;7220:448;;;7267:1;7292:5;7288:2;7281:17;7337:4;7333:2;7323:19;7407:2;7395:10;7391:19;7388:1;7384:27;7378:4;7374:38;7443:4;7431:10;7428:20;7425:47;;;-1:-1:-1;7466:4:420;7425:47;7521:2;7516:3;7512:12;7509:1;7505:20;7499:4;7495:31;7485:41;;7576:82;7594:2;7587:5;7584:13;7576:82;;;7639:17;;;7620:1;7609:13;7576:82;;7850:1352;7976:3;7970:10;8003:18;7995:6;7992:30;7989:56;;;8025:18;;:::i;:::-;8054:97;8144:6;8104:38;8136:4;8130:11;8104:38;:::i;:::-;8098:4;8054:97;:::i;:::-;8206:4;;8270:2;8259:14;;8287:1;8282:663;;;;8989:1;9006:6;9003:89;;;-1:-1:-1;9058:19:420;;;9052:26;9003:89;-1:-1:-1;;7807:1:420;7803:11;;;7799:24;7795:29;7785:40;7831:1;7827:11;;;7782:57;9105:81;;8252:944;;8282:663;7076:1;7069:14;;;7113:4;7100:18;;-1:-1:-1;;8318:20:420;;;8436:236;8450:7;8447:1;8444:14;8436:236;;;8539:19;;;8533:26;8518:42;;8631:27;;;;8599:1;8587:14;;;;8466:19;;8436:236;;;8440:3;8700:6;8691:7;8688:19;8685:201;;;8761:19;;;8755:26;-1:-1:-1;;8844:1:420;8840:14;;;8856:3;8836:24;8832:37;8828:42;8813:58;8798:74;;8685:201;-1:-1:-1;;;;;8932:1:420;8916:14;;;8912:22;8899:36;;-1:-1:-1;7850:1352:420:o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly '__ERC721A_init(string,string)': "d2f01f19";
        readonly 'approve(address,uint256)': "095ea7b3";
        readonly 'balanceOf(address)': "70a08231";
        readonly 'burn(uint256)': "42966c68";
        readonly 'getApproved(uint256)': "081812fc";
        readonly 'isApprovedForAll(address,address)': "e985e9c5";
        readonly 'mint(address,uint256)': "40c10f19";
        readonly 'mintTo(address)': "755edd17";
        readonly 'name()': "06fdde03";
        readonly 'ownerOf(uint256)': "6352211e";
        readonly 'safeTransferFrom(address,address,uint256)': "42842e0e";
        readonly 'safeTransferFrom(address,address,uint256,bytes)': "b88d4fde";
        readonly 'setApprovalForAll(address,bool)': "a22cb465";
        readonly 'symbol()': "95d89b41";
        readonly 'tokenURI(uint256)': "c87b56dd";
        readonly 'totalSupply()': "18160ddd";
        readonly 'transferFrom(address,address,uint256)': "23b872dd";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initializable_InInitializingState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initializable_NotInInitializingState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Introspection_AlreadySupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Introspection_NotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"InterfaceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"InterfaceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"__ERC721A_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"InterfaceAdded(bytes4)\":{\"notice\":\"Emitted when an interface is added to the contract via `_addInterface`.\"},\"InterfaceRemoved(bytes4)\":{\"notice\":\"Emitted when an interface is removed from the contract via `_removeInterface`.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/MockERC721A.sol\":\"MockERC721A\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/math/=lib/prb-math/src/\",\":@prb/test/=lib/prb-test/src/\",\":ERC721A/=lib/ERC721A/contracts/\",\":base64-sol/=lib/base64/\",\":base64/=lib/base64/\",\":council/=lib/council/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":@openzeppelin/contracts-upgradeable/=lib/@openzeppelin/contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":operator-filter-registry/=lib/operator-filter-registry/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\"]},\"sources\":{\"contracts/src/diamond/facets/Facet.sol\":{\"keccak256\":\"0x8213b85d1271bc3c2aa9842979c8ad825066c4c9addc55296d53b6747e5198ba\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b4e88e869c99e65f0caeb9d03938e78c578a869783b9f20c05f4ba52e7ca493d\",\"dweb:/ipfs/QmRqPmg8BYD1V6Cd8kfihCQ7nn2DAsgRjGW2MJvc7Evnjt\"]},\"contracts/src/diamond/facets/initializable/Initializable.sol\":{\"keccak256\":\"0x2a4f3a99b3b3ac6c2c18431cea80b40774c1d8265ddefac21b26da561e069096\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36dbba730942b1fd345f242051ea7f33e979f70392fbd929d8522c0c9c6dd367\",\"dweb:/ipfs/QmYMvYnvg9zQJpDQX9yMHZ1AET9Vx7UXtDenXAs1JhfPpd\"]},\"contracts/src/diamond/facets/initializable/InitializableStorage.sol\":{\"keccak256\":\"0x99dfe047dbb8df48a7490f63939420dd990fb5fd3b3a03c42d0cb9c6f4f9eefa\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5e8f6d4bff257324e4544cacadd9fee42bada459f457fb707fef90bcfe0e895a\",\"dweb:/ipfs/QmYWEam5VcMt5ViNMKRkaxoD84MK2MewS5iWwSES589Vma\"]},\"contracts/src/diamond/facets/introspection/IERC165.sol\":{\"keccak256\":\"0xa1dfa0449031fced106dd105c184823595398c876be53b4bb8d855937a435816\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://e98a9007bca24776e4580c9326cfbb72ffe56334229626c336545be8c2c6e6d2\",\"dweb:/ipfs/QmdqoQTUoDKqirUR3hscy4zBh4Kn2E1fRta1y9DfA43urV\"]},\"contracts/src/diamond/facets/introspection/IntrospectionBase.sol\":{\"keccak256\":\"0xbdc803a2179838316625692285c4b720cdbae1c78e5f9a68560719c909253d00\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://776a4490b22b01b554770d71afde7bed4c32ea639a08c84a194076eddf5517be\",\"dweb:/ipfs/QmcPVR9T7vXccCg7RXQ4wXtHaBG6ugrEXk8qnhRpsYMVd6\"]},\"contracts/src/diamond/facets/introspection/IntrospectionStorage.sol\":{\"keccak256\":\"0xd2ec3bbe4d15f9232006b41e0a80a5127006243ee596754af77bd3926045782a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8c47e18bfd34a687ce9ec75dc1f1fa5bca088e97e59aad2ac3fdb0989d06d7e6\",\"dweb:/ipfs/QmdktQXV7PKABzh43SZqemdTG25RxMaMsgpXTTUvZUxmfU\"]},\"contracts/src/diamond/facets/token/ERC721A/ERC721A.sol\":{\"keccak256\":\"0x321ea4cd6a2617d12cdf6bcd84095072de32ecfddfa95df83e58711c4684e325\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://95b09721ac18cc7d34859486008989238dfc9ff9bbafb300ce7a3b2ecfb201a1\",\"dweb:/ipfs/Qmcdzd3hLsafxVkDTYs2japBR5UpmeJ7VYWrNFbSf1kboX\"]},\"contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol\":{\"keccak256\":\"0x1e0f21db21117ca705182e671aca5f24d157ca9003268450582d3f49eb2b8ece\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4348c9408175707af61dd9d5d0eda909066c14eb35e1fc88604b9d58eed0d667\",\"dweb:/ipfs/QmUk514VMTYx1skNfooNs5q53x7SoxonHuEYpsDSwvoyEG\"]},\"contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol\":{\"keccak256\":\"0xd6940108c888555331b972b7ea5d4842ddeb7c222feab4565c166c12f85900ba\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ecbc54202867c7b11e57ca2cbcbe33aa5701ea1593a70bfa82a0ccc358682767\",\"dweb:/ipfs/QmScG3JBtGEoDgxipmP8EbAgZxZF9F8aWaZ9gYBqqBweNH\"]},\"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol\":{\"keccak256\":\"0x1473085ffec67f1e059e56baa36be6d3379f7b876147cd62b9854cea8f52cce9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6b3bd85f29ed8e16ad5622e40966c92b58baf988880da4a676142957462ded06\",\"dweb:/ipfs/QmSkGb7ByX4DTvNPh6egoSAs71b7w1NHoYfPUPT9LdtJY9\"]},\"contracts/test/mocks/MockERC721A.sol\":{\"keccak256\":\"0x187cb0c2de1fe600b579a26a4abc6bd43dfa4bfd1e60e2294ebdd6583c2c57ce\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0558aa9bc5372b89a348a6946a6df919d6eeacfe518831314a0cca2a0ab9d85c\",\"dweb:/ipfs/QmWZYXqMcES3otNBZdsB6kDJwucNSsQBFgJKDoDNJGqaxh\"]},\"lib/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"lib/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "ApprovalCallerNotOwnerNorApproved";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "ApprovalQueryForNonexistentToken";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "BalanceQueryForZeroAddress";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "Initializable_InInitializingState";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "Initializable_NotInInitializingState";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "Introspection_AlreadySupported";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "Introspection_NotSupported";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "MintERC2309QuantityExceedsLimit";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "MintToZeroAddress";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "MintZeroQuantity";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "OwnerQueryForNonexistentToken";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "OwnershipNotInitializedForExtraData";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "TransferCallerNotOwnerNorApproved";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "TransferFromIncorrectOwner";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "TransferToNonERC721ReceiverImplementer";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "TransferToZeroAddress";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "URIQueryForNonexistentToken";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "address";
                    readonly name: "approved";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                    readonly indexed: true;
                }];
                readonly type: "event";
                readonly name: "Approval";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "address";
                    readonly name: "operator";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "bool";
                    readonly name: "approved";
                    readonly type: "bool";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "ApprovalForAll";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "fromTokenId";
                    readonly type: "uint256";
                    readonly indexed: true;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "toTokenId";
                    readonly type: "uint256";
                    readonly indexed: false;
                }, {
                    readonly internalType: "address";
                    readonly name: "from";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                    readonly indexed: true;
                }];
                readonly type: "event";
                readonly name: "ConsecutiveTransfer";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "version";
                    readonly type: "uint32";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "Initialized";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes4";
                    readonly name: "interfaceId";
                    readonly type: "bytes4";
                    readonly indexed: true;
                }];
                readonly type: "event";
                readonly name: "InterfaceAdded";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes4";
                    readonly name: "interfaceId";
                    readonly type: "bytes4";
                    readonly indexed: true;
                }];
                readonly type: "event";
                readonly name: "InterfaceRemoved";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "from";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                    readonly indexed: true;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                    readonly indexed: true;
                }];
                readonly type: "event";
                readonly name: "Transfer";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "name_";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "symbol_";
                    readonly type: "string";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "__ERC721A_init";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "payable";
                readonly type: "function";
                readonly name: "approve";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "balanceOf";
                readonly outputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "token";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "burn";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getApproved";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "operator";
                    readonly type: "address";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "isApprovedForAll";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "";
                    readonly type: "bool";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "mint";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "mintTo";
                readonly outputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "name";
                readonly outputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "ownerOf";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "from";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "payable";
                readonly type: "function";
                readonly name: "safeTransferFrom";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "from";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "_data";
                    readonly type: "bytes";
                }];
                readonly stateMutability: "payable";
                readonly type: "function";
                readonly name: "safeTransferFrom";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "operator";
                    readonly type: "address";
                }, {
                    readonly internalType: "bool";
                    readonly name: "approved";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "setApprovalForAll";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "symbol";
                readonly outputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "tokenURI";
                readonly outputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "totalSupply";
                readonly outputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "from";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "payable";
                readonly type: "function";
                readonly name: "transferFrom";
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {
                    readonly 'approve(address,uint256)': {
                        readonly details: "Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator.";
                    };
                    readonly 'balanceOf(address)': {
                        readonly details: "Returns the number of tokens in `owner`'s account.";
                    };
                    readonly 'getApproved(uint256)': {
                        readonly details: "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.";
                    };
                    readonly 'isApprovedForAll(address,address)': {
                        readonly details: "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.";
                    };
                    readonly 'name()': {
                        readonly details: "Returns the token collection name.";
                    };
                    readonly 'ownerOf(uint256)': {
                        readonly details: "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.";
                    };
                    readonly 'safeTransferFrom(address,address,uint256)': {
                        readonly details: "Equivalent to `safeTransferFrom(from, to, tokenId, '')`.";
                    };
                    readonly 'safeTransferFrom(address,address,uint256,bytes)': {
                        readonly details: "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.";
                    };
                    readonly 'setApprovalForAll(address,bool)': {
                        readonly details: "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.";
                    };
                    readonly 'symbol()': {
                        readonly details: "Returns the token collection symbol.";
                    };
                    readonly 'tokenURI(uint256)': {
                        readonly details: "Returns the Uniform Resource Identifier (URI) for `tokenId` token.";
                    };
                    readonly 'totalSupply()': {
                        readonly details: "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.";
                    };
                    readonly 'transferFrom(address,address,uint256)': {
                        readonly details: "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.";
                    };
                };
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {};
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly [":@openzeppelin/=lib/openzeppelin-contracts/", ":@prb/math/=lib/prb-math/src/", ":@prb/test/=lib/prb-test/src/", ":ERC721A/=lib/ERC721A/contracts/", ":base64-sol/=lib/base64/", ":base64/=lib/base64/", ":council/=lib/council/contracts/", ":ds-test/=lib/ds-test/src/", ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/", ":forge-std/=lib/forge-std/src/", ":@openzeppelin/contracts-upgradeable/=lib/@openzeppelin/contracts-upgradeable/contracts/", ":openzeppelin-contracts/=lib/openzeppelin-contracts/", ":operator-filter-registry/=lib/operator-filter-registry/", ":prb-math/=lib/prb-math/src/", ":prb-test/=lib/prb-test/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "none";
                readonly appendCBOR: false;
            };
            readonly compilationTarget: {
                readonly 'contracts/test/mocks/MockERC721A.sol': "MockERC721A";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly 'contracts/src/diamond/facets/Facet.sol': {
                readonly keccak256: "0x8213b85d1271bc3c2aa9842979c8ad825066c4c9addc55296d53b6747e5198ba";
                readonly urls: readonly ["bzz-raw://b4e88e869c99e65f0caeb9d03938e78c578a869783b9f20c05f4ba52e7ca493d", "dweb:/ipfs/QmRqPmg8BYD1V6Cd8kfihCQ7nn2DAsgRjGW2MJvc7Evnjt"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/initializable/Initializable.sol': {
                readonly keccak256: "0x2a4f3a99b3b3ac6c2c18431cea80b40774c1d8265ddefac21b26da561e069096";
                readonly urls: readonly ["bzz-raw://36dbba730942b1fd345f242051ea7f33e979f70392fbd929d8522c0c9c6dd367", "dweb:/ipfs/QmYMvYnvg9zQJpDQX9yMHZ1AET9Vx7UXtDenXAs1JhfPpd"];
                readonly license: "MIT";
            };
            readonly 'contracts/src/diamond/facets/initializable/InitializableStorage.sol': {
                readonly keccak256: "0x99dfe047dbb8df48a7490f63939420dd990fb5fd3b3a03c42d0cb9c6f4f9eefa";
                readonly urls: readonly ["bzz-raw://5e8f6d4bff257324e4544cacadd9fee42bada459f457fb707fef90bcfe0e895a", "dweb:/ipfs/QmYWEam5VcMt5ViNMKRkaxoD84MK2MewS5iWwSES589Vma"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/introspection/IERC165.sol': {
                readonly keccak256: "0xa1dfa0449031fced106dd105c184823595398c876be53b4bb8d855937a435816";
                readonly urls: readonly ["bzz-raw://e98a9007bca24776e4580c9326cfbb72ffe56334229626c336545be8c2c6e6d2", "dweb:/ipfs/QmdqoQTUoDKqirUR3hscy4zBh4Kn2E1fRta1y9DfA43urV"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/introspection/IntrospectionBase.sol': {
                readonly keccak256: "0xbdc803a2179838316625692285c4b720cdbae1c78e5f9a68560719c909253d00";
                readonly urls: readonly ["bzz-raw://776a4490b22b01b554770d71afde7bed4c32ea639a08c84a194076eddf5517be", "dweb:/ipfs/QmcPVR9T7vXccCg7RXQ4wXtHaBG6ugrEXk8qnhRpsYMVd6"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/introspection/IntrospectionStorage.sol': {
                readonly keccak256: "0xd2ec3bbe4d15f9232006b41e0a80a5127006243ee596754af77bd3926045782a";
                readonly urls: readonly ["bzz-raw://8c47e18bfd34a687ce9ec75dc1f1fa5bca088e97e59aad2ac3fdb0989d06d7e6", "dweb:/ipfs/QmdktQXV7PKABzh43SZqemdTG25RxMaMsgpXTTUvZUxmfU"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/token/ERC721A/ERC721A.sol': {
                readonly keccak256: "0x321ea4cd6a2617d12cdf6bcd84095072de32ecfddfa95df83e58711c4684e325";
                readonly urls: readonly ["bzz-raw://95b09721ac18cc7d34859486008989238dfc9ff9bbafb300ce7a3b2ecfb201a1", "dweb:/ipfs/Qmcdzd3hLsafxVkDTYs2japBR5UpmeJ7VYWrNFbSf1kboX"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol': {
                readonly keccak256: "0x1e0f21db21117ca705182e671aca5f24d157ca9003268450582d3f49eb2b8ece";
                readonly urls: readonly ["bzz-raw://4348c9408175707af61dd9d5d0eda909066c14eb35e1fc88604b9d58eed0d667", "dweb:/ipfs/QmUk514VMTYx1skNfooNs5q53x7SoxonHuEYpsDSwvoyEG"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol': {
                readonly keccak256: "0xd6940108c888555331b972b7ea5d4842ddeb7c222feab4565c166c12f85900ba";
                readonly urls: readonly ["bzz-raw://ecbc54202867c7b11e57ca2cbcbe33aa5701ea1593a70bfa82a0ccc358682767", "dweb:/ipfs/QmScG3JBtGEoDgxipmP8EbAgZxZF9F8aWaZ9gYBqqBweNH"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/src/diamond/facets/token/ERC721A/IERC721A.sol': {
                readonly keccak256: "0x1473085ffec67f1e059e56baa36be6d3379f7b876147cd62b9854cea8f52cce9";
                readonly urls: readonly ["bzz-raw://6b3bd85f29ed8e16ad5622e40966c92b58baf988880da4a676142957462ded06", "dweb:/ipfs/QmSkGb7ByX4DTvNPh6egoSAs71b7w1NHoYfPUPT9LdtJY9"];
                readonly license: "Apache-2.0";
            };
            readonly 'contracts/test/mocks/MockERC721A.sol': {
                readonly keccak256: "0x187cb0c2de1fe600b579a26a4abc6bd43dfa4bfd1e60e2294ebdd6583c2c57ce";
                readonly urls: readonly ["bzz-raw://0558aa9bc5372b89a348a6946a6df919d6eeacfe518831314a0cca2a0ab9d85c", "dweb:/ipfs/QmWZYXqMcES3otNBZdsB6kDJwucNSsQBFgJKDoDNJGqaxh"];
                readonly license: "Apache-2.0";
            };
            readonly 'lib/@openzeppelin/contracts/utils/Address.sol': {
                readonly keccak256: "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1";
                readonly urls: readonly ["bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269", "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"];
                readonly license: "MIT";
            };
            readonly 'lib/@openzeppelin/contracts/utils/introspection/IERC165.sol': {
                readonly keccak256: "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1";
                readonly urls: readonly ["bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f", "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"];
                readonly license: "MIT";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "contracts/test/mocks/MockERC721A.sol";
        readonly id: 44954;
        readonly exportedSymbols: {
            readonly ERC721A: readonly [13245];
            readonly MockERC721A: readonly [44953];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:452:261";
        readonly nodes: readonly [{
            readonly id: 44907;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:24:261";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "^", "0.8", ".20"];
        }, {
            readonly id: 44909;
            readonly nodeType: "ImportDirective";
            readonly src: "107:79:261";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol";
            readonly file: "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 44954;
            readonly sourceUnit: 13246;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 44908;
                    readonly name: "ERC721A";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 13245;
                    readonly src: "115:7:261";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 44953;
            readonly nodeType: "ContractDefinition";
            readonly src: "188:302:261";
            readonly nodes: readonly [{
                readonly id: 44929;
                readonly nodeType: "FunctionDefinition";
                readonly src: "224:116:261";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 44928;
                    readonly nodeType: "Block";
                    readonly src: "287:53:261";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 44921;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 44918;
                                readonly name: "tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 44916;
                                readonly src: "293:7:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 44919;
                                    readonly name: "_nextTokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 13424;
                                    readonly src: "303:12:261";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_view$__$returns$_t_uint256_$";
                                        readonly typeString: "function () view returns (uint256)";
                                    };
                                };
                                readonly id: 44920;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "303:14:261";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "293:24:261";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 44922;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "293:24:261";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 44924;
                                readonly name: "to";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 44913;
                                readonly src: "329:2:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 44925;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "333:1:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                }];
                                readonly id: 44923;
                                readonly name: "_mint";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 14039;
                                readonly src: "323:5:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256)";
                                };
                            };
                            readonly id: 44926;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "323:12:261";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 44927;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "323:12:261";
                    }];
                };
                readonly functionSelector: "755edd17";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "mintTo";
                readonly nameLocation: "233:6:261";
                readonly parameters: {
                    readonly id: 44914;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 44913;
                        readonly mutability: "mutable";
                        readonly name: "to";
                        readonly nameLocation: "248:2:261";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 44929;
                        readonly src: "240:10:261";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 44912;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "240:7:261";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "239:12:261";
                };
                readonly returnParameters: {
                    readonly id: 44917;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 44916;
                        readonly mutability: "mutable";
                        readonly name: "tokenId";
                        readonly nameLocation: "278:7:261";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 44929;
                        readonly src: "270:15:261";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 44915;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "270:7:261";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "269:17:261";
                };
                readonly scope: 44953;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 44942;
                readonly nodeType: "FunctionDefinition";
                readonly src: "344:79:261";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 44941;
                    readonly nodeType: "Block";
                    readonly src: "395:28:261";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 44937;
                                readonly name: "to";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 44931;
                                readonly src: "407:2:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly id: 44938;
                                readonly name: "amount";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 44933;
                                readonly src: "411:6:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly id: 44936;
                                readonly name: "_mint";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 14039;
                                readonly src: "401:5:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256)";
                                };
                            };
                            readonly id: 44939;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "401:17:261";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 44940;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "401:17:261";
                    }];
                };
                readonly functionSelector: "40c10f19";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "mint";
                readonly nameLocation: "353:4:261";
                readonly parameters: {
                    readonly id: 44934;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 44931;
                        readonly mutability: "mutable";
                        readonly name: "to";
                        readonly nameLocation: "366:2:261";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 44942;
                        readonly src: "358:10:261";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 44930;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "358:7:261";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 44933;
                        readonly mutability: "mutable";
                        readonly name: "amount";
                        readonly nameLocation: "378:6:261";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 44942;
                        readonly src: "370:14:261";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 44932;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "370:7:261";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "357:28:261";
                };
                readonly returnParameters: {
                    readonly id: 44935;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "395:0:261";
                };
                readonly scope: 44953;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 44952;
                readonly nodeType: "FunctionDefinition";
                readonly src: "427:61:261";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 44951;
                    readonly nodeType: "Block";
                    readonly src: "465:23:261";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 44948;
                                readonly name: "token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 44944;
                                readonly src: "477:5:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly id: 44947;
                                readonly name: "_burn";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [14390, 14564];
                                readonly referencedDeclaration: 14390;
                                readonly src: "471:5:261";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256)";
                                };
                            };
                            readonly id: 44949;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "471:12:261";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 44950;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "471:12:261";
                    }];
                };
                readonly functionSelector: "42966c68";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "burn";
                readonly nameLocation: "436:4:261";
                readonly parameters: {
                    readonly id: 44945;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 44944;
                        readonly mutability: "mutable";
                        readonly name: "token";
                        readonly nameLocation: "449:5:261";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 44952;
                        readonly src: "441:13:261";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 44943;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "441:7:261";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "440:15:261";
                };
                readonly returnParameters: {
                    readonly id: 44946;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "465:0:261";
                };
                readonly scope: 44953;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 44910;
                    readonly name: "ERC721A";
                    readonly nameLocations: readonly ["212:7:261"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 13245;
                    readonly src: "212:7:261";
                };
                readonly id: 44911;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "212:7:261";
            }];
            readonly canonicalName: "MockERC721A";
            readonly contractDependencies: readonly [];
            readonly contractKind: "contract";
            readonly fullyImplemented: true;
            readonly linearizedBaseContracts: readonly [44953, 13245, 7509, 10861, 10751, 10709, 14682, 14951, 14839];
            readonly name: "MockERC721A";
            readonly nameLocation: "197:11:261";
            readonly scope: 44954;
            readonly usedErrors: readonly [10489, 10491, 10738, 10740, 14764, 14767, 14770, 14773, 14776, 14779, 14782, 14785, 14788, 14791, 14794, 14797, 14800];
            readonly usedEvents: readonly [10495, 10745, 10750, 14809, 14818, 14827, 14838];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 261;
};
export default MockERC721A;
//# sourceMappingURL=MockERC721A.d.ts.map
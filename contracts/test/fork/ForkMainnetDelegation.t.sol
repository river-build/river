// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

// utils
import {TestUtils} from "contracts/test/utils/TestUtils.sol";

//interfaces

//libraries

//contracts
import {MockMessenger} from "contracts/test/mocks/MockMessenger.sol";
import {MainnetDelegation} from "contracts/src/tokens/river/base/delegation/MainnetDelegation.sol";

// Base
contract ForkMainnetDelegationTest is TestUtils {
  address baseRegistry = 0x7c0422b31401C936172C897802CF0373B35B7698;

  MainnetDelegation internal mainnetDelegation;

  function setUp() external onlyForked {
    mainnetDelegation = MainnetDelegation(baseRegistry);
  }

  function test_setBatchAuthorizedClaimers() external onlyForked {
    address getMessenger = mainnetDelegation.getMessenger();
    address getProxyDelegation = mainnetDelegation.getProxyDelegation();

    MockMessenger mockMessenger = new MockMessenger();
    vm.etch(getMessenger, address(mockMessenger).code);
    MockMessenger(getMessenger).setXDomainMessageSender(getProxyDelegation);

    vm.prank(address(getMessenger));
    (bool success, ) = baseRegistry.call{gas: 400_000}(
      // solhint-disable-next-line max-line-length
      hex"14851778000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000097511657558e83b984ae32db30a27769dd155f20000000000000000000000000eb59ff9ff1384ec05f3dfbee403d6640635d19bb000000000000000000000000a8a2b42d64790482162147b0e47d57c11f41976e000000000000000000000000ec0452cae6c43c7af2ed165a44f18f1ad75388b8000000000000000000000000df4a7de1a4b5f7e0e01316e4e3f09653444484050000000000000000000000001ec5003b52f7ac7392956776444307e74ad19e6400000000000000000000000038a2adfdd8f0bfc4f6004a03f798f41df84f04010000000000000000000000003d667e7a235214f211f2d51c289501f149f428d90000000000000000000000003541f646d321cacbc0ff4a7cccb583e8b6e413da000000000000000000000000b9e517c8674c3c4c6e94b9113e8dd98534f7a517000000000000000000000000a1a9c122600ef52631c50823eaa32758c4c2d92b000000000000000000000000c45ac8c7395dfcdedeadd3dea4afca442119a28800000000000000000000000052a1d509a0e1d120a6c045065d656e453e37938a000000000000000000000000204f1aa5b666d0eac07228d3065a461e92ac399c000000000000000000000000e78d26186e99d3924fb25391f1a502cfa3be0dc100000000000000000000000032238ccd889cd9f36ce43d3ab825b0992ec576e80000000000000000000000000003365f4a91810edcfe965d013d32c3d166612a0000000000000000000000008902ee3f7bc8f06d9237db8107dde43b58d674780000000000000000000000003681bb20997c4936e449458c3c530bd26dd48a24000000000000000000000000ab6e786fce27f2f56dbd06d2be7feabe4523d2cf0000000000000000000000007f6d6ffc257e4f770bd4aceecc7fd0a76f4aad33000000000000000000000000843810ba6921585cc9e35b675c75365fd6f309f6000000000000000000000000fee2bca124152b68855142096b5f240e8da45265000000000000000000000000001f9a81abd173ed42fa5d3f0ab40c64b31afd65000000000000000000000000e870da5592018ffe51f0d3539f0f62707cf8eb3d000000000000000000000000c969453bb4d2e0997921c1e76cc288603db70cb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a28c8d49957f757dc9eb3df461f0c416f97a2b000000000000000000000000006314664483fb84462b91e8fafc59942fc53e729e000000000000000000000000f0d0bd97ee80a97cb2fd2a9e070e0b93913e8c
    );

    // Check the result
    require(success, "Call failed");
  }
}

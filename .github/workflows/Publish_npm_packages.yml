name: Nightly npm package publish

on:
    schedule:
        - cron: '0 0 * * *' # Runs every night at midnight
    push:
        branches:
            - 'jt/*' # for testing only, remove this line
    workflow_dispatch: # Allows manual triggering

jobs:
    publish-npm:
        runs-on: ubuntu-latest

        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.12.1
              with:
                  access_token: ${{ github.token }}

            - name: Checkout code
              uses: actions/checkout@v4

            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'yarn'
            - name: Install node dependencies
              run: yarn install --immutable

            - name: Authenticate to npm
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

            - name: Check npm login
              run: |
                  npm whoami || (echo "Not logged in to npm registry" && exit 1)

            - name: Run Nightly Script
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  function parse_git_branch() {
                      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
                  }

                  function make_pr_description() {
                      git log origin/main..HEAD
                  }

                  if [[ "$(git status --porcelain)" != "" ]]; then
                      echo "There are uncommitted changes. Please commit or stash them before running this script."
                      exit 1
                  elif [[ "$(parse_git_branch)" != "main" ]]; then
                      echo "You must be on the main branch to run this script."
                      exit 1
                  fi

                  DATE=$(date +%Y-%m-%d)
                  COMMIT_HASH=$(git rev-parse --short HEAD)
                  BRANCH_NAME="release-sdk/${COMMIT_HASH}"
                  PR_TITLE="Release SDK ${COMMIT_HASH}"

                  git checkout -b "${BRANCH_NAME}"

                  DATE=$(date +%Y-%m-%d)
                  COMMIT_HASH=$(git rev-parse --short HEAD)
                  VERSION_PREFIX="${DATE}-${COMMIT_HASH}"

                  ./scripts/yarn-clean.sh
                  yarn install
                  if [ $? -ne 0 ]; then
                      echo "yarn install failed."
                      exit 1
                  fi

                  yarn build
                  if [ $? -ne 0 ]; then
                      echo "yarn build failed."
                      exit 1
                  fi

                  git push -u origin "${BRANCH_NAME}"

                  # Get the new patch version from Lerna
                  npx lerna version patch --yes --no-private --force-publish --tag-version-prefix "${VERSION_PREFIX}-"

                  PR_DESCRIPTION="$(make_pr_description)"

                  while true; do
                      WAIT_TIME=5
                      while true; do
                      OUTPUT=$(gh pr checks "${BRANCH_NAME}" 2>&1)
                      if [[ "$OUTPUT" == *"no checks reported on the '${BRANCH_NAME}' branch"* ]]; then
                          echo "Checks for '${BRANCH_NAME}' haven't started yet. Waiting for $WAIT_TIME seconds..."
                          sleep $WAIT_TIME
                      else
                          break
                      fi
                      done


                      gh pr checks "${BRANCH_NAME}" --fail-fast --interval 2 --watch
                      exit_status=$?

                      # Check if the command succeeded or failed
                      if [ $exit_status -ne 0 ]; then
                          echo "Failure detected in PR checks."
                          if [[ $USER_MODE -eq 1 ]]; then
                              read -p "Harmony CI is failing. Restart CI. (any key to retry/q) " -n 1 -r
                              echo ""
                              if [[ $REPLY =~ ^[Qq]$ ]]; then
                                  echo "Pull request creation aborted."
                                  exit $exit_status
                              fi
                          else
                              exit $exit_status
                          fi
                      else 
                          echo "All checks passed."
                          break
                      fi
                  done

                  # Merge the pull request
                  gh pr merge "${BRANCH_NAME}" --squash --delete-branch

                  exit_status=$?
                  if [ $exit_status -ne 0 ]; then
                      play_failure_sound
                      echo "Failed to merge pull request."
                      exit $exit_status
                  fi

                  # Pull the changes to local main
                  git pull --rebase

                  npx lerna publish from-package --yes --no-private --force-publish --dist-tag nightly

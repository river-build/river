syntax = "proto3";
package river;
option go_package = "github.com/towns-protocol/towns/core/node/protocol";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


/** 
* Miniblock contains a list of events and the header event.
* Events must be in the same order as in the header, which is of type MiniblockHeader.
* Only signed data (Envelopes) should exist in this data structure.
*/
message Miniblock {
    repeated Envelope events = 1;
    Envelope header = 2;
}

/**
 * Envelope contains serialized event, and its hash and signature.
 * hash is used as event id. Subsequent events reference this event by hash.
 * event is a serialized StreamEvent
 */
message Envelope {
    /**
     * Hash of event.
     * While hash can be recalculated from the event, having it here explicitly
     * makes it easier to work with event.
     * For the event to be valid, must match hash of event field. 
     */
    bytes hash = 1;

    /**
     * Signature.
     * For the event to be valid, signature must match event.creator_address
     * or be signed by the address from evant.delegate_sig.
     */
    bytes signature = 2;

    bytes event = 3;
}

/**
* StreamEvent is a single event in the stream.
*/
message StreamEvent {
    /**
     * Address of the creator of the event.
     * For user - address of the user's wallet.
     * For server - address of the server's keypair in staking smart contract.
     *
     * For the event to be valid:
     * If delegate_sig is present, creator_address must match delegate_sig.
     * If delegate_sig is not present, creator_address must match event signature in the Envelope.
     */
    bytes creator_address = 1;

     /**
      * delegate_sig allows event to be signed by a delegate keypair 
      *
      * delegate_sig constains signature of the 
      * public key of the delegate keypair + the delegate_expiry_epoch_ms.
      * User's wallet is used to produce this signature.
      * 
      * If present, for the event to be valid:
      * 1. creator_address must match delegate_sig's signer public key
      * 2. delegate_sig should be signed as an Ethereum Signed Message (eip-191)
      *
      * Server nodes sign node-produced events with their own keypair and do not
      * need to use delegate_sig.
      */
    bytes delegate_sig = 2;
 
    /** Salt ensures that similar messages are not hashed to the same value. genId() from id.ts may be used. */
    bytes salt = 3;
 
    /** Hash of a preceding miniblock. Null for the inception event. Must be a recent miniblock */
    optional bytes prev_miniblock_hash = 4;
 
    /** CreatedAt is the time when the event was created.
    NOTE: this value is set by clients and is not reliable for anything other than displaying
    the value to the user. Never use this value to sort events from different users.  */
    int64 created_at_epoch_ms = 5;
    
    /** DelegateExpiry is the time when the delegate signature expires. */
    int64 delegate_expiry_epoch_ms = 6;

    /** Tags are optional, used for external systems to deliver notifications. */
    Tags tags = 7;

    /** prev_miniblock_num contains miniblock number for prev_miniblock_hash. */
    int64 prev_miniblock_num = 8;

    /** Variable-type payload. 
      * Payloads should obey the following rules:
      * - payloads should have their own unique type
      * - each payload should have a oneof content field
      * - each payload, with the exception of miniblock header and member payloads
      *     should have an inception field inside the content oneof
      * - each payload should have a unique Inception type
      * - payloads can't violate previous type recursively to inception payload
    */
    oneof payload {
        MiniblockHeader miniblock_header = 100;
        MemberPayload member_payload = 101;
        SpacePayload space_payload = 102;
        ChannelPayload channel_payload = 103;
        UserPayload user_payload = 104;
        UserSettingsPayload user_settings_payload = 105;
        UserMetadataPayload user_metadata_payload = 106;
        UserInboxPayload user_inbox_payload = 107;
        MediaPayload media_payload = 108;
        DmChannelPayload dm_channel_payload = 109;
        GdmChannelPayload gdm_channel_payload = 110;
    }
}

/** 
* MiniblockHeader is a special event that forms a block from set of the stream events.
* Hash of the serialized StreamEvent containing MiniblockHeader is used as a block hash.
*/
message MiniblockHeader {
    // Miniblock number.
    // 0 for genesis block.
    // Must be 1 greater than the previous block number.
    int64 miniblock_num = 1;

    // Hash of the previous block.
    bytes prev_miniblock_hash = 2;

    // Timestamp of the block.
    // Must be greater than the previous block timestamp.
    google.protobuf.Timestamp timestamp = 3;

    // Hashes of the events included in the block.
    repeated bytes event_hashes = 4;

    // Snapshot of the state at the end of the block.
    optional Snapshot snapshot = 5;

    // count of all events in the stream before this block
    int64 event_num_offset = 6;

    // pointer to block with previous snapshot
    int64 prev_snapshot_miniblock_num = 7;

    // stream payloads are required to have a content field
    oneof content {
        google.protobuf.Empty none = 100;
    }
}

/**
* MemberPayload
* can appear in any stream
*/
message MemberPayload {
    message Snapshot {
        // contains the current MLS group state
        message Mls {
            message Member {
                repeated bytes signature_public_keys = 1;
            }
            bytes external_group_snapshot = 1;
            bytes group_info_message = 2;
            // user_address -> Member
            map<string, Member> members = 3;
            map<uint64, bytes> epoch_secrets = 4;
            map<string, KeyPackage> pending_key_packages = 5;
            repeated bytes commits_since_last_snapshot = 6;
            map<string, int64> welcome_messages_miniblock_num = 7;
        }

        message Member {
            bytes user_address = 1;
            int64 miniblock_num = 2;
            int64 event_num = 3;
            repeated KeySolicitation solicitations = 4;
            WrappedEncryptedData username = 5;
            WrappedEncryptedData display_name = 6;
            bytes ens_address = 7;
            Nft nft = 8;
        }
        
        repeated Member joined = 1;
        repeated SnappedPin pins = 2;
        Mls mls = 3;
        EncryptionAlgorithm encryption_algorithm = 4;
        // tips sent in this stream: map<currency, amount>
        map<string, uint64> tips = 5;
    }

    message KeyPackage {
        bytes user_address = 1;
        bytes signature_public_key = 2;
        bytes key_package = 3;
    }

    message Membership {
        MembershipOp op = 1;
        bytes user_address = 2;
        bytes initiator_address = 3;
        optional bytes stream_parent_id = 4;
    }
    
    message KeySolicitation {
        string device_key = 1; // requesters device_key
        string fallback_key = 2; // requesters fallback_key
        bool is_new_device = 3; // true if this is a new device, session_ids will be empty
        repeated string session_ids = 4; 
    }

    message KeyFulfillment {
        bytes user_address = 1;
        string device_key = 2;
        repeated string session_ids = 3; 
    }

    message Nft {
        int32 chain_id = 1;
        bytes contract_address = 2;
        bytes token_id = 3;
    }

    message SnappedPin {
        bytes creator_address = 1;
        Pin pin = 2;
    }

    message Pin { 
        bytes event_id = 1;
        StreamEvent event = 2;
    }

    message Unpin {
        bytes event_id = 1;
    }

    message Mls {
        message InitializeGroup {
            bytes group_info_message = 1;
            bytes external_group_snapshot = 2;
            bytes signature_public_key = 3;
        }

        message ExternalJoin {
            bytes signature_public_key = 1;
            bytes commit = 2;
            bytes group_info_message = 3;
        }

        message EpochSecrets {
            message EpochSecret {
                bytes secret = 1;
                uint64 epoch = 2;
            }
            repeated EpochSecret secrets = 1;
        }

        message WelcomeMessage {
            repeated bytes signature_public_keys = 1;
            repeated bytes welcome_messages = 2;
            bytes commit = 3;
            bytes group_info_message = 4;
        }

        oneof content {
            InitializeGroup initialize_group = 1;
            ExternalJoin external_join = 2;
            EpochSecrets epoch_secrets = 3;
            KeyPackage key_package = 4;
            WelcomeMessage welcome_message = 5;
        }
    }

    message EncryptionAlgorithm {
        optional string algorithm = 1;
    }

    message MemberBlockchainTransaction {
        BlockchainTransaction transaction = 1;
        bytes from_user_address = 2;
    }

    oneof content {
        Membership membership = 1;
        KeySolicitation key_solicitation = 2;
        KeyFulfillment key_fulfillment = 3;
        EncryptedData username = 4;
        EncryptedData display_name = 5;
        bytes ens_address = 6;
        Nft nft = 7;
        Pin pin = 8;
        Unpin unpin = 9;
        Mls mls = 10;
        MemberBlockchainTransaction member_blockchain_transaction = 11;
        EncryptionAlgorithm encryption_algorithm = 12;
    }
}

/**
* SpacePayload
*/
message SpacePayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // channels: sorted by channel_id
        repeated ChannelMetadata channels = 2;
        SnappedSpaceImage space_image = 3;
    }

    message SnappedSpaceImage {
        bytes creator_address = 1;
        EncryptedData data = 2;
    }
    
    message Inception {
        bytes stream_id = 1;
        StreamSettings settings = 2;
    }

    message ChannelSettings {
        bool autojoin = 1;
        bool hide_user_join_leave_events = 2;
    }

    message ChannelMetadata {
        reserved 4, 5;
        ChannelOp op = 1;
        bytes channel_id = 2;
        EventRef origin_event = 3;
        int64 updated_at_event_num = 6;
        ChannelSettings settings = 7;
    }

    message ChannelUpdate {
        reserved 4, 5;
        ChannelOp op = 1;
        bytes channel_id = 2;
        EventRef origin_event = 3;
        ChannelSettings settings = 6;
    }

    message UpdateChannelAutojoin {
        bytes channel_id = 1;
        bool autojoin = 2;
    }

    message UpdateChannelHideUserJoinLeaveEvents {
        bytes channel_id = 1;
        bool hide_user_join_leave_events = 2;
    }

    oneof content {
        Inception inception = 1;
        ChannelUpdate channel = 2;
        EncryptedData space_image = 3;
        UpdateChannelAutojoin update_channel_autojoin = 4;
        UpdateChannelHideUserJoinLeaveEvents update_channel_hide_user_join_leave_events = 5;
    }
}

/** 
* ChannelPayload
*/
message ChannelPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
    }
    
    message Inception {
        reserved 4, 6;
        bytes stream_id = 1;
        bytes space_id = 3;
        StreamSettings settings = 5;
        SpacePayload.ChannelSettings channel_settings = 7;
    }

    message Redaction {
        bytes event_id = 1;
    }

    oneof content {
        Inception inception = 1;
        EncryptedData message = 2;
        Redaction redaction = 3;
    }
}

/**
* DmChannelPayload
*/
message DmChannelPayload {
    message Snapshot {
        Inception inception = 1;
    }

    message Inception {
        bytes stream_id = 1;
        bytes first_party_address = 2;
        bytes second_party_address = 3;
        StreamSettings settings = 4;
    }

    oneof content {
        Inception inception = 1;
        EncryptedData message = 3;
    }
}

/**
* GdmChannelPayload
*/
message GdmChannelPayload {
    message Snapshot {
        Inception inception = 1;
        WrappedEncryptedData channel_properties = 2;
    }

    message Inception {
        bytes stream_id = 1;
        EncryptedData channel_properties = 2;
        StreamSettings settings = 3;
    }

    oneof content {
        Inception inception = 1;
        EncryptedData message = 2;
        EncryptedData channel_properties = 3;
    }
}

/**
* UserPayload
*/
message UserPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // memberships, sorted by stream_id
        repeated UserMembership memberships = 2;
        // tips sent by this user: map<currency, amount>
        map<string, uint64> tips_sent = 3;
        // tips received by this user: map<currency, amount>
        map<string, uint64> tips_received = 4;
    }

    message Inception {
        bytes stream_id = 1;
        StreamSettings settings = 2;
    }
    
    // update own membership
    message UserMembership {
        bytes stream_id = 1;
        MembershipOp op = 2;
        optional bytes inviter = 3;
        optional bytes stream_parent_id = 4;
    }

    // update someone else's membership
    message UserMembershipAction {
        bytes stream_id = 1;
        bytes user_id = 2; 
        MembershipOp op = 3;
        optional bytes stream_parent_id = 4;
    }

    // derived event, only send from nodes
    message ReceivedBlockchainTransaction {
        BlockchainTransaction transaction = 1;
        bytes from_user_address = 2;
    }

    oneof content {
        Inception inception = 1;
        UserMembership user_membership = 2;
        UserMembershipAction user_membership_action = 3;
        BlockchainTransaction blockchain_transaction = 4; // added by user
        ReceivedBlockchainTransaction received_blockchain_transaction = 5; // added by nodes
    }
}

/**
* UserInboxPayload
* messages to a user encrypted per deviceId
*/
message UserInboxPayload {
    message Snapshot {
        message DeviceSummary {
            /**
            * UpperBound = latest to device event sent from other client per deviceKey
            * LowerBound = latest ack sent by stream owner per deviceKey
            * on ack, if UpperBound <= LowerBound then delete this deviceKey entry from the record
            * on ack or new session, if any device’s lower bound < N generations ago, delete the deviceKey entry from the record
            */
            int64 lower_bound = 1;
            int64 upper_bound = 2;
        }

        Inception inception = 1;
        // deviceKey: miniblockNum that the ack was snapshotted
        map<string, DeviceSummary> device_summary = 2;
    }

    message Inception {
        bytes stream_id = 1;
        StreamSettings settings = 2;
    }

    message GroupEncryptionSessions {
        bytes stream_id = 1;
        string sender_key = 2;
        repeated string session_ids = 3;
        // deviceKey: per device ciphertext of encrypted session keys that match session_ids 
        map<string, string> ciphertexts = 4;
        string algorithm = 5;
    }

    message Ack {
        string device_key = 1;
        int64 miniblock_num = 2;
    }

    oneof content {
        Inception inception = 1;
        Ack ack = 2;
        GroupEncryptionSessions group_encryption_sessions = 3;
        
    }
}

/**
* UserSettingsPayload
*/
message UserSettingsPayload {
    message Snapshot {
         // for a specific blocked user, there might be multiple block or unblock events
        message UserBlocks {
            message Block {
                bool is_blocked = 1;
                int64 event_num = 2;
            }
            bytes user_id = 1;
            repeated Block blocks = 2;
        
        }
        // inception
        Inception inception = 1;
        // fullyReadMarkers: sorted by stream_id
        repeated FullyReadMarkers fully_read_markers = 2;
        repeated UserBlocks user_blocks_list = 3;
    }

    message Inception {
        bytes stream_id = 1;
        StreamSettings settings = 2;
    }

    message MarkerContent {
        string data = 1;
    }

    message FullyReadMarkers {
        bytes stream_id = 1;
        MarkerContent content = 2;
    }

    message UserBlock {
        bytes user_id = 1;
        bool is_blocked = 2;
        int64 event_num = 3;
    }

    oneof content {
        Inception inception = 1;
        FullyReadMarkers fully_read_markers = 2;
        UserBlock user_block = 3;
    }
}

/**
* UserMetadataPayload
*/
message UserMetadataPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // device keys for this user, unique by device_key, capped at N, most recent last
        repeated EncryptionDevice encryption_devices = 2;
        // user profile image
        WrappedEncryptedData profile_image = 3;
        // user bio
        WrappedEncryptedData bio = 4;
    }

    message Inception {
        bytes stream_id = 1;
        StreamSettings settings = 2;
    }

    message EncryptionDevice {
        string device_key = 1;
        string fallback_key = 2;
    }

    oneof content {
        Inception inception = 1;
        EncryptionDevice encryption_device = 2;
        EncryptedData profile_image = 3;
        EncryptedData bio = 4;
    }
}

/**
* MediaPayload
*/
message MediaPayload {
    message Snapshot {
        Inception inception = 1;
    }
    
    message Inception {
        bytes stream_id = 1;
        optional bytes channel_id = 2;
        int32 chunk_count = 3;
        StreamSettings settings = 4;
        optional bytes space_id = 5;
        optional bytes user_id = 6;
    }

    message Chunk {
        bytes data = 1;
        int32 chunk_index = 2;
    }

    oneof content {
        Inception inception = 1;
        Chunk chunk = 2;
    }
}

/**
* Snapshot contains a summary of all state events up to the most recent miniblock
*/
message Snapshot {
    
    MemberPayload.Snapshot members = 1;
    int32 snapshot_version = 2;
    
    // Snapshot data specific for each stream type.
    oneof content {
        SpacePayload.Snapshot space_content = 101;
        ChannelPayload.Snapshot channel_content = 102;
        UserPayload.Snapshot user_content = 103;
        UserSettingsPayload.Snapshot user_settings_content = 104;
        UserMetadataPayload.Snapshot user_metadata_content = 105;
        MediaPayload.Snapshot media_content = 106;
        DmChannelPayload.Snapshot dm_channel_content = 107;
        GdmChannelPayload.Snapshot gdm_channel_content = 108;
        UserInboxPayload.Snapshot user_inbox_content = 109;
    }
}

message BlockchainTransaction {
    // metadata for tip transactions
    message Tip {
        message Event {
            uint64 token_id = 1;
            bytes currency = 2;
            bytes sender = 3; // wallet that sent funds
            bytes receiver = 4; // wallet that received funds
            uint64 amount = 5;
            bytes message_id = 6;
            bytes channel_id = 7;
        }
        Event event = 1; // event emitted by the tipping facet
        bytes toUserAddress = 2; // user that received funds
    }
    // required fields
    BlockchainTransactionReceipt receipt = 1;
    // optional metadata to be verified by the node
    oneof content {
        Tip tip = 101;
    }
}

/** blockchain transaction receipt */
message BlockchainTransactionReceipt {
    message Log {
        bytes address = 1;
        repeated bytes topics = 2;
        bytes data = 3;
    }
    uint64 chain_id = 1;
    bytes transaction_hash = 2;
    uint64 block_number = 3;
    bytes to = 4;
    bytes from = 5;
    repeated Log logs = 6;
}

/**
 * Derived event is produces by server when there should be additional event to compliment
 * received event. For example, when user joins a space through event in the space stream, server will produce a derived event
 * in a user stream to indicate that user joined a particual space.
 *
 * EventRef is used to reference the event that caused the derived event to be produced.
 */
message EventRef {
    bytes stream_id = 1;
    bytes hash = 2;
    bytes signature = 3;
}

/**
 * StreamSettings is a part of inception payload for each stream type.
 */
message StreamSettings {
    // Test setting for testing with manual miniblock creation through Info debug request. 
    bool disable_miniblock_creation = 1;
}

/**
 * EncryptedData
 */
message EncryptedData {
    /**
     * Encrypted payload when algorithm is set to mls_0.0.1
     */
     message Mls {
        uint64 epoch = 1;
        bytes ciphertext = 2;
      }
    /**
    * Ciphertext of the encryption envelope.
    */
    string ciphertext = 1;
    /**
    * Encryption algorithm  used to encrypt this event.
    */
    string algorithm = 2;
    /**
    * Sender device public key identifying the sender's device.
    */
    string sender_key = 3;
    /**
    * The ID of the session used to encrypt the message in some protocols, 
    * deprecated in favor of session_id_bytes.
    */
    string session_id = 4;

    /**
    * Optional checksum of the cleartext data.
    */
    optional string checksum = 5;

    /**
    * Optional reference to parent event ID
    */
    optional string ref_event_id = 6;

    /**
     * Encrypted payload when algorithm is set to mls_0.0.1
     */
    optional Mls mls = 7;

    // Used if algorithm is set to 'grpaes'
    bytes ciphertext_bytes = 8;

    // Used if algorithm is set to 'grpaes'
    bytes iv_bytes = 9;

    // Used if algorithm is set to 'grpaes'
    bytes session_id_bytes = 10;

    // used to parse data after it's decrypted
    EncryptedDataVersion version = 11; 
}

message WrappedEncryptedData {
    EncryptedData data = 1;
    int64 event_num = 2;
    bytes event_hash = 3;
}

message SyncCookie  {
    bytes node_address = 1;
    bytes stream_id = 2;
    int64 minipool_gen = 3;
    int64 minipool_slot = 4;
    bytes prev_miniblock_hash = 5;
}

message StreamAndCookie {
    repeated Envelope events = 1;
    SyncCookie next_sync_cookie = 2;
    // if non-empty, contains all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
    repeated Miniblock miniblocks = 3;
    bool sync_reset = 4;
}

message GetStreamExRequest {
    bytes stream_id = 1;
}

message Minipool {
    repeated Envelope events = 1;
}

message Tags {
    MessageInteractionType message_interaction_type = 1;
    repeated GroupMentionType group_mention_types = 2;
    repeated bytes mentioned_user_addresses = 3;
    repeated bytes participating_user_addresses = 4;
    optional bytes thread_id = 5;
}

// GetStreamExResponse is a stream of raw data that represents the current state of the requested stream.
// These responses represent streams that are not expected to change once finalized, and have a optimized code path
// for retrieval. Response may potentially be very large, and are streamed back to the client. The client is expected
// to martial the raw data back into protobuf messages.
message GetStreamExResponse {
    oneof data {
        Miniblock miniblock = 1;
        Minipool minipool = 2;
    }
}

message CreateStreamRequest {
    repeated Envelope events = 1;
    bytes stream_id = 2; // stream_id should match the stream_id in the inception payload of the first event
    map<string, bytes> metadata = 3;
 }

message CreateStreamResponse {
    // all events in current minipool and cookie allowing to sync from the end of the stream
    StreamAndCookie stream = 1;
    // derived events created in other streams when this stream was created
    repeated EventRef derived_events = 2;
}

message GetStreamRequest {
    bytes stream_id = 1;
    // if optional is true and stream doesn't exist, response will be a nil stream instead of ERROR NOT_FOUND
    bool optional = 2;
}

message GetStreamResponse {
    // all events in current minipool and cookie allowing to sync from the end of the stream
    StreamAndCookie stream = 1;
}

message GetMiniblocksRequest {
    bytes stream_id = 1;
    int64 fromInclusive = 2;
    int64 toExclusive = 3;
}

message GetMiniblocksResponse {
    repeated Miniblock miniblocks = 1;
    // terminus: true if there are no more blocks to fetch because they've been garbage collected, or you've reached block 0
    bool terminus = 2;
    int64 from_inclusive = 3;
    int64 limit = 4;
}

message GetLastMiniblockHashRequest {
    bytes stream_id = 1;
}

message GetLastMiniblockHashResponse {
    bytes hash = 1;
    int64 miniblock_num = 2;
}

message AddEventRequest {
    bytes stream_id = 1;
    Envelope event = 2;
    bool optional = 3; // if true, response will contain non nil error if event didn't pass validation
}

message AddEventResponse {
    message Error {
        Err code = 1;
        string msg = 2;
        repeated string funcs = 3;
    }
    // error thrown during this request, only set if AddEventRequest.optional is true, otherwise the request will fail with this error
    Error error = 1; 
    // all events created during this request including parent events
    repeated EventRef new_events = 2;
}

// SyncStreamsRequest is a request to start a streams sync session.
message SyncStreamsRequest {
    // sync_pos is the list of streams and positions in those streams to receive updates from.
    repeated SyncCookie sync_pos = 1;
}

// SyncStreamsResponse is a stream of updates that the client receives for streams it subscribed to within a streams
// sync session.
message SyncStreamsResponse {
    // sync_id is the id of the sync session.
    string sync_id = 1;
    // sync_op marks the type of update.
    SyncOp sync_op = 2;
    // stream indicates an update of a stream.
    // only set when sync_op = SYNC_UPDATE
    StreamAndCookie stream = 3;
    // pong_nonce is returned after a ping request was made to the sync session through PingSync.
    // Set with the ping value from the PingSync request when sync_op = SYNC_PONG
    string pong_nonce = 4;
    // stream_id is set when sync_op = SYNC_DOWN and indicates it will not receive updates anymore for this stream.
    // If the client is still is interested in updates for this stream it must re-add the stream to the sync session.
    bytes stream_id = 5;
}

// AddStreamToSyncRequest is a request to add a stream to an existing streams sync session.
message AddStreamToSyncRequest {
    // sync_id is the id of the sync session.
    string sync_id = 1;
    // sync_pos identifies the stream and position in the stream to receive updates from.
    SyncCookie sync_pos = 2;
}

message AddStreamToSyncResponse {}

// RemoveStreamFromSyncRequest stops the client to receive updates from this stream in the sync session.
// Note that due to buffering in the stream it is possible still receives several updates for this stream after it was
// removed.
message RemoveStreamFromSyncRequest {
    string sync_id = 1;
    bytes stream_id = 2;
}

message RemoveStreamFromSyncResponse {}

// ModifySyncRequest adds or removes streams from an existing sync session.
message ModifySyncRequest {
  // sync_id is the id of the sync session.
  string sync_id = 1;
  // add_streams contains the stream cookies for streams to add to the stream sync session.
  repeated SyncCookie add_streams = 2;
  // remove_streams contains the stream id's to remove from the sync session.
  repeated bytes remove_streams = 3;
}

// SyncStreamOpStatus contains details why adding or removing a stream to/from a sync session failed.
message SyncStreamOpStatus {
  // stream_id that failed to add/remove to/from the sync session.
  bytes stream_id = 1;
  // code represents the error code
  int32 code = 2;
  // message describing what happened
  string message = 3;
}

// ModifySyncResponse contains the details of a stream sync modification request.
message ModifySyncResponse {
  // List with streams that failed to add to the sync operation.
  repeated SyncStreamOpStatus adds = 1;
  // List with streams that failed to be removed from the sync operation.
  repeated SyncStreamOpStatus removals = 2;
}

// CancelSyncRequest cancels the sync session.
message CancelSyncRequest {
    // sync_id is the unique id of the sync session.
    string sync_id = 1;
}

message CancelSyncResponse {}

// PingSyncRequest is a request to receive a pong in the sync session stream.
message PingSyncRequest {
    // sync_id is the unique id of the sync session.
    string sync_id = 1;
    // nonce is the pong to return in the sync session stream.
    string nonce = 2;
}

message PingSyncResponse {}

message InfoRequest {
    repeated string debug = 1;
}

message InfoResponse {
    string graffiti = 1;
    google.protobuf.Timestamp start_time = 2;
    string version = 3;
}

message GetMiniblockHeaderRequest {
    bytes stream_id = 1;
    int64 miniblock_num = 2;
}

message GetMiniblockHeaderResponse {
    Envelope header = 1;
}

service StreamService {
    rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse);
    rpc GetStream(GetStreamRequest) returns (GetStreamResponse);
    rpc GetStreamEx(GetStreamExRequest) returns (stream GetStreamExResponse);
    rpc GetMiniblocks(GetMiniblocksRequest) returns (GetMiniblocksResponse);
    rpc GetLastMiniblockHash(GetLastMiniblockHashRequest) returns (GetLastMiniblockHashResponse);
    rpc GetMiniblockHeader(GetMiniblockHeaderRequest) returns (GetMiniblockHeaderResponse);
    rpc AddEvent(AddEventRequest) returns (AddEventResponse);
    rpc SyncStreams(SyncStreamsRequest) returns (stream SyncStreamsResponse);
    rpc AddStreamToSync(AddStreamToSyncRequest) returns (AddStreamToSyncResponse);
    // ModifySync adds/removes streams to/from an in progress sync session.
    // The client must check ModifySyncResponse to determine which streams failed to add/remove.
    //
    // Note that it is possible for the client to receive stream updates for streams that are added
    // or stops receiving stream updates for streams that are removed before this calls returns.
    rpc ModifySync(ModifySyncRequest) returns (ModifySyncResponse);
    rpc CancelSync(CancelSyncRequest) returns (CancelSyncResponse);
    rpc RemoveStreamFromSync(RemoveStreamFromSyncRequest) returns (RemoveStreamFromSyncResponse);
    rpc Info(InfoRequest) returns (InfoResponse);
    rpc PingSync(PingSyncRequest) returns (PingSyncResponse);
}

enum SyncOp {
    SYNC_UNSPECIFIED = 0;
    SYNC_NEW = 1; // new sync
    SYNC_CLOSE = 2; // close the sync
    SYNC_UPDATE = 3; // update from server
    SYNC_PONG = 4; // respond to the ping message from the client.
    SYNC_DOWN = 5; // indication that stream updates could (temporarily) not be provided
}

enum MembershipOp {
    SO_UNSPECIFIED = 0;
    SO_INVITE = 1;
    SO_JOIN = 2;
    SO_LEAVE = 3;
}

enum ChannelOp {
    CO_UNSPECIFIED = 0;
    CO_CREATED = 1;
    CO_DELETED = 2;
    CO_UPDATED = 4;
}

enum MessageInteractionType {
    MESSAGE_INTERACTION_TYPE_UNSPECIFIED = 0;
    MESSAGE_INTERACTION_TYPE_REPLY = 1;
    MESSAGE_INTERACTION_TYPE_REACTION = 2;
    MESSAGE_INTERACTION_TYPE_POST = 3;
    MESSAGE_INTERACTION_TYPE_EDIT = 4;
    MESSAGE_INTERACTION_TYPE_REDACTION = 5;
    MESSAGE_INTERACTION_TYPE_TIP = 6;
}

enum GroupMentionType {
    GROUP_MENTION_TYPE_UNSPECIFIED = 0;
    GROUP_MENTION_TYPE_AT_CHANNEL = 1;
}

enum EncryptedDataVersion {
    ENCRYPTED_DATA_VERSION_0 = 0;
    ENCRYPTED_DATA_VERSION_1 = 1;
}

// Codes from 1 to 16 match gRPC/Connect codes.
enum Err {
    ERR_UNSPECIFIED = 0;

    // Canceled indicates that the operation was canceled, typically by the
	// caller.
    CANCELED = 1;

	// Unknown indicates that the operation failed for an unknown reason.
	UNKNOWN = 2;

	// InvalidArgument indicates that client supplied an invalid argument.
	INVALID_ARGUMENT  = 3;

	// DeadlineExceeded indicates that deadline expired before the operation
	// could complete.
	DEADLINE_EXCEEDED  = 4;

	// NotFound indicates that some requested entity (for example, a file or
	// directory) was not found.
	NOT_FOUND  = 5;

	// AlreadyExists indicates that client attempted to create an entity (for
	// example, a file or directory) that already exists.
	ALREADY_EXISTS  = 6;

	// PermissionDenied indicates that the caller doesn't have permission to
	// execute the specified operation.
	PERMISSION_DENIED  = 7;

	// ResourceExhausted indicates that some resource has been exhausted. For
	// example, a per-user quota may be exhausted or the entire file system may
	// be full.
	RESOURCE_EXHAUSTED  = 8;

	// FailedPrecondition indicates that the system is not in a state
	// required for the operation's execution.
	FAILED_PRECONDITION  = 9;

	// Aborted indicates that operation was aborted by the system, usually
	// because of a concurrency issue such as a sequencer check failure or
	// transaction abort.
	ABORTED  = 10;

	// OutOfRange indicates that the operation was attempted past the valid
	// range (for example, seeking past end-of-file).
	OUT_OF_RANGE = 11;

	// Unimplemented indicates that the operation isn't implemented,
	// supported, or enabled in this service.
	UNIMPLEMENTED = 12;

	// Internal indicates that some invariants expected by the underlying
	// system have been broken. This code is reserved for serious errors.
	INTERNAL = 13;

	// Unavailable indicates that the service is currently unavailable. This
	// is usually temporary, so clients can back off and retry idempotent
	// operations.
	UNAVAILABLE = 14;

	// DataLoss indicates that the operation has resulted in unrecoverable
	// data loss or corruption.
	DATA_LOSS = 15;

	// Unauthenticated indicates that the request does not have valid
	// authentication credentials for the operation.
	UNAUTHENTICATED = 16;

    DEBUG_ERROR = 17;
    BAD_STREAM_ID = 18;
    BAD_STREAM_CREATION_PARAMS = 19;
    INTERNAL_ERROR_SWITCH = 20;
    BAD_EVENT_ID = 21;
    BAD_EVENT_SIGNATURE = 22;
    BAD_HASH_FORMAT = 23;
    BAD_PREV_MINIBLOCK_HASH = 24;
    NO_EVENT_SPECIFIED = 25;
    BAD_EVENT = 26;
    USER_CANT_POST = 27;
    STREAM_BAD_HASHES = 28;
    STREAM_EMPTY = 29;
    STREAM_BAD_EVENT = 30;
    BAD_DELEGATE_SIG = 31;
    BAD_PUBLIC_KEY = 32;
    BAD_PAYLOAD = 33;
    BAD_HEX_STRING = 34;
    BAD_EVENT_HASH = 35;
    BAD_SYNC_COOKIE = 36;
    DUPLICATE_EVENT = 37;
    BAD_BLOCK = 38;
    STREAM_NO_INCEPTION_EVENT = 39;
    BAD_BLOCK_NUMBER = 40;
    BAD_MINIPOOL_SLOT = 41;
    BAD_CREATOR_ADDRESS = 42;
    STALE_DELEGATE = 43;
    BAD_LINK_WALLET_BAD_SIGNATURE = 44;
    BAD_ROOT_KEY_ID = 45;
    UNKNOWN_NODE = 46;
    DB_OPERATION_FAILURE = 47;
    MINIBLOCKS_STORAGE_FAILURE = 48;
    BAD_ADDRESS = 49;
    BUFFER_FULL = 50;
    BAD_CONFIG = 51;
    BAD_CONTRACT = 52;
    CANNOT_CONNECT = 53;
    CANNOT_GET_LINKED_WALLETS = 54;
    CANNOT_CHECK_ENTITLEMENTS = 55;
    CANNOT_CALL_CONTRACT = 56;
    SPACE_DISABLED = 57;
    CHANNEL_DISABLED = 58;
    WRONG_STREAM_TYPE = 59;
    MINIPOOL_MISSING_EVENTS = 60;
    STREAM_LAST_BLOCK_MISMATCH = 61;
    DOWNSTREAM_NETWORK_ERROR = 62;

    // Stream replica on the local node does not have miniblock with given number yet.
    // This is a temporary state and the node will have the miniblock at a later point in time.
    // The client should retry with an increasing delay, starting at 100ms.
    MINIBLOCK_TOO_NEW = 63;

    // Stream replica on the local node already has a miniblock with the requested
    // proposal number.
    MINIBLOCK_TOO_OLD = 64;

    // Quorum failed to be reached for write operation.
    QUORUM_FAILED = 65;
}

syntax = "proto3";
package river;
option go_package = "github.com/river-build/river/core/node/protocol";

import "protocol.proto";

message MiniblockProposal {
    repeated bytes hashes = 1;
    int64 new_miniblock_num = 2;
    bytes prev_miniblock_hash = 3;
    bool should_snapshot = 4;
}

message AllocateStreamRequest {
    Miniblock miniblock = 1;
    bytes stream_id = 2; // stream_id should match the stream_id in the inception payload of the first event
}

message AllocateStreamResponse {
    SyncCookie sync_cookie = 1;
}

message NewEventReceivedRequest {
    bytes stream_id = 1;
    Envelope event = 2;

    // event.hash signed by node private key.
    bytes node_sig = 3;
}

message NewEventReceivedResponse {
}

message NewEventInPoolRequest {
    bytes hash = 1;
}

message NewEventInPoolResponse {
}

message ProposeMiniblockRequest {
    bytes stream_id = 1;
    bool debug_force_snapshot = 2;
}

message ProposeMiniblockResponse {
    MiniblockProposal proposal = 1;
}

message SaveMiniblockCandidateRequest {
    bytes stream_id = 1;
    Miniblock miniblock = 2;
}

message SaveMiniblockCandidateResponse {
}

message GetMiniblocksByIdsRequest {
    bytes stream_id = 1;
    repeated int64 miniblock_ids = 2;
}

message GetMiniblockResponse {
    Miniblock miniblock = 1;
    int64 num = 2;
}

/*
  * Ephemeral stream related messages
 */

message AllocateEphemeralStreamRequest {
    Miniblock miniblock = 1;
    bytes stream_id = 2; // stream_id should match the stream_id in the inception payload of the first event
}

message AllocateEphemeralStreamResponse {
}

message SaveEphemeralMiniblockRequest {
    bytes stream_id = 1;
    Miniblock miniblock = 2;
}

message SaveEphemeralMiniblockResponse {
}

message SealEphemeralStreamRequest {
    bytes stream_id = 1;
}

message SealEphemeralStreamResponse {
}

// NodeToNode is the service that network nodes are using to communicate with each other.
service NodeToNode {
    rpc AllocateStream(AllocateStreamRequest) returns (AllocateStreamResponse);
    rpc NewEventReceived(NewEventReceivedRequest) returns (NewEventReceivedResponse);
    rpc NewEventInPool(NewEventInPoolRequest) returns (NewEventInPoolResponse);
    rpc ProposeMiniblock(ProposeMiniblockRequest) returns (ProposeMiniblockResponse); 
    rpc SaveMiniblockCandidate(SaveMiniblockCandidateRequest) returns (SaveMiniblockCandidateResponse);
    rpc GetMiniblocksByIds(GetMiniblocksByIdsRequest) returns (stream GetMiniblockResponse);

    // Endpoints for ephemeral streams
    rpc AllocateEphemeralStream(AllocateEphemeralStreamRequest) returns (AllocateEphemeralStreamResponse);
    rpc SaveEphemeralMiniblock(SaveEphemeralMiniblockRequest) returns (SaveEphemeralMiniblockResponse);
    rpc SealEphemeralStream(SealEphemeralStreamRequest) returns (SealEphemeralStreamResponse);
}


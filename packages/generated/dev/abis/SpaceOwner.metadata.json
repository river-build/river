{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "AlreadyDisabled",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "AlreadyEnabled",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "BalanceQueryForZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ECDSAInvalidSignature",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "length",
            "type": "uint256"
          }
        ],
        "name": "ECDSAInvalidSignatureLength",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "name": "ECDSAInvalidSignatureS",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "GuardianEnabled",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initializable_AlreadyInitialized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_InInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_NotInInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "currentNonce",
            "type": "uint256"
          }
        ],
        "name": "InvalidAccountNonce",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintERC2309QuantityExceedsLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintZeroQuantity",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotExternalAccount",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnerQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnershipNotInitializedForExtraData",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "bits",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "SafeCastOverflowedUintDowncast",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceOwner__OnlyFactoryAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceOwner__OnlySpaceOwnerAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferFromIncorrectOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToNonERC721ReceiverImplementer",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "URIQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidStringLength",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "fromTokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "toTokenId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "name": "ConsecutiveTransfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "delegator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "fromDelegate",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "toDelegate",
            "type": "address"
          }
        ],
        "name": "DelegateChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "delegate",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousBalance",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newBalance",
            "type": "uint256"
          }
        ],
        "name": "DelegateVotesChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "EIP712DomainChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "bool",
            "name": "enabled",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "cooldown",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "GuardianUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "factory",
            "type": "address"
          }
        ],
        "name": "SpaceOwner__SetFactory",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "SpaceOwner__UpdateSpace",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "CLOCK_MODE",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "result",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name_",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol_",
            "type": "string"
          }
        ],
        "name": "__ERC721A_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "version",
            "type": "string"
          }
        ],
        "name": "__SpaceOwner_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "clock",
        "outputs": [
          {
            "internalType": "uint48",
            "name": "",
            "type": "uint48"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          }
        ],
        "name": "delegate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "expiry",
            "type": "uint256"
          },
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "name": "delegateBySig",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "delegates",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "eip712Domain",
        "outputs": [
          {
            "internalType": "bytes1",
            "name": "fields",
            "type": "bytes1"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "version",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "chainId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "verifyingContract",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "salt",
            "type": "bytes32"
          },
          {
            "internalType": "uint256[]",
            "name": "extensions",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "timepoint",
            "type": "uint256"
          }
        ],
        "name": "getPastTotalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "timepoint",
            "type": "uint256"
          }
        ],
        "name": "getPastVotes",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "getSpaceInfo",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "uri",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              }
            ],
            "internalType": "struct ISpaceOwnerBase.Space",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "getVotes",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "mintSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "nextTokenId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "nonces",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "result",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "factory",
            "type": "address"
          }
        ],
        "name": "setFactory",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          }
        ],
        "name": "updateSpaceInfo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "errors": {
        "ECDSAInvalidSignature()": [
          {
            "details": "The signature derives the `address(0)`."
          }
        ],
        "ECDSAInvalidSignatureLength(uint256)": [
          {
            "details": "The signature has an invalid length."
          }
        ],
        "ECDSAInvalidSignatureS(bytes32)": [
          {
            "details": "The signature has an S value that is in the upper half order."
          }
        ],
        "InvalidAccountNonce(address,uint256)": [
          {
            "details": "The nonce used for an `account` is not the expected current nonce."
          }
        ],
        "SafeCastOverflowedUintDowncast(uint8,uint256)": [
          {
            "details": "Value doesn't fit in an uint of `bits` size."
          }
        ]
      },
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "ApprovalForAll(address,address,bool)": {
          "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "ConsecutiveTransfer(uint256,uint256,address,address)": {
          "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
        },
        "DelegateChanged(address,address,address)": {
          "details": "Emitted when an account changes their delegate."
        },
        "DelegateVotesChanged(address,uint256,uint256)": {
          "details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of votes."
        },
        "EIP712DomainChanged()": {
          "details": "MAY be emitted to signal that the domain could have changed."
        },
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
        }
      },
      "kind": "dev",
      "methods": {
        "CLOCK_MODE()": {
          "details": "Description of the clock"
        },
        "approve(address,uint256)": {
          "details": "Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator."
        },
        "balanceOf(address)": {
          "details": "Returns the number of tokens in `owner`'s account."
        },
        "clock()": {
          "details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."
        },
        "delegate(address)": {
          "details": "Delegates votes from the sender to `delegatee`."
        },
        "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
          "details": "Delegates votes from signer to `delegatee`."
        },
        "delegates(address)": {
          "details": "Returns the delegate that `account` has chosen."
        },
        "eip712Domain()": {
          "details": "See {EIP-5267}. _Available since v4.9._"
        },
        "getApproved(uint256)": {
          "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "getPastTotalSupply(uint256)": {
          "details": "Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote."
        },
        "getPastVotes(address,uint256)": {
          "details": "Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block."
        },
        "getSpaceInfo(address)": {
          "params": {
            "space": "The address of the space"
          },
          "returns": {
            "_0": "space The space info"
          }
        },
        "getVotes(address)": {
          "details": "Returns the current amount of votes that `account` has."
        },
        "isApprovedForAll(address,address)": {
          "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
        },
        "mintSpace(string,string,address)": {
          "details": "Only the factory is allowed to mint spaces",
          "params": {
            "name": "The name of the space",
            "space": "The address of the space",
            "uri": "The URI of the space"
          },
          "returns": {
            "tokenId": "The token id of the minted space"
          }
        },
        "name()": {
          "details": "Returns the token collection name."
        },
        "ownerOf(uint256)": {
          "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "setApprovalForAll(address,bool)": {
          "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
        },
        "symbol()": {
          "details": "Returns the token collection symbol."
        },
        "tokenURI(uint256)": {
          "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "totalSupply()": {
          "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
        },
        "updateSpaceInfo(address,string,string)": {
          "details": "Only the space owner is allowed to update the space info",
          "params": {
            "name": "The name of the space",
            "space": "The address of the space",
            "uri": "The URI of the space"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "errors": {
        "ApprovalCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "ApprovalQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "BalanceQueryForZeroAddress()": [
          {
            "notice": "Cannot query the balance for the zero address."
          }
        ],
        "MintERC2309QuantityExceedsLimit()": [
          {
            "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
          }
        ],
        "MintToZeroAddress()": [
          {
            "notice": "Cannot mint to the zero address."
          }
        ],
        "MintZeroQuantity()": [
          {
            "notice": "The quantity of tokens minted must be more than zero."
          }
        ],
        "OwnerQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "OwnershipNotInitializedForExtraData()": [
          {
            "notice": "The `extraData` cannot be set on an unintialized ownership slot."
          }
        ],
        "TransferCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "TransferFromIncorrectOwner()": [
          {
            "notice": "The token must be owned by `from`."
          }
        ],
        "TransferToNonERC721ReceiverImplementer()": [
          {
            "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
          }
        ],
        "TransferToZeroAddress()": [
          {
            "notice": "Cannot transfer to the zero address."
          }
        ],
        "URIQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ]
      },
      "events": {
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        }
      },
      "kind": "user",
      "methods": {
        "getFactory()": {
          "notice": "Get the factory address"
        },
        "getSpaceInfo(address)": {
          "notice": "Get the space info"
        },
        "mintSpace(string,string,address)": {
          "notice": "Mint a space"
        },
        "nextTokenId()": {
          "notice": "Get the next token id that will be used to mint a space"
        },
        "setFactory(address)": {
          "notice": "Set the factory address that is allowed to mint spaces"
        },
        "updateSpaceInfo(address,string,string)": {
          "notice": "Update the space info"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/spaces/facets/owner/SpaceOwner.sol": "SpaceOwner"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/@openzeppelin/",
      ":@prb/math/=lib/@prb/math/src/",
      ":@prb/test/=lib/@prb/test/src/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64/=lib/base64/",
      ":ds-test/=lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat-deploy/=lib/hardhat-deploy/"
    ]
  },
  "sources": {
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0xecbb7e8de0dae5bdbcbda879436335abac6808bcc2e14f1f4e9efbdc77c4e8be",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b7b5446461a1492f16c86137ce49a699d8a3452e2174c5568b97f8d2d4bc85a7",
        "dweb:/ipfs/QmY74odf1qgTwBV3wjF12rV8TXs3DiNoMm9Pg9S8w2F4VP"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/Checkpoints.sol": {
      "keccak256": "0x4b98db2e67e47ec59caa78fade51e9ec6fa33ee2592e46fed09d9167ebe76c8a",
      "license": "MIT",
      "urls": [
        "bzz-raw://72ec6949ee33fb9c137bba362b94af699762fadd66334128d1dd0dbcd4301bc6",
        "dweb:/ipfs/QmQybe6k5K3gss4zzCPqoba6ZBZE5p8KJRoQ2RzkE91JRV"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IERC5805.sol": {
      "keccak256": "0x8b3b84026610f99bcac6139359305a46c537edf377e44771b904c2bd35719ee3",
      "license": "MIT",
      "urls": [
        "bzz-raw://49a8e7af9b47b6bbd794ccb50380b8f9e9b84561d62bcbf16843dde55bab86e6",
        "dweb:/ipfs/QmdBdYxvhwCwtqW9DfPa6Bw5PrYdzhuKQyJv4vcLsttqrV"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IERC6372.sol": {
      "keccak256": "0xc3fa5c25bdd3db6126e04897496889e68a65749b050ae8fede0ff80e322aca86",
      "license": "MIT",
      "urls": [
        "bzz-raw://bcf56ae1474c9a3032f8b15b1bbbeeb50ac21c574047f846673d4aca9bf82db4",
        "dweb:/ipfs/Qmcce1zD6TBWiMLXMDsFF6bUrwtVtharjwvAbtkMmoYRgd"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IVotes.sol": {
      "keccak256": "0xe84a920ea7070bafd35afb05c057801a466ba5d9a0db10be3e31720a1db1f2e6",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://72415e259038afac01a7e76dd74d31243518514e58fe01fd7a6a38f93dd8247b",
        "dweb:/ipfs/QmdS8GkX9Ze4rHp2JQ8Va1DMWHaqxQLCjGD8hVVR5KyMVS"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/Votes.sol": {
      "keccak256": "0x36ca9d8aa95a21f2812aa1f2a3712d4acecd78476d8e50900566cc233a54eefa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0d910d09517696658fe1cb4291fca5f66cc0b7fd4605f2a4ad70f9c7c494206c",
        "dweb:/ipfs/QmVrcYUZPgbxfQkqXkEdnUFJ81XenXt8hbmDvXBnVyTpDS"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/VotesBase.sol": {
      "keccak256": "0x3234078063b2070a77f1b03e1d96e8c5a958450a70373df02cc0bdb51b69ccb8",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6d66c3f430cf100ff52dbc614f6982e405996957b60b8de49f6e59bca7dc566f",
        "dweb:/ipfs/QmRKp88BWBr4Pzf4CnW2wWBkERVLMPEnVeZhxizc8tJXBN"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/VotesStorage.sol": {
      "keccak256": "0x2e1a1db6e37ca9a1552edfd2be03d6069e9858996ea1fe0387dd4f35d58455be",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://723c3880d012108f1f442d89f972de200ef9033f1c3179bfa56054740e028fa6",
        "dweb:/ipfs/QmNxcE6H6Db93XzPepQ2xdPrgZkusCrV9LEq9rPvSPq3UT"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "license": "MIT",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x5dbbdca0faf75680e1c0d425d92bdb5ce16951c0f8215a668c5144c0ffdb1b01",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://05e5ba4fcd6e3e1e819e786fce3473d5ef69763b127fe162b2e0906d6a904d09",
        "dweb:/ipfs/QmYPN5xeMoMBVT2B2FwJrDpwocNNsCuVosgg7vdYrrWNep"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x5f458cf292b4b7b9d9c1efd110b3b65905c7bd7e47a48090af5eb9fb7d620ddf",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://84995121aafc9124ba3a1148835dcccc1061c25a5b074b4579a83c0dd213d613",
        "dweb:/ipfs/QmPYSKEqYWasPxVRzv4TCpXVfpkahfFDEPkTLp7UAT9fKq"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x2e047e5efa9df7f3d60a8a114da39343635578b7475fcd987860eb5b87e8c758",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a071eda8331b690b689bbbc23e6a6c227324aad90d4101c36410a06b1ca3c357",
        "dweb:/ipfs/QmTR76zN1durS5acgDZXixrkrheXvaaMqfwXrJsaGyAPkj"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x6dd67541350d05fa7980a6497c1e372290e363c40c765a0ce4b7795c38510762",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3eadd97e12aff7228d28e5f9cb27dcddcf7764296d2a72ad703c3765376d50c4",
        "dweb:/ipfs/QmP5hGb6Nj64XCpG4s3sdoYR3sEt85AwDy4hcjoigNxYDa"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0xd66cdbb7083d80cc567449a7eb4f7272c16e0ceb9f20667d8b17cf2a8432aa64",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://946997262ab993790ce79eafa7d628ae9a1123192ad5c0d85624957ce8058105",
        "dweb:/ipfs/QmdSZ7BwGZvXvt9pt8AweDqnLt61eYqVg3QfK9renfGJHZ"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol": {
      "keccak256": "0xc8fab662d9a0c4e697c8dcaad72dd2a190331b01476649a742b6f317266ac5a1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c84047a6d47a901f45f90f12f713432289ae6d88fea95a383900906005cf70b",
        "dweb:/ipfs/QmVdLUVdtjTQn2fCG85Uv2ZAzCSfNbWYcAg5eXthunnigc"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol": {
      "keccak256": "0x8e6c8700603a5f50982462009bf0bd6d9167937d75d5d5b4ecaf2be25e48f334",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4003c6a7b68ba9d38baa8a338a747c70048f6ce862b34bd5b8da390a888b73fa",
        "dweb:/ipfs/QmSGRHzFkquMpe6zdDnRBG6e5ngr7QNDHD8ovb4RDACB7W"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol": {
      "keccak256": "0x8be3fa58d9bb445d169eda30dd35f34e149947eb0572cdb2ced99ed854b8cdc1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1b3d9b6c0aef7519ce60c08880a551a0579ae1625e16f89a728700f2eb7e075c",
        "dweb:/ipfs/QmZfS4Lt9mZBPpYxehPb5p9VAGGVdKGkHpZyhoKTP2rSUu"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/IERC721A.sol": {
      "keccak256": "0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e",
        "dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM"
      ]
    },
    "contracts/src/diamond/utils/Context.sol": {
      "keccak256": "0xbace3785343657020bee8dc579fec3a7f18741e5ddfaea001903f7ed087c5b8a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://df02a2fa496a45ceecd157bfed9d8e093b4ff236d3f83e89453cf0656b5c018d",
        "dweb:/ipfs/QmarCnWB7CNimfnNr51p2QBzdwpqbRAkgQncnA2c8kz7KR"
      ]
    },
    "contracts/src/diamond/utils/Nonces.sol": {
      "keccak256": "0xce0cce96c8f30e4052523e2c67c7b08ed9defa8c2e3858d4534b359be9ee9ee3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://caae09675d571304907f51e64c255981c5fbfbd60bf26d0117c00ecd7ed7a7fb",
        "dweb:/ipfs/QmPNReTvJDZ242duATLyDDt1JUUd2ACg472E1vftw5zgXB"
      ]
    },
    "contracts/src/diamond/utils/cryptography/EIP712.sol": {
      "keccak256": "0x4bc6ac914b47d64b899510e901545369b2b1c292fb392500c3fcc09bb13fbf21",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e7bd2f9bf25d82ff5f45c8075254dba48bcff67b1d6f1b5ab91d1b17a1d9f624",
        "dweb:/ipfs/QmegqbdjZy6DfKNzZHQ1rGJ67w4SaXUz6w3ZL8mrWkwQ5d"
      ]
    },
    "contracts/src/diamond/utils/cryptography/IERC5267.sol": {
      "keccak256": "0x1369ee10d9df0a2700fdf659db717f7c6beae8b2e7173212ec4ed70909f86d50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f43717adb31aaac44770deac2c689bc45472b9f752614ae32c9efe2013b2d42f",
        "dweb:/ipfs/Qmba5h3jR9Lenn5LRFwxfeEEiZMHqp8wnbX4FTfTtMxqHt"
      ]
    },
    "contracts/src/spaces/facets/guardian/GuardianBase.sol": {
      "keccak256": "0x380bbefb6d29266ce37efcc247b355a714485e21e2c3a6789f81226c36d8ac41",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7c9512890c4dd3dddc10ac94bdd747c4e49d6e9eb6ebf808eb017eda1733221a",
        "dweb:/ipfs/QmWwocwLuRiKzqJoNdLPmxpEH34H2sBfMTH7iU4aFkW8Kj"
      ]
    },
    "contracts/src/spaces/facets/guardian/GuardianStorage.sol": {
      "keccak256": "0xd8af0e2ff9c26165cd30e16eb881b2a58acff8f7f61bfac1b90dc6362f14dd63",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e06464b1498f896ad0c62ca19aed21f7667e36ebd0f77cb1831e0a60fb373688",
        "dweb:/ipfs/QmTFenitEo2y4UE3F4qtX1DfoBoEMs1pmtL1AmoeohTpw8"
      ]
    },
    "contracts/src/spaces/facets/guardian/IGuardian.sol": {
      "keccak256": "0x9898180a058f5d922141026a1266008c9d7883a9863549ab76d8218123be6c19",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3481a5ced56b71d2b5e8bbc6bce46d80eb8161fb9195fb232272a442d015323b",
        "dweb:/ipfs/QmV6LvhxezH6PJw1gfV7DgAyHUpGd2GN56w6G9n83vGxa3"
      ]
    },
    "contracts/src/spaces/facets/owner/ISpaceOwner.sol": {
      "keccak256": "0xf68eb1b3aceeacc0c4162304f74d89890e8c641a9c0778c1786db850a79cfb3f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8a345161f4d34be281c5f4d165dac958ed3a5e7d2888924d498555871906e6ea",
        "dweb:/ipfs/QmQcWfQ6k54UPr9eMA2KnXCJAc4NR24LhzbmyA5NUKBVN3"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwner.sol": {
      "keccak256": "0x8a644478b3bcfb18fda9c887838d710e59c7c5a2ed7003dcda5ab479f2fefe9c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://640e9b7eebba29735acc6b96ebe107a58db8af60ffb84c1b580a1b7e041e9393",
        "dweb:/ipfs/QmVeuTQ87BVjzZc7FaVwrbz82PVCWkXNjz1sYBzeYRi3h7"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerBase.sol": {
      "keccak256": "0xd4eda8665f05e74b37a99b21157baa102660d9143e6b45cc6800bbf795299ad2",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://74c3e6034a8f74c315d6790c423b1083c8a9a468f76e3d9b93e86afc8143e7c1",
        "dweb:/ipfs/QmcZ8TV2rAmwQx2aRSvhRQmcevZYCWWxD4KUnyYteN2Qax"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerStorage.sol": {
      "keccak256": "0xae80a53a918d9bd4b064aaeac74a8697a12f669e815f2fbd00385d3b82f39026",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://497ae2aeb902efd34779b277320544f2c194889b2df926614e19f3cbfc1e787f",
        "dweb:/ipfs/QmPNLznGfzdidEhCokiEFppJa6faPNNnFGt1Y43X3qrs6B"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerUriBase.sol": {
      "keccak256": "0xf24d932787ab9862d27eba5d8b687644a95319aaa33141cc76f167f38d2bebf4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8abc2878482017106e2cde6fa036ce74b8e8c434ea6ebc1915b2bbade66cfcde",
        "dweb:/ipfs/QmXEzY6CXnLZndoM6i27ewqCseR2sdArjCjyZXvg5y1TZy"
      ]
    },
    "contracts/src/utils/Validator.sol": {
      "keccak256": "0xb8d6d023395c2611e308cb09606dc9e49dce0d985a75f20572aeed590d738f50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://144807c8826c643f74c48e3589243ac4b05dffd0a00b861b75ce46451224be64",
        "dweb:/ipfs/QmazGzxM9owCyKTV1cY46PiMHXdApYJR221Lm9YMcn7J72"
      ]
    },
    "lib/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
      "license": "MIT",
      "urls": [
        "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
        "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
      ]
    },
    "lib/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
        "dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
      ]
    },
    "lib/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
        "dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
      ]
    },
    "lib/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "keccak256": "0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435",
      "license": "MIT",
      "urls": [
        "bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c",
        "dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX"
      ]
    },
    "lib/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
      "license": "MIT",
      "urls": [
        "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
        "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
      ]
    },
    "lib/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
      "license": "MIT",
      "urls": [
        "bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
        "dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
      ]
    },
    "lib/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe",
      "license": "MIT",
      "urls": [
        "bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c",
        "dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj"
      ]
    },
    "lib/@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
      "license": "MIT",
      "urls": [
        "bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
        "dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
      ]
    },
    "lib/base64/base64.sol": {
      "keccak256": "0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf",
      "license": "MIT",
      "urls": [
        "bzz-raw://17c12e16d8d66f3af15d8787920bd41ca6c1e7517a212a6b9cebd4b6d38f36fe",
        "dweb:/ipfs/QmcXMnZUXEz6LRKsm3CSvqdPboAzmezavi8bTg2dRxM2yE"
      ]
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "name": "AddressEmptyCode",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "AddressInsufficientBalance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "BalanceQueryForZeroAddress",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Banning__AlreadyBanned",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Banning__CannotBanSelf",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Banning__InvalidTokenId",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Banning__NotBanned",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Dispatcher__InvalidCaller",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Dispatcher__InvalidValue",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ERC5643__DurationZero",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ERC5643__InvalidTokenId",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ERC5643__NotApprovedOrOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ERC5643__SubscriptionNotRenewable",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeAlreadyVoted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeNotFound",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionCheckAlreadyCompleted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionCheckAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionNotRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__InvalidValue",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__NotMember",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__ValueAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "FailedInnerCall",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_InInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_NotInInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__AlreadyMember",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InsufficientAllowance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InsufficientPayment",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidCurrency",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidDuration",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidFeeRecipient",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidFreeAllocation",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidMaxSupply",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidPrice",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidPricingModule",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidReferralBps",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidReferralCode",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidReferralTime",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__InvalidTokenId",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__MaxSupplyReached",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__NotExpired",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Membership__PriceTooLow",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintERC2309QuantityExceedsLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintZeroQuantity",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnerQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnershipNotInitializedForExtraData",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__NotPaused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__Paused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ReentrancyGuard__ReentrantCall",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__EntitlementDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__InvalidEntitlementAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__InvalidPermission",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__PermissionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__PermissionDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__RoleDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "SafeERC20FailedOperation",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferFromIncorrectOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToNonERC721ReceiverImplementer",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "URIQueryForNonexistentToken",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "moderator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Banned",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "fromTokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "toTokenId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "name": "ConsecutiveTransfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "enum IEntitlementGatedBase.NodeVoteStatus",
            "name": "result",
            "type": "uint8"
          }
        ],
        "name": "EntitlementCheckResultPosted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "currency",
            "type": "address"
          }
        ],
        "name": "MembershipCurrencyUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          }
        ],
        "name": "MembershipFeeRecipientUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "allocation",
            "type": "uint256"
          }
        ],
        "name": "MembershipFreeAllocationUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "limit",
            "type": "uint256"
          }
        ],
        "name": "MembershipLimitUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          }
        ],
        "name": "MembershipPriceUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "MembershipTokenIssued",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          }
        ],
        "name": "MembershipTokenRejected",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "MembershipWithdrawal",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "code",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint16",
            "name": "bps",
            "type": "uint16"
          }
        ],
        "name": "Membership__ReferralCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "code",
            "type": "uint256"
          }
        ],
        "name": "Membership__ReferralRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "code",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint16",
            "name": "bps",
            "type": "uint16"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "endTime",
            "type": "uint256"
          }
        ],
        "name": "Membership__ReferralTimeCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "remover",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "updater",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint64",
            "name": "expiration",
            "type": "uint64"
          }
        ],
        "name": "SubscriptionUpdate",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "moderator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Unbanned",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name_",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol_",
            "type": "string"
          }
        ],
        "name": "__ERC721A_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IEntitlementChecker",
            "name": "entitlementChecker",
            "type": "address"
          }
        ],
        "name": "__EntitlementGated_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "symbol",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint64",
                "name": "duration",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "feeRecipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "freeAllocation",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "pricingModule",
                "type": "address"
              }
            ],
            "internalType": "struct IMembershipBase.Membership",
            "name": "info",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "spaceFactory",
            "type": "address"
          }
        ],
        "name": "__Membership_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getMembershipCurrency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getMembershipFreeAllocation",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getMembershipImage",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256"
          }
        ],
        "name": "_getMembershipPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getMembershipSupplyLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getPricingModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "_getSpaceFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newAllocation",
            "type": "uint256"
          }
        ],
        "name": "_setMembershipFreeAllocation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newLimit",
            "type": "uint256"
          }
        ],
        "name": "_setMembershipSupplyLimit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newPricingModule",
            "type": "address"
          }
        ],
        "name": "_setPricingModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "expiresAt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipCurrency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipDuration",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipFreeAllocation",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipImage",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMembershipPricingModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getMembershipRenewalPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getRuleData",
        "outputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CombinedOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "index",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.Operation[]",
                "name": "operations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CheckOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "contractAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "threshold",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IRuleEntitlement.CheckOperation[]",
                "name": "checkOperations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.LogicalOperationType",
                    "name": "logOpType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "leftOperationIndex",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "rightOperationIndex",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.LogicalOperation[]",
                "name": "logicalOperations",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct IRuleEntitlement.RuleData",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaceFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "joinSpace",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "referrer",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "referralCode",
            "type": "uint256"
          }
        ],
        "name": "joinSpaceWithReferral",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "enum IEntitlementGatedBase.NodeVoteStatus",
            "name": "result",
            "type": "uint8"
          }
        ],
        "name": "postEntitlementCheckResult",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "renewMembership",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newAllocation",
            "type": "uint256"
          }
        ],
        "name": "setMembershipFreeAllocation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "newImage",
            "type": "string"
          }
        ],
        "name": "setMembershipImage",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newLimit",
            "type": "uint256"
          }
        ],
        "name": "setMembershipLimit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newPrice",
            "type": "uint256"
          }
        ],
        "name": "setMembershipPrice",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "pricingModule",
            "type": "address"
          }
        ],
        "name": "setMembershipPricingModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "errors": {
        "AddressEmptyCode(address)": [
          {
            "details": "There's no code at `target` (it is not a contract)."
          }
        ],
        "AddressInsufficientBalance(address)": [
          {
            "details": "The ETH balance of the account is not enough to perform the operation."
          }
        ],
        "FailedInnerCall()": [
          {
            "details": "A call to an address target failed. The target may have reverted."
          }
        ],
        "SafeERC20FailedOperation(address)": [
          {
            "details": "An operation with an ERC20 token failed."
          }
        ]
      },
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "ApprovalForAll(address,address,bool)": {
          "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "ConsecutiveTransfer(uint256,uint256,address,address)": {
          "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
        },
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        },
        "SubscriptionUpdate(uint256,uint64)": {
          "details": "When a subscription is canceled, the expiration value should also be 0."
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
        }
      },
      "kind": "dev",
      "methods": {
        "__Membership_init((string,string,uint256,uint256,uint64,address,address,uint256,address),address)": {
          "details": "Initialization logic when facet is added to diamond"
        },
        "_getMembershipPrice(uint256)": {
          "details": "Makes it virtual to allow other pricing strategies"
        },
        "approve(address,uint256)": {
          "details": "Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator."
        },
        "balanceOf(address)": {
          "details": "Returns the number of tokens in `owner`'s account."
        },
        "expiresAt(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          }
        },
        "getApproved(uint256)": {
          "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "getMembershipCurrency()": {
          "returns": {
            "_0": "The membership currency"
          }
        },
        "getMembershipDuration()": {
          "returns": {
            "_0": "The membership duration"
          }
        },
        "getMembershipFreeAllocation()": {
          "returns": {
            "_0": "The membership free allocation"
          }
        },
        "getMembershipImage()": {
          "returns": {
            "_0": "The membership image"
          }
        },
        "getMembershipLimit()": {
          "returns": {
            "_0": "The membership limit"
          }
        },
        "getMembershipPrice()": {
          "returns": {
            "_0": "The membership price"
          }
        },
        "getMembershipPricingModule()": {
          "returns": {
            "_0": "The membership pricing module"
          }
        },
        "getMembershipRenewalPrice(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          },
          "returns": {
            "_0": "The membership renewal price"
          }
        },
        "getSpaceFactory()": {
          "returns": {
            "_0": "The space factory"
          }
        },
        "isApprovedForAll(address,address)": {
          "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
        },
        "joinSpace(address)": {
          "params": {
            "receiver": "The address of the receiver"
          }
        },
        "joinSpaceWithReferral(address,address,uint256)": {
          "params": {
            "receiver": "The address of the receiver",
            "referralCode": "The referral code",
            "referrer": "The address of the referrer"
          }
        },
        "name()": {
          "details": "Returns the token collection name."
        },
        "ownerOf(uint256)": {
          "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "renewMembership(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          }
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "setApprovalForAll(address,bool)": {
          "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
        },
        "setMembershipFreeAllocation(uint256)": {
          "params": {
            "newAllocation": "The new membership free allocation"
          }
        },
        "setMembershipLimit(uint256)": {
          "params": {
            "newLimit": "The new membership limit"
          }
        },
        "setMembershipPrice(uint256)": {
          "params": {
            "newPrice": "The new membership price"
          }
        },
        "setMembershipPricingModule(address)": {
          "params": {
            "pricingModule": "The new pricing module"
          }
        },
        "symbol()": {
          "details": "Returns the token collection symbol."
        },
        "tokenURI(uint256)": {
          "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "totalSupply()": {
          "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
        }
      },
      "version": 1
    },
    "userdoc": {
      "errors": {
        "ApprovalCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "ApprovalQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "BalanceQueryForZeroAddress()": [
          {
            "notice": "Cannot query the balance for the zero address."
          }
        ],
        "MintERC2309QuantityExceedsLimit()": [
          {
            "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
          }
        ],
        "MintToZeroAddress()": [
          {
            "notice": "Cannot mint to the zero address."
          }
        ],
        "MintZeroQuantity()": [
          {
            "notice": "The quantity of tokens minted must be more than zero."
          }
        ],
        "OwnerQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "OwnershipNotInitializedForExtraData()": [
          {
            "notice": "The `extraData` cannot be set on an unintialized ownership slot."
          }
        ],
        "TransferCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "TransferFromIncorrectOwner()": [
          {
            "notice": "The token must be owned by `from`."
          }
        ],
        "TransferToNonERC721ReceiverImplementer()": [
          {
            "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
          }
        ],
        "TransferToZeroAddress()": [
          {
            "notice": "Cannot transfer to the zero address."
          }
        ],
        "URIQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ]
      },
      "events": {
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        },
        "SubscriptionUpdate(uint256,uint64)": {
          "notice": "Emitted when a subscription expiration changes"
        }
      },
      "kind": "user",
      "methods": {
        "expiresAt(uint256)": {
          "notice": "Return the expiration date of a membership"
        },
        "getMembershipCurrency()": {
          "notice": "Get the membership currency"
        },
        "getMembershipDuration()": {
          "notice": "Get the membership duration"
        },
        "getMembershipFreeAllocation()": {
          "notice": "Get the membership free allocation"
        },
        "getMembershipImage()": {
          "notice": "Get the membership image"
        },
        "getMembershipLimit()": {
          "notice": "Get the membership limit"
        },
        "getMembershipPrice()": {
          "notice": "Get the membership price"
        },
        "getMembershipPricingModule()": {
          "notice": "Get the membership pricing module"
        },
        "getMembershipRenewalPrice(uint256)": {
          "notice": "Get the membership renewal price"
        },
        "getSpaceFactory()": {
          "notice": "Get the space factory"
        },
        "joinSpace(address)": {
          "notice": "Join a space"
        },
        "joinSpaceWithReferral(address,address,uint256)": {
          "notice": "Join a space with a referral"
        },
        "renewMembership(uint256)": {
          "notice": "Renew a space membership"
        },
        "setMembershipFreeAllocation(uint256)": {
          "notice": "Set the membership free allocation"
        },
        "setMembershipLimit(uint256)": {
          "notice": "Set the membership limit"
        },
        "setMembershipPrice(uint256)": {
          "notice": "Set the membership price"
        },
        "setMembershipPricingModule(address)": {
          "notice": "Set the membership pricing module"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/spaces/facets/membership/MembershipFacet.sol": "MembershipFacet"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/@openzeppelin/",
      ":@prb/math/=lib/@prb/math/src/",
      ":@prb/test/=lib/@prb/test/src/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64/=lib/base64/",
      ":ds-test/=lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat-deploy/=lib/hardhat-deploy/"
    ]
  },
  "sources": {
    "contracts/src/base/registry/facets/checker/IEntitlementChecker.sol": {
      "keccak256": "0x5c9a99c94e95a0c89b3d3310e252cd98aeafe34d87ffc0058f9b001af6f28bd1",
      "license": "MIT",
      "urls": [
        "bzz-raw://7983b17a371e76c8681756dc10abe26f8fffd35d3d6d8773c2023f06c8600ba3",
        "dweb:/ipfs/QmSDkTctKCTaMGYF2LZ1N9YWwDTZD75XegpPyLrP694JFf"
      ]
    },
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0xecbb7e8de0dae5bdbcbda879436335abac6808bcc2e14f1f4e9efbdc77c4e8be",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b7b5446461a1492f16c86137ce49a699d8a3452e2174c5568b97f8d2d4bc85a7",
        "dweb:/ipfs/QmY74odf1qgTwBV3wjF12rV8TXs3DiNoMm9Pg9S8w2F4VP"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "license": "MIT",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x5dbbdca0faf75680e1c0d425d92bdb5ce16951c0f8215a668c5144c0ffdb1b01",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://05e5ba4fcd6e3e1e819e786fce3473d5ef69763b127fe162b2e0906d6a904d09",
        "dweb:/ipfs/QmYPN5xeMoMBVT2B2FwJrDpwocNNsCuVosgg7vdYrrWNep"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x5f458cf292b4b7b9d9c1efd110b3b65905c7bd7e47a48090af5eb9fb7d620ddf",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://84995121aafc9124ba3a1148835dcccc1061c25a5b074b4579a83c0dd213d613",
        "dweb:/ipfs/QmPYSKEqYWasPxVRzv4TCpXVfpkahfFDEPkTLp7UAT9fKq"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x2e047e5efa9df7f3d60a8a114da39343635578b7475fcd987860eb5b87e8c758",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a071eda8331b690b689bbbc23e6a6c227324aad90d4101c36410a06b1ca3c357",
        "dweb:/ipfs/QmTR76zN1durS5acgDZXixrkrheXvaaMqfwXrJsaGyAPkj"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/ITokenOwnable.sol": {
      "keccak256": "0x3035bb5eb69a7c939aa038f27eb216b117727beba7d89aa84657c3f24c98b32d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c1a6860c8105dad4d1b193883ecd700c223ea9b81c096ed86b3d25bd6c9eed7f",
        "dweb:/ipfs/QmVEDbbF6eyZfmqcM1FfedAuCQqiUYpagDmZMhHM4Ap7n9"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableBase.sol": {
      "keccak256": "0xc5ef68652f692a56131badcf0adb92893d822fd5e0d97dda49a4520d1859a00a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://bf38ee4ec154de7ef7de263241454d98392d6e61caf4582e2145325258bb8fa5",
        "dweb:/ipfs/QmcZGn5KeSPwsTVominE537CDPbTMGoVDgko51onHZoGyW"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableStorage.sol": {
      "keccak256": "0xb348f08d762f1b4ccda363a361eb6d635b50501e93821fe9911296f86f4374f0",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4416ee362b1485fb1cbae83087f7da85d34fec41a39146bd1fb9f877094df0fc",
        "dweb:/ipfs/QmPiCdrarzwS1YLYLPpcPMFxhkqE5rT9EFLYsVCV2N5Qkf"
      ]
    },
    "contracts/src/diamond/facets/pausable/IPausable.sol": {
      "keccak256": "0xd5cc8d743bd12bbd23526178c11808634527c87e2f6da29dfb6aec75dab56261",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c893da163481570ae2e00e5deae732404261cc0e7143fdc0448145810448c6b6",
        "dweb:/ipfs/QmbyUkcew8vmUXPVLDJ7GjvxMkmTqjhKZWLDYtWEPzZ2SM"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableBase.sol": {
      "keccak256": "0xa278c9cdc622351a088d6d96759a51972b1720ef72424f1f98e5822dd9fd6438",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://379dabb0f68319e89d4b7447c31d5a3d0d2b4ecbce92b07f6e096974f2541c6c",
        "dweb:/ipfs/QmPQPKBYtuNiFDNh9nGCJGtLXP2AqPLkZ7BBTKgQZeaVH1"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableStorage.sol": {
      "keccak256": "0x54ca45de7b414be27767111aa11f06e9d5deeb3241bb4c9476edda7febd92c07",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0e573c53f32ec5c9c89e68ca9e2153635fcb2694ba261e93389dc360ef98226b",
        "dweb:/ipfs/QmQUfuRRg8zRFzrqfYaay7RyR2L4D4d4vb4c2TtUqb2GhL"
      ]
    },
    "contracts/src/diamond/facets/reentrancy/IReentrancyGuard.sol": {
      "keccak256": "0xcf0384936029c121c827aca432891d18f7c7db3d234dfbdad69373726d41003a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6c7127aa6cc24cb43dac1bea76e16b09c2ce26421baf08792f767d6b204ba39b",
        "dweb:/ipfs/QmSziExRUyaUEVteBXtsxkNMgcdXS9PPaDdCNdLvivcFJq"
      ]
    },
    "contracts/src/diamond/facets/reentrancy/ReentrancyGuard.sol": {
      "keccak256": "0x96999935d243afdc7370154431fef7de13cd74b892949070d8488d5ad83dfa4f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e5978c51e1bab72ec8d3a8e5bb80c7e2bcac60c08d04b3406b6863efb585100c",
        "dweb:/ipfs/QmUDtXQHEx1kgQeEQ5Sui9xdDQgf931ts2ZCKpwfH88U4T"
      ]
    },
    "contracts/src/diamond/facets/reentrancy/ReentrancyGuardStorage.sol": {
      "keccak256": "0xbfd5548227b70eec020b03bdec1ae0ef0b51c5e3380147153a93c0f03c5e630c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://dab049fa3dd63981697ccffab59be2e6d531a77692c80c857ce54ee8484bd6a6",
        "dweb:/ipfs/QmYVE2qptk62RDXSFJMYUYSUzjksxbHEVtG3pBP8m3s9VC"
      ]
    },
    "contracts/src/diamond/facets/token/ERC5643/ERC5643Base.sol": {
      "keccak256": "0x08a5e803cae11a5ca3cb43e3243b4af0339cf044fe8a8f33c02eeac6a89771a3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1b9dffbbd0c961d87eeaa10665ed93a3a919dc53db0e684b76d66b0f7e2a0714",
        "dweb:/ipfs/QmbgTB2swkeRsc7Dc1Wf28cLcKTExw2pzDY66zy5kFLeE8"
      ]
    },
    "contracts/src/diamond/facets/token/ERC5643/ERC5643Storage.sol": {
      "keccak256": "0x5d560d4d09c521bd463e6ea41eb6451a76f815222d9b3a9b15aff5ce56a2e15e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://395630900bc5b43af14ba8b2b9a97357d9b36ed2debfb72b4fab1999294645c7",
        "dweb:/ipfs/QmNa6GUiCLSnL3jRKewzpC5TU5TtYxdNNUhPHTqoZ4sGC7"
      ]
    },
    "contracts/src/diamond/facets/token/ERC5643/IERC5643.sol": {
      "keccak256": "0x3d75267c3894bc9b201b30af94a4587cca8dc3363593a47ee4cc3b9ff27a7218",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3e50378e2ca909177555139f16db11f2fc7f3e97acbc40fc6eea5848bbd61b3f",
        "dweb:/ipfs/Qmdi2FBhdWAAFE8Kr5DFu9qoESLcH1STb7bm7kXxEjrsJB"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol": {
      "keccak256": "0xc8fab662d9a0c4e697c8dcaad72dd2a190331b01476649a742b6f317266ac5a1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c84047a6d47a901f45f90f12f713432289ae6d88fea95a383900906005cf70b",
        "dweb:/ipfs/QmVdLUVdtjTQn2fCG85Uv2ZAzCSfNbWYcAg5eXthunnigc"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol": {
      "keccak256": "0x8e6c8700603a5f50982462009bf0bd6d9167937d75d5d5b4ecaf2be25e48f334",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4003c6a7b68ba9d38baa8a338a747c70048f6ce862b34bd5b8da390a888b73fa",
        "dweb:/ipfs/QmSGRHzFkquMpe6zdDnRBG6e5ngr7QNDHD8ovb4RDACB7W"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol": {
      "keccak256": "0x8be3fa58d9bb445d169eda30dd35f34e149947eb0572cdb2ced99ed854b8cdc1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1b3d9b6c0aef7519ce60c08880a551a0579ae1625e16f89a728700f2eb7e075c",
        "dweb:/ipfs/QmZfS4Lt9mZBPpYxehPb5p9VAGGVdKGkHpZyhoKTP2rSUu"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/IERC721A.sol": {
      "keccak256": "0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e",
        "dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM"
      ]
    },
    "contracts/src/factory/facets/architect/pricing/IPricingModules.sol": {
      "keccak256": "0xbfe90223b87a2fa178024ec2b94dc45a8950b707d76dc54e6743439e8fc0d73e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://73bfdc19b81b36d3c8d7aaa0c6d2701d54b8eeb0613e4c0f6184d1d9e2189716",
        "dweb:/ipfs/QmSqZaPpb4A3AtjqE4cRXXjre9fQ87fv8P7ycsKmpC4NHU"
      ]
    },
    "contracts/src/factory/facets/platform/requirements/IPlatformRequirements.sol": {
      "keccak256": "0xc0b22b0caa2336e0c3f6b6813432643053785c39531d30e5851eeb613a0a7991",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8a7ceb199e92f484efcc444fffd54fbabaf332c210dda0ef46d89a66f4cb47c7",
        "dweb:/ipfs/QmRJVrZiZpbGsLngz4J3NVgapKXLErdLc7BPyEyTNKdijg"
      ]
    },
    "contracts/src/factory/facets/prepay/IPrepay.sol": {
      "keccak256": "0x0c5c097dd77471d041cdbb84011ac789147af937d275329d857d1a4b257635e9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://baca271a5a66856f3144a4bf0ed6a484b0c981539d6bf0c57ffade9e4986eb49",
        "dweb:/ipfs/QmVgPWMEL5q2J5kmZQZFRadWjuVQeFLaa9K2gCHdhjLUa9"
      ]
    },
    "contracts/src/factory/facets/registry/IImplementationRegistry.sol": {
      "keccak256": "0x2409b9eb86a4dc5849050d06409fd7548ac21f9bf6e7419b91dfb9226db0a3d5",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://613195fc78a1a496820c5934f315c586ad33edf7608022d2ae0ea44f52529e61",
        "dweb:/ipfs/QmR8Gn11UNq2rKC5Qp7Prdk61oWhNg3UVc8KeyWCRfrEqV"
      ]
    },
    "contracts/src/factory/facets/wallet-link/IWalletLink.sol": {
      "keccak256": "0x548d2531215e1387f83265975af58947d37c01ae9ea75cce91147a2468fc653b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f2300ddc317d8f0e9f24dee7904de69a87325305d913f541a0dc877bba7e1f13",
        "dweb:/ipfs/QmY6kMFdswJnVtkYu415QG5ePjUrS9W1QiXi9VXaLBeRJR"
      ]
    },
    "contracts/src/spaces/entitlements/IEntitlement.sol": {
      "keccak256": "0x84f059cb6d594cbe0a70ed4a10c9b96f82d530c9dba39a5d84e466f5b046b9ca",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://68fdceef136a16c8a11e1b354119d39697029ea41db4ae4edc9ea9d68e9c12a3",
        "dweb:/ipfs/QmbCmoo6nMDou5m77JzFBPc2GBJkET5F2eWDEZaXQ5taHf"
      ]
    },
    "contracts/src/spaces/entitlements/rule/IRuleEntitlement.sol": {
      "keccak256": "0x795b58a2ed6205d814e01e58a4a5e88ff69401ee7540d01c4881b7b28f04cfcf",
      "license": "MIT",
      "urls": [
        "bzz-raw://684e395bce3abedfb499ba8b2708a4f0ca9d1b1f73eb0ebc647d4cead0b8fdd1",
        "dweb:/ipfs/QmWz2Eu8UGXYskoBFtFXLBuwDrxUfYDLeQuTCeApALdf97"
      ]
    },
    "contracts/src/spaces/facets/Entitled.sol": {
      "keccak256": "0x60df2d441d103a23e8ff1fa5815399bf58dc25b19030de56c15cf9a84393c62c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d13b2b6464b4a820ff88aae2a59bf003bc7d61a1e630ac69e0849d54446539b7",
        "dweb:/ipfs/QmZe187XqCCNxmwj3BKGRtyNyEoEga22oqGQe8iao7LQCc"
      ]
    },
    "contracts/src/spaces/facets/Permissions.sol": {
      "keccak256": "0xd168f6402ce23a1bbc0503c1287e94096ef7c7b35733a8d835a8747f79df77f5",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2d805a55d9e2050d763bc1cf3f0a5d40ca8066bdcdc3c920908f6f63cfa1a721",
        "dweb:/ipfs/QmPSieLU3W9f8FrDu918KPPSQQKBMfRUetRq5fdEsTBFxp"
      ]
    },
    "contracts/src/spaces/facets/banning/BanningBase.sol": {
      "keccak256": "0xa78695942b8e0415e7177d20dd06f596566a649e68c89d1ed15ec90e74a95270",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://07c4a45a6d0e3d03752be2a31a07282a39c8f72536e3ad834fd4d183052a879d",
        "dweb:/ipfs/QmP7ww27otUvq2wKy7rewxEAu2JzD5ALwRgJhRBPNKr8EN"
      ]
    },
    "contracts/src/spaces/facets/banning/BanningStorage.sol": {
      "keccak256": "0xd48969bfaf9c8bfc980981818ed96101e858652f5516567c08236ce525487492",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://95f1b33fb46ea8d8ed6145d4f646dca4f670712dca81ec75cab5db2dbff6e0f0",
        "dweb:/ipfs/QmPfCAZF3S5ehqKoL2SBg2TEB22TKFuytDNcG8PBa7qVe1"
      ]
    },
    "contracts/src/spaces/facets/banning/IBanning.sol": {
      "keccak256": "0x1983a3e375f4dd8a21be759a637b85ed5e416ca8fc7109153986eb2d4b08a505",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1f5f5a54e4cbaca9e10cc174ba73f5f80b0875d097084a9ebc6b259b2c4c1419",
        "dweb:/ipfs/QmQSfNhhRNkiHeG1XXWVYhQtvuPRyrv72gxuARgsgupjn6"
      ]
    },
    "contracts/src/spaces/facets/channels/ChannelService.sol": {
      "keccak256": "0x5459092e3b26770de949b6ce3021e3582b62602cf3a419a695da19aa1810eab7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d80a0bc5adf516cfda380ac0bc966e2f430b395b78b5aa756adc3ef0a28ae1b9",
        "dweb:/ipfs/QmW2RvEFxrhFt5gxBK2Ay5BS1BgXAv37sipBPSxYBt1vfi"
      ]
    },
    "contracts/src/spaces/facets/channels/ChannelStorage.sol": {
      "keccak256": "0x2c56c47bf36e703f0703ea1f2a27db2406b17d2a173d24bde6efbbfc4bab301f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0030cd42de4b20ddb33284bec5065fa4d1edb817ac7f667f845881cb66a2a3b7",
        "dweb:/ipfs/QmNg6DmtqbHn4QMiMzu4yAr8G5G19HZSJ6dRteeGArsnzS"
      ]
    },
    "contracts/src/spaces/facets/delegation/WalletLinkProxyBase.sol": {
      "keccak256": "0xac57b39cf710166b1c2dc1f0c7bf58fb813ceb047312b346a01e31df615c14f2",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e3a22fb662252a0d23980b5a8700084f1a314b60a2f537243c9a5d202105a3a5",
        "dweb:/ipfs/QmXd6ibShjPAtPsyFuo7Wmai8fcbKkfbS48sAhTtXU7Yk9"
      ]
    },
    "contracts/src/spaces/facets/delegation/WalletLinkProxyStorage.sol": {
      "keccak256": "0xe4469f1cf8e5814c8b19b4ac664b904aa786590ece22ae7197abebe9b1bcb9ef",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://5a7dea70d2ebaf427c44a4934c18578ab6bdc797a2a7abd4768b86e1a63fce07",
        "dweb:/ipfs/QmYqnqHFfyMdHVsM8XuAttJWeMuGePfmYL9NZx8f8bw8Ek"
      ]
    },
    "contracts/src/spaces/facets/dispatcher/DispatcherBase.sol": {
      "keccak256": "0x903020fbe095e548604af198fd56798a1cc7ebd875294f247e38b5c2c25b4b27",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4b9778b31d1fb831115edf4502f6b0166dd0dc5c255bd4bf081d58a40effe675",
        "dweb:/ipfs/QmZ8X9YRtXaPVhxmjY9g6dUTKJb2LxxtCYELm1buoe9UEU"
      ]
    },
    "contracts/src/spaces/facets/dispatcher/DispatcherStorage.sol": {
      "keccak256": "0x72ce4a1e04daeb7732b3559ef699a921d20d0056ad73b1a013ccc131957f9a5b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1053eb5b1f78f5ead722e36fc6a33100534f9bdf065bfb511677c3a5bf8e91b6",
        "dweb:/ipfs/QmeKcC2E8ym4nJ7f84HgjojFDcoghDWyZyKNjQ32ca1RXA"
      ]
    },
    "contracts/src/spaces/facets/dispatcher/IDispatcher.sol": {
      "keccak256": "0x9542fdb04a005a1d923bd266f539db381275f2c5de9de06807eca7d043648308",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://64ebd4899ff63689607fa3014987b953b2ec7d2314667eedceabb868cb042c43",
        "dweb:/ipfs/QmdP8qNW5g1rnFK1Czogvp6JDAvUsPoUavxiJbdci6s6zo"
      ]
    },
    "contracts/src/spaces/facets/entitlements/EntitlementsManagerService.sol": {
      "keccak256": "0x6f40f5b41ad702ea55bf10f987b3e2b6d02ac527a66be523f06f025cead1867d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://da2012c616b833c5b491735c230be707e4f9b7657b3a71d7bdf52e7c2ba128b9",
        "dweb:/ipfs/Qme4864V46rozVDRWtfYqtpyzE1SzBnqYQQf3iD2rrqiPg"
      ]
    },
    "contracts/src/spaces/facets/entitlements/EntitlementsManagerStorage.sol": {
      "keccak256": "0xc8e97604a9fb7e2f90de70eed0299ad59bbede47563103fc4cdae8b5a90088f8",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://01194896393f0e77f617f02bed7da7cee5ec7a2d810a058f9c1be8c2ad99f583",
        "dweb:/ipfs/QmbPtkGzBPHYKwvsM3d26MYJKLbFZ7p253pXJCe8aDzUfK"
      ]
    },
    "contracts/src/spaces/facets/gated/EntitlementGated.sol": {
      "keccak256": "0x69b525c004a345b89f3c784df334780a2d399b3f2058183daf65862f2d095820",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e927c722387563b909fd26cbd09cff0b5bc905a3c0c5c00b9c40c4d66bf19e70",
        "dweb:/ipfs/Qmbk5XXjzLaZJSaSSjhpEm2pyB2GSj1cDPChYdJup9wStk"
      ]
    },
    "contracts/src/spaces/facets/gated/EntitlementGatedBase.sol": {
      "keccak256": "0x0aa9887cf58dd68d0270c85e2d7610080f35410b845c2227e4bd84356b7a2cb7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6dbdbed895fc2a53bffa3dbc1cfd4c992a096f153e6bbb7aeb9894485e7fc1a6",
        "dweb:/ipfs/QmZp76Gd8aL9pWbiTvLaiHv1w12yjN59PtYdMvoUCbfbH5"
      ]
    },
    "contracts/src/spaces/facets/gated/EntitlementGatedStorage.sol": {
      "keccak256": "0xe997c0dd62f6ceb300729d3f56a3f25a47b40ed5946d68c5210c38941cb37eaa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://63fcfd9f667538e8e9339534d2ddc6f7899e4179a54f3c6595e2598babb5bb9c",
        "dweb:/ipfs/QmUfKtfgW1uskEWkhhGqTjcbCqMANQoKKfTgV2ZvdAZpvJ"
      ]
    },
    "contracts/src/spaces/facets/gated/IEntitlementGated.sol": {
      "keccak256": "0x948de1018f7f78366263a40e0f8269e10941216bd03a9996edb24a6230959e74",
      "license": "MIT",
      "urls": [
        "bzz-raw://dc985539ce639f39fd68723acca6424a78deac6cec3693c9d8e1084a487c83ec",
        "dweb:/ipfs/QmQujX5rmDwhJZurp11FTiPLb7ev9swLTtdkagA8wydZiT"
      ]
    },
    "contracts/src/spaces/facets/membership/IMembership.sol": {
      "keccak256": "0x233066dd470121818082ba6a4c868f90feafc3be29942aae2c7a5c25543b7485",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://30d976a1882102493e7cee87b75ab04c662626d71aca51c9334ed2f60402bb59",
        "dweb:/ipfs/QmerPfizrjueQSgG8SkSoi44fkyaqrN2ZCFTnaxnM3UqF7"
      ]
    },
    "contracts/src/spaces/facets/membership/MembershipBase.sol": {
      "keccak256": "0x82b3314afcd1fe84a5261c38627c2537c09271372504af10549558c0fd608791",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://dadc28ee124081ea64228b8a12e0fcc93c7256535597ea9e29d58140bb599fc5",
        "dweb:/ipfs/QmYNZjhBJnPf9kMt2J6pL2d746AB3EHrXVAj5Ce3ibZpBh"
      ]
    },
    "contracts/src/spaces/facets/membership/MembershipFacet.sol": {
      "keccak256": "0xdc782a29cb2a6a7f136c6e4a65186112cbc9eb517dc234ac391ce7f437cc0dcf",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7df5a5738f97cae15e9a1d59ca3dd7efb5ab860848e0205aae9c6e6bb066464c",
        "dweb:/ipfs/QmQ61dYiibSaKrjzPvn9npQn7b83dM8tkwF48HxtaW6gwg"
      ]
    },
    "contracts/src/spaces/facets/membership/MembershipStorage.sol": {
      "keccak256": "0x026bba72193ded7f74f3f2b7c622d0b5a553f81cb85bbb6c83d5922caefb71d3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://db45fd461b1779362a58059bfa92f215f6e7df5f360aeb6319ac0e14433469ee",
        "dweb:/ipfs/QmQfk5dXU8xL9PGPZcgNAtMQxitVT76X176e4PWJCej4v5"
      ]
    },
    "contracts/src/spaces/facets/membership/pricing/IMembershipPricing.sol": {
      "keccak256": "0xb68faf2b90536ea53110ebb1d4456f2e9a261b5fac4515df47076da73e0cbd77",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://063fca54f8210be704b5d9f54efac08017266fafc9d287a6ece7866b25174448",
        "dweb:/ipfs/QmbXUgKgh36CmNRA5NrtRrVcgfrKYEzZprAcjTVWhHmXBF"
      ]
    },
    "contracts/src/spaces/facets/membership/referral/IMembershipReferral.sol": {
      "keccak256": "0xeb2feee4b1f3e83509bc1425c0ecd60eaf168fa7686c14dc2bd636e5a691bc6a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ec9bcb8c4106639ec9e0d37fa59385c1e853fb07f9ebedcd9f2bc1198979a807",
        "dweb:/ipfs/QmcAdwQKn2jMo7grzXNGSPr9PvQBxdKURF6xxLPorCDrFt"
      ]
    },
    "contracts/src/spaces/facets/membership/referral/MembershipReferralBase.sol": {
      "keccak256": "0x6f29e73b113fce75e54a41f248621b1adaa5ac4a3b189ef0903308bfa69165ca",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://abc7b25a74097434912f4940bfcd6cf9e312b0989279cb31a9a74d7ae6c09636",
        "dweb:/ipfs/QmPdttVeMBDBb8SMrga6YnKz3aiGDKMqo2MofCXtag4w4E"
      ]
    },
    "contracts/src/spaces/facets/membership/referral/MembershipReferralStorage.sol": {
      "keccak256": "0x607aabf7ae45b7f112165c1028e0fa2d18b86c6db78f4df4bdf39dd0f20973ea",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d61919ebf0ba0d3706cf2c3755b9d9920312c82bb1b83d0023f1cb09c2fc31d",
        "dweb:/ipfs/QmSQ1G7rRMf6tAuzdU6M5ydKetaSZXdN3UV33wNjvDrqAL"
      ]
    },
    "contracts/src/spaces/facets/roles/IRoles.sol": {
      "keccak256": "0x1c1c7dba102545ff4d555c1f6aa677cd75b089869d6ea3a7c1f447ffeaca3b1d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://923b68b8b6eb7711d91c602d7c43861aef6ee67d5198ba27d41790b4f2753ab8",
        "dweb:/ipfs/QmdzeevayVP8ZRT85sbWCVi2QUuBKiNmZHQjGRWC43Rx6N"
      ]
    },
    "contracts/src/spaces/facets/roles/RolesBase.sol": {
      "keccak256": "0x65d29ae38b7471242b4c54003a4e7d5d44050c25630d159f60bcc287589d0275",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c467728b199eb942af586768092dc094d949239a18735278c776124190b4df23",
        "dweb:/ipfs/Qmao9SQM9h582BNosWmQLjounxi2YinVmTQDxRzPdKguek"
      ]
    },
    "contracts/src/spaces/facets/roles/RolesStorage.sol": {
      "keccak256": "0x40f288a613e35cbc02aceb1d23f89af888f65538853f61cc1fcd25901b9bc4af",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://396b5e157c9a29adc94edc5d234f416a44e6e7c4588b1aaa0587bb04018705e9",
        "dweb:/ipfs/QmWDCQz555WbvZw7XxfkybE5dPfouc6rKxU5Zu1Gsuz1Zr"
      ]
    },
    "contracts/src/utils/StringSet.sol": {
      "keccak256": "0x3c9d29fdec8d96b627600dc69aa8e164c992162028d877df89c062da32b6e319",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ab4f8ad17edac234b55f2c5b5a45a2956d82d0b64f70e04350edd879d2f0d1e6",
        "dweb:/ipfs/QmeqwedjAGMjfgizTjspVi5eEojEe8S1ezJFLFafPcfAjK"
      ]
    },
    "contracts/src/utils/Validator.sol": {
      "keccak256": "0xb8d6d023395c2611e308cb09606dc9e49dce0d985a75f20572aeed590d738f50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://144807c8826c643f74c48e3589243ac4b05dffd0a00b861b75ce46451224be64",
        "dweb:/ipfs/QmazGzxM9owCyKTV1cY46PiMHXdApYJR221Lm9YMcn7J72"
      ]
    },
    "contracts/src/utils/interfaces/IWETH.sol": {
      "keccak256": "0xd274612ab96215dcdb6e3717a63e7a0f76c7facadff93b2b23ed278f6e7b3b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://12444da1f06a0fbe6d2d564d73d6d6bc58c09496af3aeea6988c3d3f9ee81c73",
        "dweb:/ipfs/QmTkpQ6cZmRYgvLUS4mqzLvFg5nabgQjpMnVK8JENboiA3"
      ]
    },
    "contracts/src/utils/libraries/BasisPoints.sol": {
      "keccak256": "0x797b0a1d3da51f4256c83b5d5c885b034df5bdff69c8dfa0fac9777cfa2f1d26",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://52ba0c85e5de8a7d76e2e4bcbccdaffa68e29281191ae1f889430a496ce5cf1c",
        "dweb:/ipfs/Qmd5bYypjF6gcJKKagdRpvAgV4LCs4iyn7KYdaLBWjjuHr"
      ]
    },
    "contracts/src/utils/libraries/CurrencyTransfer.sol": {
      "keccak256": "0x1c6b5b33831f8c5c02c49dff5ceac3ad1a6cdb74c988ebba72c36329ca704750",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://78122f27b67a5d3ebe95c4260dc972ab7be5c04b277cbd71a833dd74fbd23fa4",
        "dweb:/ipfs/QmU78EApEim92KMVtW69coFPZdhvbkhmYn6dW2zwqJKPBp"
      ]
    },
    "lib/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
      "license": "MIT",
      "urls": [
        "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
        "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
      ]
    },
    "lib/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
      "license": "MIT",
      "urls": [
        "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
        "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
      ]
    },
    "lib/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
      "license": "MIT",
      "urls": [
        "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
        "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
      ]
    },
    "lib/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
      "license": "MIT",
      "urls": [
        "bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
        "dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
      ]
    },
    "lib/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
      "license": "MIT",
      "urls": [
        "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
        "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
      ]
    },
    "lib/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
      "license": "MIT",
      "urls": [
        "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
        "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
      ]
    },
    "lib/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
      "license": "MIT",
      "urls": [
        "bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
        "dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
      ]
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "bytes",
            "name": "genesisMiniblock",
            "type": "bytes",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamAllocated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamAllocated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "lastMiniblockHash",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint64",
            "name": "lastMiniblockNum",
            "type": "uint64",
            "indexed": false
          },
          {
            "internalType": "string",
            "name": "reason",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamLastMiniblockUpdateFailed",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "lastMiniblockHash",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint64",
            "name": "lastMiniblockNum",
            "type": "uint64",
            "indexed": false
          },
          {
            "internalType": "bool",
            "name": "isSealed",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamLastMiniblockUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "bool",
            "name": "isAdded",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamPlacementUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]"
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "genesisMiniblock",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allocateStream"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]"
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allocateStream"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "start",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "stop",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getPaginatedStreams",
        "outputs": [
          {
            "internalType": "struct StreamWithId[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32",
                "name": "id",
                "type": "bytes32"
              },
              {
                "internalType": "struct Stream",
                "name": "stream",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "lastMiniblockHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "lastMiniblockNum",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "reserved0",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "flags",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "nodes",
                    "type": "address[]"
                  }
                ]
              }
            ]
          },
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStream",
        "outputs": [
          {
            "internalType": "struct Stream",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "reserved0",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "flags",
                "type": "uint64"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamCountOnNode",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamWithGenesis",
        "outputs": [
          {
            "internalType": "struct Stream",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "reserved0",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "flags",
                "type": "uint64"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              }
            ]
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamWithGenesisHash",
        "outputs": [
          {
            "internalType": "struct Stream",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "reserved0",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "flags",
                "type": "uint64"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              }
            ]
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isStream",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "placeStreamOnNode"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeStreamFromNode"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "lastMiniblockHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint64",
            "name": "lastMiniblockNum",
            "type": "uint64"
          },
          {
            "internalType": "bool",
            "name": "isSealed",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setStreamLastMiniblock"
      },
      {
        "inputs": [
          {
            "internalType": "struct SetMiniblock[]",
            "name": "miniblocks",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32",
                "name": "streamId",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "prevMiniBlockHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "bool",
                "name": "isSealed",
                "type": "bool"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setStreamLastMiniblockBatch"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "allocateStream(bytes32,address[],bytes32)": {
          "details": "Only callable by registered nodes",
          "params": {
            "genesisMiniblockHash": "The hash of the genesis miniblock",
            "nodes": "The list of nodes to place the stream on",
            "streamId": "The ID of the stream to allocate"
          }
        },
        "allocateStream(bytes32,address[],bytes32,bytes)": {
          "details": "Only callable by registered nodes and is succeeded by allocateStream(bytes32, address[], bytes32)",
          "params": {
            "genesisMiniblock": "The genesis miniblock data",
            "genesisMiniblockHash": "The hash of the genesis miniblock",
            "nodes": "The list of nodes to place the stream on",
            "streamId": "The ID of the stream to allocate"
          }
        },
        "getPaginatedStreams(uint256,uint256)": {
          "details": "Recommended range is 5000 streams to avoid gas limits",
          "params": {
            "start": "The starting index for pagination",
            "stop": "The ending index for pagination"
          },
          "returns": {
            "_0": "StreamWithId[] Array of streams with their IDs in the requested range",
            "_1": "bool True if this is the last page of results"
          }
        },
        "getStream(bytes32)": {
          "params": {
            "streamId": "The ID of the stream to get"
          },
          "returns": {
            "_0": "Stream The stream data"
          }
        },
        "getStreamCount()": {
          "returns": {
            "_0": "uint256 The total number of streams"
          }
        },
        "getStreamCountOnNode(address)": {
          "params": {
            "nodeAddress": "The address of the node to check"
          },
          "returns": {
            "_0": "uint256 The number of streams on the node"
          }
        },
        "getStreamWithGenesis(bytes32)": {
          "params": {
            "streamId": "The ID of the stream to get"
          },
          "returns": {
            "_0": "Stream The stream data",
            "_1": "bytes32 The genesis miniblock hash",
            "_2": "bytes The genesis miniblock data"
          }
        },
        "getStreamWithGenesisHash(bytes32)": {
          "params": {
            "streamId": "The ID of the stream to get"
          },
          "returns": {
            "_0": "Stream The stream data",
            "_1": "bytes32 The genesis miniblock hash"
          }
        },
        "isStream(bytes32)": {
          "params": {
            "streamId": "The ID of the stream to check"
          },
          "returns": {
            "_0": "bool True if the stream exists, false otherwise"
          }
        },
        "placeStreamOnNode(bytes32,address)": {
          "params": {
            "nodeAddress": "The address of the node to place the stream on",
            "streamId": "The ID of the stream to place"
          }
        },
        "removeStreamFromNode(bytes32,address)": {
          "params": {
            "nodeAddress": "The address of the node to remove the stream from",
            "streamId": "The ID of the stream to remove"
          }
        },
        "setStreamLastMiniblock(bytes32,bytes32,bytes32,uint64,bool)": {
          "details": "Only callable by registered nodes",
          "params": {
            "isSealed": "Whether to mark the stream as sealed",
            "lastMiniblockHash": "The hash of the new last miniblock",
            "lastMiniblockNum": "The number of the new last miniblock",
            "prevMiniblockHash": "The hash of the previous miniblock (currently unused)",
            "streamId": "The ID of the stream to update"
          }
        },
        "setStreamLastMiniblockBatch((bytes32,bytes32,bytes32,uint64,bool)[])": {
          "details": "Only callable by registered nodesThis function allows updating multiple streams' last miniblock data in a single transaction",
          "params": {
            "miniblocks": "Array of SetMiniblock structs containing stream IDs and their last miniblock information"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "allocateStream(bytes32,address[],bytes32)": {
          "notice": "Allocate a new stream in the registry"
        },
        "allocateStream(bytes32,address[],bytes32,bytes)": {
          "notice": "Allocate a new stream in the registry"
        },
        "getPaginatedStreams(uint256,uint256)": {
          "notice": "Get a paginated list of streams from the registry"
        },
        "getStream(bytes32)": {
          "notice": "Get a stream from the registry"
        },
        "getStreamCount()": {
          "notice": "Get the total number of streams in the registry"
        },
        "getStreamCountOnNode(address)": {
          "notice": "Get the number of streams placed on a specific node"
        },
        "getStreamWithGenesis(bytes32)": {
          "notice": "Get a stream and its genesis information from the registry"
        },
        "getStreamWithGenesisHash(bytes32)": {
          "notice": "Get a stream and its genesis information from the registry"
        },
        "isStream(bytes32)": {
          "notice": "Check if a stream exists in the registry"
        },
        "placeStreamOnNode(bytes32,address)": {
          "notice": "Place a stream on a specific node"
        },
        "removeStreamFromNode(bytes32,address)": {
          "notice": "Remove a stream from a specific node"
        },
        "setStreamLastMiniblock(bytes32,bytes32,bytes32,uint64,bool)": {
          "notice": "Update the last miniblock information for a stream"
        },
        "setStreamLastMiniblockBatch((bytes32,bytes32,bytes32,uint64,bool)[])": {
          "notice": "Set the last miniblock for multiple streams in a batch operation"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/river/registry/facets/stream/StreamRegistry.sol": "StreamRegistry"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/river/registry/facets/stream/IStreamRegistry.sol": {
      "keccak256": "0xc0a420360c35be7e19b72e96586cc2e101332c0d0eb791b11b07e0de68324553",
      "urls": [
        "bzz-raw://92511bdd7ab73a8eae06ea366312f4592dd79d5f2d43f6d624a085921d4cc723",
        "dweb:/ipfs/QmbqvDRDGVKeaqyqDyUw1C4kQa4fVDaNBioVmjLPKh882a"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/facets/stream/StreamRegistry.sol": {
      "keccak256": "0xa3237bed6c0b7ab10b430bee8f89501665569df81cd0c8034686331041a7d212",
      "urls": [
        "bzz-raw://ce60ec41e6f38ba877a76c6844a9fdd69f42b5f0bbeeda1de18073efdc448f48",
        "dweb:/ipfs/QmRC5WtWsmTjoD7h39myLetWPUePbJrKAmGFRTk6nCJ2R5"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/libraries/RegistryErrors.sol": {
      "keccak256": "0x411bd2bca08451c59880f46aa3ce0ac6b20a1cfa8a8836e4ce035fad57bce497",
      "urls": [
        "bzz-raw://7d8b0fff68a90994db10dd30f26f4f399027295152060b65fadaab76768f6501",
        "dweb:/ipfs/QmdJsGe2utFn1ju8YKkZpshVGNgUbfkkZP77LprQ43BcPP"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/libraries/RegistryStorage.sol": {
      "keccak256": "0xd45a126f3a7ce156824b019adf5c2832236421da770a02c38a1fa5e789411201",
      "urls": [
        "bzz-raw://6edc5efd37e99112a4f1ed8ca56d9f4034c36540bfbe3854b098b5b03cb5c9c4",
        "dweb:/ipfs/QmZKR5pkUVUzxizh6YdDFXenssUfKnJCD15RMgh1T74AcH"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
      "urls": [
        "bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
        "dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string",
            "indexed": false
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "NodeRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeStatusUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeUrlUpdated",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllNodeAddresses",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllNodes",
        "outputs": [
          {
            "internalType": "struct Node[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "enum NodeStatus",
                "name": "status",
                "type": "uint8"
              },
              {
                "internalType": "string",
                "name": "url",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "nodeAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getNode",
        "outputs": [
          {
            "internalType": "struct Node",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "enum NodeStatus",
                "name": "status",
                "type": "uint8"
              },
              {
                "internalType": "string",
                "name": "url",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "nodeAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getNodeCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isNode",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "registerNode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeNode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateNodeStatus"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateNodeUrl"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "getAllNodeAddresses()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        },
        "getAllNodes()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getAllNodeAddresses()": {
          "notice": "Return array containing all node addresses"
        },
        "getAllNodes()": {
          "notice": "Return array containing all nodes"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@prb/=node_modules/@prb/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/river/registry/facets/node/NodeRegistry.sol": "NodeRegistry"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/river/registry/facets/node/INodeRegistry.sol": {
      "keccak256": "0xf521b9a741e45f40098574a6e4f4e62a8e0b457fb053b57624463167691a8cdd",
      "urls": [
        "bzz-raw://97eb4ed98fa25f98f4d2150d6e0b4dc5ade7c88d8b934b786891fb37bf380ce3",
        "dweb:/ipfs/QmU9L2iJAKY6UnckhFAiq5Qw482DZzW4fiGVAJ6qkgPsrs"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/facets/node/NodeRegistry.sol": {
      "keccak256": "0x938e660fa4b107060b4b954fb4251b87de6f0724c948f73138cf2f8392615821",
      "urls": [
        "bzz-raw://7023efa8ae7526aa4650512b05c6cda9c575cea23393c0d25e63ec1c358e2261",
        "dweb:/ipfs/QmXH9Lvc4MBNwXnC6yUmmPxXNxoiDJzdZ2iCreDxSjZPch"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/libraries/RegistryErrors.sol": {
      "keccak256": "0x411bd2bca08451c59880f46aa3ce0ac6b20a1cfa8a8836e4ce035fad57bce497",
      "urls": [
        "bzz-raw://7d8b0fff68a90994db10dd30f26f4f399027295152060b65fadaab76768f6501",
        "dweb:/ipfs/QmdJsGe2utFn1ju8YKkZpshVGNgUbfkkZP77LprQ43BcPP"
      ],
      "license": "MIT"
    },
    "contracts/src/river/registry/libraries/RegistryStorage.sol": {
      "keccak256": "0xd45a126f3a7ce156824b019adf5c2832236421da770a02c38a1fa5e789411201",
      "urls": [
        "bzz-raw://6edc5efd37e99112a4f1ed8ca56d9f4034c36540bfbe3854b098b5b03cb5c9c4",
        "dweb:/ipfs/QmZKR5pkUVUzxizh6YdDFXenssUfKnJCD15RMgh1T74AcH"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
      "urls": [
        "bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
        "dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__AlreadyClaimed"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__CannotSetClaimConditions"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimConditionsNotInAscendingOrder"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimHasEnded"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimHasNotStarted"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__CurrencyNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ExceedsMaxClaimableSupply"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__InsufficientBalance"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__InvalidProof"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__MerkleRootNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__NoActiveClaimCondition"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__QuantityMustBeGreaterThanZero"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__RewardsDistributionNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__UnexpectedPenaltyBps"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_InInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_NotInInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_AlreadySupported"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_NotSupported"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "Ownable__NotOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Ownable__ZeroAddress"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ],
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_ClaimConditionAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "conditions",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ],
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_ClaimConditionsUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "claimer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_Claimed_And_Staked",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "claimer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_Claimed_WithPenalty",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Initialized",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rewardsDistribution",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "__DropFacet_init"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "addClaimCondition"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.Claim",
            "name": "claim",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "conditionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "bytes32[]",
                "name": "proof",
                "type": "bytes32[]"
              }
            ]
          },
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "claimAndStake",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.Claim",
            "name": "claim",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "conditionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "bytes32[]",
                "name": "proof",
                "type": "bytes32[]"
              }
            ]
          },
          {
            "internalType": "uint16",
            "name": "expectedPenaltyBps",
            "type": "uint16"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "claimWithPenalty",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getActiveClaimConditionId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getClaimConditionById",
        "outputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getClaimConditions",
        "outputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDepositIdByWallet",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getSupplyClaimedByWallet",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "conditions",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setClaimConditions"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addClaimCondition((address,uint40,uint40,uint16,uint256,uint256,bytes32))": {
          "params": {
            "condition": "The ClaimCondition struct defining the condition"
          }
        },
        "claimAndStake((uint256,address,uint256,bytes32[]),address,uint256,bytes)": {
          "params": {
            "claim": "The claim to process",
            "deadline": "The deadline for the transaction",
            "delegatee": "The address of the delegatee",
            "signature": "The signature of the delegatee"
          },
          "returns": {
            "_0": "The amount of tokens claimed"
          }
        },
        "claimWithPenalty((uint256,address,uint256,bytes32[]),uint16)": {
          "params": {
            "claim": "The claim to process",
            "expectedPenaltyBps": "The expected penalty in basis points"
          },
          "returns": {
            "amount": "The amount of tokens claimed"
          }
        },
        "getActiveClaimConditionId()": {
          "returns": {
            "_0": "The ID of the active claim condition"
          }
        },
        "getClaimConditionById(uint256)": {
          "params": {
            "conditionId": "The ID of the claim condition to retrieve"
          },
          "returns": {
            "condition": "The ClaimCondition struct for the specified ID"
          }
        },
        "getClaimConditions()": {
          "returns": {
            "_0": "An array of ClaimCondition structs"
          }
        },
        "getDepositIdByWallet(address,uint256)": {
          "params": {
            "account": "The address of the wallet to check",
            "conditionId": "The ID of the claim condition"
          },
          "returns": {
            "_0": "The deposit ID of the wallet for the specified condition"
          }
        },
        "getSupplyClaimedByWallet(address,uint256)": {
          "params": {
            "account": "The address of the wallet to check",
            "conditionId": "The ID of the claim condition"
          },
          "returns": {
            "_0": "The number of tokens claimed by the wallet for the specified condition"
          }
        },
        "setClaimConditions((address,uint40,uint40,uint16,uint256,uint256,bytes32)[])": {
          "params": {
            "conditions": "An array of ClaimCondition structs defining the conditions"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addClaimCondition((address,uint40,uint40,uint16,uint256,uint256,bytes32))": {
          "notice": "Adds a new claim condition"
        },
        "claimAndStake((uint256,address,uint256,bytes32[]),address,uint256,bytes)": {
          "notice": "Claims tokens and stakes them in the staking contract"
        },
        "claimWithPenalty((uint256,address,uint256,bytes32[]),uint16)": {
          "notice": "Claims tokens with a penalty"
        },
        "getActiveClaimConditionId()": {
          "notice": "Gets the ID of the currently active claim condition"
        },
        "getClaimConditionById(uint256)": {
          "notice": "Retrieves a specific claim condition by its ID"
        },
        "getClaimConditions()": {
          "notice": "Gets all claim conditions"
        },
        "getDepositIdByWallet(address,uint256)": {
          "notice": "Gets the deposit ID of a specific wallet for a given condition"
        },
        "getSupplyClaimedByWallet(address,uint256)": {
          "notice": "Gets the amount of tokens claimed by a specific wallet for a given condition"
        },
        "setClaimConditions((address,uint40,uint40,uint16,uint256,uint256,bytes32)[])": {
          "notice": "Sets the claim conditions for the drop"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@prb/=node_modules/@prb/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/airdrop/drop/DropFacet.sol": "DropFacet"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/airdrop/drop/DropFacet.sol": {
      "keccak256": "0x35c21c945ecb5e428ad92b07b9c594e9451f4c610263534c5358138142086be8",
      "urls": [
        "bzz-raw://8bfcd9828264d93954d9f8a94c9146a1645bf857766c38a65fb5ae8b4204b39d",
        "dweb:/ipfs/QmXwMVc644T1RYkBXcgSsuyEgrY48Fcgg5oHxXh9D2L6yW"
      ],
      "license": "MIT"
    },
    "contracts/src/airdrop/drop/DropFacetBase.sol": {
      "keccak256": "0xf57b8a78df44f575c7375f7bae2b78b6b192d8bd7daab9db28bf4ef44e55567e",
      "urls": [
        "bzz-raw://d84ccff79baf254ae6660bf9c8fdb73672301b12b6c5ab15ffd1a9fb29c8f040",
        "dweb:/ipfs/QmYCgEApJGc1kkmXauJnFAjGjryqkxGnBbMxuuyjG6exPW"
      ],
      "license": "MIT"
    },
    "contracts/src/airdrop/drop/DropStorage.sol": {
      "keccak256": "0x83654c8f327bb7ab60084b2efd9d778cc75f11415dd56d71bb5c579348073be0",
      "urls": [
        "bzz-raw://1e7b1eb61534f3e033818503aedcd792592b7271244258c11b7370da0ef422c9",
        "dweb:/ipfs/QmdJBBhSZ2ybfPkbUJLAq7rRLgHoDCAo7LQ6cisnr4gRFX"
      ],
      "license": "MIT"
    },
    "contracts/src/airdrop/drop/IDropFacet.sol": {
      "keccak256": "0x8f84573d733fb452b2bbef19ff87dde5b361ed7d6106b0b699cea806554bb801",
      "urls": [
        "bzz-raw://42889f32ac4ef470b4835af580ab9b39aee2d90af18ffb99422e344660637693",
        "dweb:/ipfs/QmVoHJdnYYijrR21rgfskQZYN1uCQqV6mguTLCTfKZcTjx"
      ],
      "license": "MIT"
    },
    "contracts/src/base/registry/facets/distribution/v2/IRewardsDistribution.sol": {
      "keccak256": "0x7c3e7dfd78b9131e69ddeac57b3923a004f7ddc7df4b2172f4496d29f226e1e6",
      "urls": [
        "bzz-raw://d262840d9ba5f389bf6f4ee89d03e10b831c99dd1bf50f26073d74b3860d5e91",
        "dweb:/ipfs/QmWSdFJHEvJDBEAoDg8j1SDJTf3eFk8k4YdgpidabVcNxm"
      ],
      "license": "MIT"
    },
    "contracts/src/base/registry/facets/distribution/v2/StakingRewards.sol": {
      "keccak256": "0x2df75e500cf40265b839bf589b2c577d6558454702e89b6011db075748ecf385",
      "urls": [
        "bzz-raw://194749888fcc16d4c6b08b56a366fea7b914ddbb5ba6c457fa001d41966e646e",
        "dweb:/ipfs/Qma7VRFdFsseUHSAzoVE75cM7bgz3hNUMM1LgtzmcCiSNH"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/interfaces/IWETH.sol": {
      "keccak256": "0xb0a9a284b02664b2ceda4ed7cc8e7dbdd39cc09292b65b97a3417ba5b1440dd0",
      "urls": [
        "bzz-raw://701edb4dbdb8ab50ed2fdb568cc0956c07184e1f4e7d63854efc158408fa72a5",
        "dweb:/ipfs/QmV58ikDDcTC92hGEuQKerfsygnPg5cwCVLuMh9R9uYXb6"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/BasisPoints.sol": {
      "keccak256": "0xfaa5790726afc20e29f2a00e67693a59ae85a045beaa95f8f58bcbcef01ed87b",
      "urls": [
        "bzz-raw://a2da5e15739fc7093ea7b935c6542f7c01d9c33843a3d1a1d8895db404f8160e",
        "dweb:/ipfs/QmYVUkSh3QX7u9rnKfqLeb9Rh8tko5Q3Gpry6KnhTRF58L"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/CurrencyTransfer.sol": {
      "keccak256": "0x0bb719b327dd2db2bf3c5737aa67142dba8794514ba54291ea55fd9466c47083",
      "urls": [
        "bzz-raw://ca5da86edc38c53c9a80bc9611d7cb72bc96b273f8eeb15e540fae9c8f6544a4",
        "dweb:/ipfs/QmSfyJpsi8Ksw3soevcB5SnmaDevTnmV5NSbQFMLtTmXLr"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/CustomRevert.sol": {
      "keccak256": "0xdf3d131cb19a367b2f2842caffe356e3b6437ff9e82f6519dd3b067630e0a059",
      "urls": [
        "bzz-raw://abaae9b8fa22a7b0f6fe0adafb4ec510f9b720ef281d98b900225c033c66f9b7",
        "dweb:/ipfs/QmNU1NRUCkXibWP7PzNyXvtrkgtpwcUEVP8uFzsWeDmBfK"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
      "urls": [
        "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
        "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5",
      "urls": [
        "bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23",
        "dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Errors.sol": {
      "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
      "urls": [
        "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
        "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
      "urls": [
        "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
        "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/Facet.sol": {
      "keccak256": "0xca7529809751c8c40aebd904b776f9ff28074b5a8a2df99f5bd1b588cb4b297c",
      "urls": [
        "bzz-raw://74bf56c81fcb3064f372bf9fb5ae895fd976d1cf8fd535c4f03397bdfabeb25e",
        "dweb:/ipfs/QmRmNLBWakunagRHRLXsEZAq6b2CyWM4voFrEjQn2tRGYY"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0xf8170e6977d685c218f65185478fbb9916e64f63aab1dcd195056438466f458a",
      "urls": [
        "bzz-raw://83ea3cf77f012eef93d10593e3beded36b449611063fd8dfbdb44e4346f87eb4",
        "dweb:/ipfs/QmVasL7QnxXEmiUsLJzpfig8717zLUhZfyQxiBbFGDEVVg"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IIntrospectionBase.sol": {
      "keccak256": "0x51e706ab1184a3a5b353b87cfee07d471b9a5ef93897022bbcd1085b39a0c762",
      "urls": [
        "bzz-raw://3df386912c5cc759faee161b7825b2014040d04bf06528e74f4d759f06f2eb19",
        "dweb:/ipfs/QmP5AnGGNY4gsV1ABJ3WaueAsAwJVQ229ZfGjGxW8rSbEL"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x35f27aa0a4b64673a2648110422f31de0c5a71c68df562eccb9c4f2a27ee6647",
      "urls": [
        "bzz-raw://2eb1f2ff2e2d7222bf8fe2cf7558a2e47925e3d4557208362b1f50e63cb43006",
        "dweb:/ipfs/QmNcJZSAEPreUy66tt5brPrauVnUb4tqvcxej5Uc4SZZWz"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x306f41ef86bc5050a28c1dbf855d3f6f623be4aebc0a0f96474dae85979f7763",
      "urls": [
        "bzz-raw://dbad6f8e6685690ae75f6c9066972a45400b45307245feab8990af18a4c38e91",
        "dweb:/ipfs/QmcTUqiSL1z2nwokpNNsXQkjVTaFdFJiM2exguZpPDDXEM"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/IERC173.sol": {
      "keccak256": "0x187fcc652a498aa18be665689a8496daad50511e6d7d926be0a210469325cdd8",
      "urls": [
        "bzz-raw://00c489916ad6e3ef2bfeb1d5f0230022cf776caab4b1372f0bf79b839810f1a2",
        "dweb:/ipfs/QmV2h8sDoHeyZKvbKeJBk6WaS5F87QaDMCq3iEymsbrmVh"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x272abaecc104d5f23d77a623cf1548620d24b0f447eb2a12144e27561ff489f2",
      "urls": [
        "bzz-raw://fcb8c20ff7346bdc5dba82e6680cc0ea64087460a12153e3b6c3416f6addf875",
        "dweb:/ipfs/QmfEEufJBzudSDekQteQkb3CzmnzUPT3GDhNgVpHNC9xaf"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0xda650482ce08c04110366cb01408aaabd01383d9c504b7cacfb2674aae688dcd",
      "urls": [
        "bzz-raw://694f42ffb353fccaa1eadf91dee3a3cee7253e3f357bcba2b175fd7be701e27e",
        "dweb:/ipfs/QmPxxVerATSYrNLp7snnSvNVsbLPm1wzHULhBbtR333eik"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/FixedPointMathLib.sol": {
      "keccak256": "0x08ab121a1074161b4470c48dadcd6ed71eeb33db1adbefe514771e03cf380fba",
      "urls": [
        "bzz-raw://b8d7a3b1dd013ee2b1f56d55b58f1d0b09ae3bcbe630e5a122f8998072c1ecad",
        "dweb:/ipfs/QmNRnBQ6me4s6xDeejdHRjn9Drb5MgcRtfwit9HbYhkJkk"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/MerkleProofLib.sol": {
      "keccak256": "0x36e0da7695b2a2316db2ee41192cddb9327394920e38ee3fadea2308d796fbd2",
      "urls": [
        "bzz-raw://c4bce2238416b5403c7ea0a94c502aa145ee54f3a9658f12da6810ab2b0daa20",
        "dweb:/ipfs/QmZwif5HQYETZbG8jX9QBwgUWtJXXhTxCajzyxv4xVLcsa"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/SafeCastLib.sol": {
      "keccak256": "0x184c2be02a160a07f7e27fea5753d878c5015c0632faa115ed2f4e90614df284",
      "urls": [
        "bzz-raw://c721441b505ec68ecfcc08cf8019342f6f304e94165af3e02db726377de2055a",
        "dweb:/ipfs/Qmcwe7wcjeGs7px92YR4XCFB6YS1x8T1Aq9FoDC7LKC4BA"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/SafeTransferLib.sol": {
      "keccak256": "0xde0b5b7342367347c95b39a4be48263a63334c67d9923992764038a169d4bcc3",
      "urls": [
        "bzz-raw://b4680336a9617d89cc2e89d408426cc1f1dfccb365206a036b8345b2c5240333",
        "dweb:/ipfs/QmRYXk7Z5jsHPCwMi6pjUbKFbQwrrQfYVAY69CpV46BxKH"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
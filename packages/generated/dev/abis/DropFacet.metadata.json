{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__AlreadyClaimed"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__CannotSetClaimConditions"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimConditionsNotInAscendingOrder"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimHasEnded"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ClaimHasNotStarted"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__CurrencyNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__ExceedsMaxClaimableSupply"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__InsufficientBalance"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__InvalidProof"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__MerkleRootNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__NoActiveClaimCondition"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__QuantityMustBeGreaterThanZero"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__RewardsDistributionNotSet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DropFacet__UnexpectedPenaltyBps"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_InInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_NotInInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_AlreadySupported"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_NotSupported"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "Ownable__NotOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Ownable__ZeroAddress"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ],
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_ClaimConditionAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "conditions",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ],
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_ClaimConditionsUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "claimer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_Claimed_And_Staked",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "claimer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DropFacet_Claimed_WithPenalty",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Initialized",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rewardsDistribution",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "__DropFacet_init"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "addClaimCondition"
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.Claim",
            "name": "claim",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "conditionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "bytes32[]",
                "name": "proof",
                "type": "bytes32[]"
              }
            ]
          },
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "claimAndStake",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.Claim",
            "name": "claim",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "conditionId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "bytes32[]",
                "name": "proof",
                "type": "bytes32[]"
              }
            ]
          },
          {
            "internalType": "uint16",
            "name": "expectedPenaltyBps",
            "type": "uint16"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "claimWithPenalty",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getActiveClaimConditionId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getClaimConditionById",
        "outputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition",
            "name": "condition",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getClaimConditions",
        "outputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDepositIdByWallet",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "conditionId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getSupplyClaimedByWallet",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IDropFacetBase.ClaimCondition[]",
            "name": "conditions",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "uint40",
                "name": "startTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "endTimestamp",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "penaltyBps",
                "type": "uint16"
              },
              {
                "internalType": "uint256",
                "name": "maxClaimableSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supplyClaimed",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setClaimConditions"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addClaimCondition((address,uint40,uint40,uint16,uint256,uint256,bytes32))": {
          "params": {
            "condition": "The ClaimCondition struct defining the condition"
          }
        },
        "claimAndStake((uint256,address,uint256,bytes32[]),address,uint256,bytes)": {
          "params": {
            "claim": "The claim to process",
            "deadline": "The deadline for the transaction",
            "delegatee": "The address of the delegatee",
            "signature": "The signature of the delegatee"
          },
          "returns": {
            "_0": "The amount of tokens claimed"
          }
        },
        "claimWithPenalty((uint256,address,uint256,bytes32[]),uint16)": {
          "params": {
            "claim": "The claim to process",
            "expectedPenaltyBps": "The expected penalty in basis points"
          },
          "returns": {
            "amount": "The amount of tokens claimed"
          }
        },
        "getActiveClaimConditionId()": {
          "returns": {
            "_0": "The ID of the active claim condition"
          }
        },
        "getClaimConditionById(uint256)": {
          "params": {
            "conditionId": "The ID of the claim condition to retrieve"
          },
          "returns": {
            "condition": "The ClaimCondition struct for the specified ID"
          }
        },
        "getClaimConditions()": {
          "returns": {
            "_0": "An array of ClaimCondition structs"
          }
        },
        "getDepositIdByWallet(address,uint256)": {
          "params": {
            "account": "The address of the wallet to check",
            "conditionId": "The ID of the claim condition"
          },
          "returns": {
            "_0": "The deposit ID of the wallet for the specified condition"
          }
        },
        "getSupplyClaimedByWallet(address,uint256)": {
          "params": {
            "account": "The address of the wallet to check",
            "conditionId": "The ID of the claim condition"
          },
          "returns": {
            "_0": "The number of tokens claimed by the wallet for the specified condition"
          }
        },
        "setClaimConditions((address,uint40,uint40,uint16,uint256,uint256,bytes32)[])": {
          "params": {
            "conditions": "An array of ClaimCondition structs defining the conditions"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addClaimCondition((address,uint40,uint40,uint16,uint256,uint256,bytes32))": {
          "notice": "Adds a new claim condition"
        },
        "claimAndStake((uint256,address,uint256,bytes32[]),address,uint256,bytes)": {
          "notice": "Claims tokens and stakes them in the staking contract"
        },
        "claimWithPenalty((uint256,address,uint256,bytes32[]),uint16)": {
          "notice": "Claims tokens with a penalty"
        },
        "getActiveClaimConditionId()": {
          "notice": "Gets the ID of the currently active claim condition"
        },
        "getClaimConditionById(uint256)": {
          "notice": "Retrieves a specific claim condition by its ID"
        },
        "getClaimConditions()": {
          "notice": "Gets all claim conditions"
        },
        "getDepositIdByWallet(address,uint256)": {
          "notice": "Gets the deposit ID of a specific wallet for a given condition"
        },
        "getSupplyClaimedByWallet(address,uint256)": {
          "notice": "Gets the amount of tokens claimed by a specific wallet for a given condition"
        },
        "setClaimConditions((address,uint40,uint40,uint16,uint256,uint256,bytes32)[])": {
          "notice": "Sets the claim conditions for the drop"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "base64/=lib/base64/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/tokens/drop/DropFacet.sol": "DropFacet"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/base/registry/facets/distribution/v2/IRewardsDistribution.sol": {
      "keccak256": "0x9be380f5c5198548056aad8f3bc33cec7dec20988ae6283b8a82033c8de9a45f",
      "urls": [
        "bzz-raw://727bbef13ff5d5609b1aca36e14c10f16afc2de9b5511f9cbe66e3636c6a1052",
        "dweb:/ipfs/QmW3QKqcGnJ1enyLeYW9curEgct6TwP8H5brFuNZjEMTEM"
      ],
      "license": "MIT"
    },
    "contracts/src/base/registry/facets/distribution/v2/StakingRewards.sol": {
      "keccak256": "0x2df75e500cf40265b839bf589b2c577d6558454702e89b6011db075748ecf385",
      "urls": [
        "bzz-raw://194749888fcc16d4c6b08b56a366fea7b914ddbb5ba6c457fa001d41966e646e",
        "dweb:/ipfs/Qma7VRFdFsseUHSAzoVE75cM7bgz3hNUMM1LgtzmcCiSNH"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0x931702541a5e4a2756665e53baf1b04aa0418d5a9c635e519058905e21ae0c57",
      "urls": [
        "bzz-raw://b785043acac69be2d2545bc4492b2c08b6e931a53737f8508baf3f98c8743863",
        "dweb:/ipfs/QmeLzqURWDmXHJftmMXRsywdJw96CNDB9DQmgTpG1woYvc"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0xf8170e6977d685c218f65185478fbb9916e64f63aab1dcd195056438466f458a",
      "urls": [
        "bzz-raw://83ea3cf77f012eef93d10593e3beded36b449611063fd8dfbdb44e4346f87eb4",
        "dweb:/ipfs/QmVasL7QnxXEmiUsLJzpfig8717zLUhZfyQxiBbFGDEVVg"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/introspection/IIntrospectionBase.sol": {
      "keccak256": "0x51e706ab1184a3a5b353b87cfee07d471b9a5ef93897022bbcd1085b39a0c762",
      "urls": [
        "bzz-raw://3df386912c5cc759faee161b7825b2014040d04bf06528e74f4d759f06f2eb19",
        "dweb:/ipfs/QmP5AnGGNY4gsV1ABJ3WaueAsAwJVQ229ZfGjGxW8rSbEL"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x35f27aa0a4b64673a2648110422f31de0c5a71c68df562eccb9c4f2a27ee6647",
      "urls": [
        "bzz-raw://2eb1f2ff2e2d7222bf8fe2cf7558a2e47925e3d4557208362b1f50e63cb43006",
        "dweb:/ipfs/QmNcJZSAEPreUy66tt5brPrauVnUb4tqvcxej5Uc4SZZWz"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x306f41ef86bc5050a28c1dbf855d3f6f623be4aebc0a0f96474dae85979f7763",
      "urls": [
        "bzz-raw://dbad6f8e6685690ae75f6c9066972a45400b45307245feab8990af18a4c38e91",
        "dweb:/ipfs/QmcTUqiSL1z2nwokpNNsXQkjVTaFdFJiM2exguZpPDDXEM"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0x677cebaa56ee33950d04ba5baef02188da026beb7cf669bdf580410cb1f1c303",
      "urls": [
        "bzz-raw://d5be56219a4ab8d9709db7ffb74c73ee1be268b8f77308ef7a72d8f2820fb30b",
        "dweb:/ipfs/QmeTuAZMwRf3uRHMtHEd7M7LvGyRAEmoCikF4Pb6dCAKXd"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x272abaecc104d5f23d77a623cf1548620d24b0f447eb2a12144e27561ff489f2",
      "urls": [
        "bzz-raw://fcb8c20ff7346bdc5dba82e6680cc0ea64087460a12153e3b6c3416f6addf875",
        "dweb:/ipfs/QmfEEufJBzudSDekQteQkb3CzmnzUPT3GDhNgVpHNC9xaf"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0xda650482ce08c04110366cb01408aaabd01383d9c504b7cacfb2674aae688dcd",
      "urls": [
        "bzz-raw://694f42ffb353fccaa1eadf91dee3a3cee7253e3f357bcba2b175fd7be701e27e",
        "dweb:/ipfs/QmPxxVerATSYrNLp7snnSvNVsbLPm1wzHULhBbtR333eik"
      ],
      "license": "MIT"
    },
    "contracts/src/tokens/drop/DropFacet.sol": {
      "keccak256": "0xde5be08a9eeb67afdd3702680efe901fda8c2baece3104b851deec5211a851c4",
      "urls": [
        "bzz-raw://e8407ea3a67e99ad3936d4548cfe7615ffaa6ebd9cbf6d295c547f7a5f8dfacb",
        "dweb:/ipfs/QmZB6HNbUj1SWkDZvc6UfX23AMsRXdnD3s41zDPZ7Saiu1"
      ],
      "license": "MIT"
    },
    "contracts/src/tokens/drop/DropFacetBase.sol": {
      "keccak256": "0x6880de1904eec79b94cbc4563d92e93e624da5a91e5cc873a14c4e22fee70f5d",
      "urls": [
        "bzz-raw://43ff704ff00b67761a28989934cab256991bb1cdb548c8c3a1145b868ac93549",
        "dweb:/ipfs/QmVQDrQ72b1Qr7QMmQitvSrKtuPy4WPURkiNCy8ye1U2RU"
      ],
      "license": "MIT"
    },
    "contracts/src/tokens/drop/DropStorage.sol": {
      "keccak256": "0x83654c8f327bb7ab60084b2efd9d778cc75f11415dd56d71bb5c579348073be0",
      "urls": [
        "bzz-raw://1e7b1eb61534f3e033818503aedcd792592b7271244258c11b7370da0ef422c9",
        "dweb:/ipfs/QmdJBBhSZ2ybfPkbUJLAq7rRLgHoDCAo7LQ6cisnr4gRFX"
      ],
      "license": "MIT"
    },
    "contracts/src/tokens/drop/IDropFacet.sol": {
      "keccak256": "0x8f84573d733fb452b2bbef19ff87dde5b361ed7d6106b0b699cea806554bb801",
      "urls": [
        "bzz-raw://42889f32ac4ef470b4835af580ab9b39aee2d90af18ffb99422e344660637693",
        "dweb:/ipfs/QmVoHJdnYYijrR21rgfskQZYN1uCQqV6mguTLCTfKZcTjx"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/interfaces/IWETH.sol": {
      "keccak256": "0xb0a9a284b02664b2ceda4ed7cc8e7dbdd39cc09292b65b97a3417ba5b1440dd0",
      "urls": [
        "bzz-raw://701edb4dbdb8ab50ed2fdb568cc0956c07184e1f4e7d63854efc158408fa72a5",
        "dweb:/ipfs/QmV58ikDDcTC92hGEuQKerfsygnPg5cwCVLuMh9R9uYXb6"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/BasisPoints.sol": {
      "keccak256": "0xfaa5790726afc20e29f2a00e67693a59ae85a045beaa95f8f58bcbcef01ed87b",
      "urls": [
        "bzz-raw://a2da5e15739fc7093ea7b935c6542f7c01d9c33843a3d1a1d8895db404f8160e",
        "dweb:/ipfs/QmYVUkSh3QX7u9rnKfqLeb9Rh8tko5Q3Gpry6KnhTRF58L"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/CurrencyTransfer.sol": {
      "keccak256": "0x0bb719b327dd2db2bf3c5737aa67142dba8794514ba54291ea55fd9466c47083",
      "urls": [
        "bzz-raw://ca5da86edc38c53c9a80bc9611d7cb72bc96b273f8eeb15e540fae9c8f6544a4",
        "dweb:/ipfs/QmSfyJpsi8Ksw3soevcB5SnmaDevTnmV5NSbQFMLtTmXLr"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/CustomRevert.sol": {
      "keccak256": "0xdf3d131cb19a367b2f2842caffe356e3b6437ff9e82f6519dd3b067630e0a059",
      "urls": [
        "bzz-raw://abaae9b8fa22a7b0f6fe0adafb4ec510f9b720ef281d98b900225c033c66f9b7",
        "dweb:/ipfs/QmNU1NRUCkXibWP7PzNyXvtrkgtpwcUEVP8uFzsWeDmBfK"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
      "urls": [
        "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
        "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
      "urls": [
        "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
        "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
      "urls": [
        "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
        "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/FixedPointMathLib.sol": {
      "keccak256": "0x3b2d21667478a864bf8b7c691986048c05f4c84712139d7b5175b6017874d3f0",
      "urls": [
        "bzz-raw://31ba5fd2e10d53a655b1f1af58ec40e831b84d1731dc6fefacf8097be0de8919",
        "dweb:/ipfs/QmQucazZQwU8Qv26wYRXy4ME1XEqZHCF5Gbc9VcgdU4d5S"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/MerkleProofLib.sol": {
      "keccak256": "0x36e0da7695b2a2316db2ee41192cddb9327394920e38ee3fadea2308d796fbd2",
      "urls": [
        "bzz-raw://c4bce2238416b5403c7ea0a94c502aa145ee54f3a9658f12da6810ab2b0daa20",
        "dweb:/ipfs/QmZwif5HQYETZbG8jX9QBwgUWtJXXhTxCajzyxv4xVLcsa"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/SafeCastLib.sol": {
      "keccak256": "0xd5867f226bf7181059e9c274de7dbb35fd159893f95ae1c64dcdcae92f289175",
      "urls": [
        "bzz-raw://477e3b75e2e1ae7ab11ac889cb486fcb425e9bd9e268c5711e80807201dcddfb",
        "dweb:/ipfs/Qmc3GT4xirfmQU7vsKrWcyzfDjEEkC8sYZbxcSusXJEyBx"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/SafeTransferLib.sol": {
      "keccak256": "0x583f47701d9b47bb3ef80fcabbbd62fbb58a01733b7a57e19658b4b02468883a",
      "urls": [
        "bzz-raw://2523bfac005e21ef9963fdb3c08b2c61824e2b5ce2f53d1a1828b01ed995217c",
        "dweb:/ipfs/QmbBjVG9tZyeZSQH4m5GUzNBwo2iuvLoZYbmhT4gxnJc4J"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
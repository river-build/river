{"abi":[{"type":"function","name":"explicitOwnershipOf","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IERC721ABase.TokenOwnership","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"startTimestamp","type":"uint64","internalType":"uint64"},{"name":"burned","type":"bool","internalType":"bool"},{"name":"extraData","type":"uint24","internalType":"uint24"}]}],"stateMutability":"view"},{"type":"function","name":"explicitOwnershipsOf","inputs":[{"name":"tokenIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IERC721ABase.TokenOwnership[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"startTimestamp","type":"uint64","internalType":"uint64"},{"name":"burned","type":"bool","internalType":"bool"},{"name":"extraData","type":"uint24","internalType":"uint24"}]}],"stateMutability":"view"},{"type":"function","name":"tokensOfOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"tokensOfOwnerIn","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"start","type":"uint256","internalType":"uint256"},{"name":"stop","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"ConsecutiveTransfer","inputs":[{"name":"fromTokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"toTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"ApprovalCallerNotOwnerNorApproved","inputs":[]},{"type":"error","name":"ApprovalQueryForNonexistentToken","inputs":[]},{"type":"error","name":"BalanceQueryForZeroAddress","inputs":[]},{"type":"error","name":"InvalidQueryRange","inputs":[]},{"type":"error","name":"MintERC2309QuantityExceedsLimit","inputs":[]},{"type":"error","name":"MintToZeroAddress","inputs":[]},{"type":"error","name":"MintZeroQuantity","inputs":[]},{"type":"error","name":"OwnerQueryForNonexistentToken","inputs":[]},{"type":"error","name":"OwnershipNotInitializedForExtraData","inputs":[]},{"type":"error","name":"TransferCallerNotOwnerNorApproved","inputs":[]},{"type":"error","name":"TransferFromIncorrectOwner","inputs":[]},{"type":"error","name":"TransferToNonERC721ReceiverImplementer","inputs":[]},{"type":"error","name":"TransferToZeroAddress","inputs":[]},{"type":"error","name":"URIQueryForNonexistentToken","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"explicitOwnershipOf(uint256)":"c23dc68f","explicitOwnershipsOf(uint256[])":"5bbb2177","tokensOfOwner(address)":"8462151c","tokensOfOwnerIn(address,uint256,uint256)":"99a2557a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721ABase.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721ABase.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721AQueryable.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol\":\"IERC721AQueryable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/@openzeppelin/\",\":@prb/math/=lib/@prb/math/src/\",\":@prb/test/=lib/@prb/test/src/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":base64/=lib/base64/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=lib/hardhat-deploy/\"]},\"sources\":{\"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol\":{\"keccak256\":\"0xb57dee608d37c98c32ac38fa3c84e77f5962cf39a0697815ad209edf55593782\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://092750f101ae80c5bace9fd53ae87547a0aac6109cd58290609acd2ef489ce9d\",\"dweb:/ipfs/QmREM18vUEQmcmnTSyR4XxHB9Ykqomc9RuCFZcWNiovgbz\"]},\"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol\":{\"keccak256\":\"0x1dd54f0fedecdaf54c91dd4fffbe1a97a8df67a46018e6f8155c43cdc38195e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8256f5e7342e2e568e243dc8f693f3214d4044deaaf7bc07ee64805049ddf73\",\"dweb:/ipfs/QmcgGigs9pb5xCSqXHZhU1vcaZFRAu4z2jk2wbL98jKSaQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ApprovalCallerNotOwnerNorApproved"},{"inputs":[],"type":"error","name":"ApprovalQueryForNonexistentToken"},{"inputs":[],"type":"error","name":"BalanceQueryForZeroAddress"},{"inputs":[],"type":"error","name":"InvalidQueryRange"},{"inputs":[],"type":"error","name":"MintERC2309QuantityExceedsLimit"},{"inputs":[],"type":"error","name":"MintToZeroAddress"},{"inputs":[],"type":"error","name":"MintZeroQuantity"},{"inputs":[],"type":"error","name":"OwnerQueryForNonexistentToken"},{"inputs":[],"type":"error","name":"OwnershipNotInitializedForExtraData"},{"inputs":[],"type":"error","name":"TransferCallerNotOwnerNorApproved"},{"inputs":[],"type":"error","name":"TransferFromIncorrectOwner"},{"inputs":[],"type":"error","name":"TransferToNonERC721ReceiverImplementer"},{"inputs":[],"type":"error","name":"TransferToZeroAddress"},{"inputs":[],"type":"error","name":"URIQueryForNonexistentToken"},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"approved","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"uint256","name":"fromTokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"toTokenId","type":"uint256","indexed":false},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true}],"type":"event","name":"ConsecutiveTransfer","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"explicitOwnershipOf","outputs":[{"internalType":"struct IERC721ABase.TokenOwnership","name":"","type":"tuple","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint64","name":"startTimestamp","type":"uint64"},{"internalType":"bool","name":"burned","type":"bool"},{"internalType":"uint24","name":"extraData","type":"uint24"}]}]},{"inputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"explicitOwnershipsOf","outputs":[{"internalType":"struct IERC721ABase.TokenOwnership[]","name":"","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint64","name":"startTimestamp","type":"uint64"},{"internalType":"bool","name":"burned","type":"bool"},{"internalType":"uint24","name":"extraData","type":"uint24"}]}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"tokensOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"stop","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokensOfOwnerIn","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"explicitOwnershipOf(uint256)":{"details":"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"},"explicitOwnershipsOf(uint256[])":{"details":"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"},"tokensOfOwner(address)":{"details":"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."},"tokensOfOwnerIn(address,uint256,uint256)":{"details":"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/@openzeppelin/","@prb/math/=lib/@prb/math/src/","@prb/test/=lib/@prb/test/src/","account-abstraction/=lib/account-abstraction/contracts/","base64/=lib/base64/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","hardhat-deploy/=lib/hardhat-deploy/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol":"IERC721AQueryable"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol":{"keccak256":"0xb57dee608d37c98c32ac38fa3c84e77f5962cf39a0697815ad209edf55593782","urls":["bzz-raw://092750f101ae80c5bace9fd53ae87547a0aac6109cd58290609acd2ef489ce9d","dweb:/ipfs/QmREM18vUEQmcmnTSyR4XxHB9Ykqomc9RuCFZcWNiovgbz"],"license":"MIT"},"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol":{"keccak256":"0x1dd54f0fedecdaf54c91dd4fffbe1a97a8df67a46018e6f8155c43cdc38195e4","urls":["bzz-raw://b8256f5e7342e2e568e243dc8f693f3214d4044deaaf7bc07ee64805049ddf73","dweb:/ipfs/QmcgGigs9pb5xCSqXHZhU1vcaZFRAu4z2jk2wbL98jKSaQ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol","id":21740,"exportedSymbols":{"IERC721ABase":[21198],"IERC721AQueryable":[21739]},"nodeType":"SourceUnit","src":"32:2315:140","nodes":[{"id":21688,"nodeType":"PragmaDirective","src":"32:24:140","nodes":[],"literals":["solidity","^","0.8",".23"]},{"id":21690,"nodeType":"ImportDirective","src":"72:45:140","nodes":[],"absolutePath":"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol","file":"../IERC721A.sol","nameLocation":"-1:-1:-1","scope":21740,"sourceUnit":21311,"symbolAliases":[{"foreign":{"id":21689,"name":"IERC721ABase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21198,"src":"80:12:140","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":21739,"nodeType":"ContractDefinition","src":"194:2152:140","nodes":[{"id":21696,"nodeType":"ErrorDefinition","src":"300:26:140","nodes":[],"documentation":{"id":21694,"nodeType":"StructuredDocumentation","src":"242:55:140","text":" Invalid query range (`start` >= `stop`)."},"errorSelector":"32c1995a","name":"InvalidQueryRange","nameLocation":"306:17:140","parameters":{"id":21695,"nodeType":"ParameterList","parameters":[],"src":"323:2:140"}},{"id":21705,"nodeType":"FunctionDefinition","src":"1014:100:140","nodes":[],"documentation":{"id":21697,"nodeType":"StructuredDocumentation","src":"330:681:140","text":" @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n If the `tokenId` is out of bounds:\n - `addr = address(0)`\n - `startTimestamp = 0`\n - `burned = false`\n - `extraData = 0`\n If the `tokenId` is burned:\n - `addr = <Address of owner before token was burned>`\n - `startTimestamp = <Timestamp when token was burned>`\n - `burned = true`\n - `extraData = <Extra data when token was burned>`\n Otherwise:\n - `addr = <Address of owner>`\n - `startTimestamp = <Timestamp of start of ownership>`\n - `burned = false`\n - `extraData = <Extra data at start of ownership>`"},"functionSelector":"c23dc68f","implemented":false,"kind":"function","modifiers":[],"name":"explicitOwnershipOf","nameLocation":"1023:19:140","parameters":{"id":21700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21699,"mutability":"mutable","name":"tokenId","nameLocation":"1056:7:140","nodeType":"VariableDeclaration","scope":21705,"src":"1048:15:140","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21698,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:25:140"},"returnParameters":{"id":21704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21705,"src":"1091:21:140","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$21120_memory_ptr","typeString":"struct IERC721ABase.TokenOwnership"},"typeName":{"id":21702,"nodeType":"UserDefinedTypeName","pathNode":{"id":21701,"name":"TokenOwnership","nameLocations":["1091:14:140"],"nodeType":"IdentifierPath","referencedDeclaration":21120,"src":"1091:14:140"},"referencedDeclaration":21120,"src":"1091:14:140","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$21120_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership"}},"visibility":"internal"}],"src":"1090:23:140"},"scope":21739,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":21716,"nodeType":"FunctionDefinition","src":"1257:113:140","nodes":[],"documentation":{"id":21706,"nodeType":"StructuredDocumentation","src":"1118:136:140","text":" @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n See {ERC721AQueryable-explicitOwnershipOf}"},"functionSelector":"5bbb2177","implemented":false,"kind":"function","modifiers":[],"name":"explicitOwnershipsOf","nameLocation":"1266:20:140","parameters":{"id":21710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21709,"mutability":"mutable","name":"tokenIds","nameLocation":"1309:8:140","nodeType":"VariableDeclaration","scope":21716,"src":"1292:25:140","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":21707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":21708,"nodeType":"ArrayTypeName","src":"1292:9:140","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1286:35:140"},"returnParameters":{"id":21715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21716,"src":"1345:23:140","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenOwnership_$21120_memory_ptr_$dyn_memory_ptr","typeString":"struct IERC721ABase.TokenOwnership[]"},"typeName":{"baseType":{"id":21712,"nodeType":"UserDefinedTypeName","pathNode":{"id":21711,"name":"TokenOwnership","nameLocations":["1345:14:140"],"nodeType":"IdentifierPath","referencedDeclaration":21120,"src":"1345:14:140"},"referencedDeclaration":21120,"src":"1345:14:140","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$21120_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership"}},"id":21713,"nodeType":"ArrayTypeName","src":"1345:16:140","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenOwnership_$21120_storage_$dyn_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership[]"}},"visibility":"internal"}],"src":"1344:25:140"},"scope":21739,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":21729,"nodeType":"FunctionDefinition","src":"1718:126:140","nodes":[],"documentation":{"id":21717,"nodeType":"StructuredDocumentation","src":"1374:341:140","text":" @dev Returns an array of token IDs owned by `owner`,\n in the range [`start`, `stop`)\n (i.e. `start <= tokenId < stop`).\n This function allows for tokens to be queried if the collection\n grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n Requirements:\n - `start < stop`"},"functionSelector":"99a2557a","implemented":false,"kind":"function","modifiers":[],"name":"tokensOfOwnerIn","nameLocation":"1727:15:140","parameters":{"id":21724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21719,"mutability":"mutable","name":"owner","nameLocation":"1756:5:140","nodeType":"VariableDeclaration","scope":21729,"src":"1748:13:140","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21718,"name":"address","nodeType":"ElementaryTypeName","src":"1748:7:140","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":21721,"mutability":"mutable","name":"start","nameLocation":"1775:5:140","nodeType":"VariableDeclaration","scope":21729,"src":"1767:13:140","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21720,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":21723,"mutability":"mutable","name":"stop","nameLocation":"1794:4:140","nodeType":"VariableDeclaration","scope":21729,"src":"1786:12:140","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1786:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1742:60:140"},"returnParameters":{"id":21728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21729,"src":"1826:16:140","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":21725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1826:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":21726,"nodeType":"ArrayTypeName","src":"1826:9:140","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1825:18:140"},"scope":21739,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":21738,"nodeType":"FunctionDefinition","src":"2257:87:140","nodes":[],"documentation":{"id":21730,"nodeType":"StructuredDocumentation","src":"1848:406:140","text":" @dev Returns an array of token IDs owned by `owner`.\n This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n It is meant to be called off-chain.\n See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n multiple smaller scans if the collection is large enough to cause\n an out-of-gas error (10K collections should be fine)."},"functionSelector":"8462151c","implemented":false,"kind":"function","modifiers":[],"name":"tokensOfOwner","nameLocation":"2266:13:140","parameters":{"id":21733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21732,"mutability":"mutable","name":"owner","nameLocation":"2293:5:140","nodeType":"VariableDeclaration","scope":21738,"src":"2285:13:140","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21731,"name":"address","nodeType":"ElementaryTypeName","src":"2285:7:140","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2279:23:140"},"returnParameters":{"id":21737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21738,"src":"2326:16:140","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":21734,"name":"uint256","nodeType":"ElementaryTypeName","src":"2326:7:140","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":21735,"nodeType":"ArrayTypeName","src":"2326:9:140","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2325:18:140"},"scope":21739,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":21692,"name":"IERC721ABase","nameLocations":["225:12:140"],"nodeType":"IdentifierPath","referencedDeclaration":21198,"src":"225:12:140"},"id":21693,"nodeType":"InheritanceSpecifier","src":"225:12:140"}],"canonicalName":"IERC721AQueryable","contractDependencies":[],"contractKind":"interface","documentation":{"id":21691,"nodeType":"StructuredDocumentation","src":"147:46:140","text":" @dev Interface of ERC721AQueryable."},"fullyImplemented":false,"linearizedBaseContracts":[21739,21198],"name":"IERC721AQueryable","nameLocation":"204:17:140","scope":21740,"usedErrors":[21123,21126,21129,21132,21135,21138,21141,21144,21147,21150,21153,21156,21159,21696],"usedEvents":[21168,21177,21186,21197]}],"license":"MIT"},"id":140}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_InsufficientFunds"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_InsufficientNumberOfNodes"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_InvalidNodeOperator"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_InvalidOperator"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_NoPendingRequests"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_NoRefundsAvailable"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_NodeAlreadyRegistered"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_NodeNotRegistered"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EntitlementChecker_OperatorNotActive"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callerAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "contractAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "address[]",
            "name": "selectedNodes",
            "type": "address[]",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "EntitlementCheckRequested",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "walletAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "spaceAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "resolverAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "address[]",
            "name": "selectedNodes",
            "type": "address[]",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "EntitlementCheckRequestedV2",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "NodeRegistered",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "NodeUnregistered",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getNodeAtIndex",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getNodeCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getNodesByOperator",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "count",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getRandomNodes",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isValidNode",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "registerNode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callerAddress",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "requestEntitlementCheck"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "walletAddress",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "requestId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "extraData",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "requestEntitlementCheckV2"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "unregisterNode"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "getNodeAtIndex(uint256)": {
          "params": {
            "index": "The index of the node to retrieve"
          },
          "returns": {
            "_0": "address The address of the node at the given index"
          }
        },
        "getNodeCount()": {
          "returns": {
            "_0": "uint256 The count of registered nodes"
          }
        },
        "getNodesByOperator(address)": {
          "params": {
            "operator": "The address of the operator"
          },
          "returns": {
            "_0": "address[] Array of node addresses registered to the operator"
          }
        },
        "getRandomNodes(uint256)": {
          "params": {
            "count": "The number of random nodes to return"
          },
          "returns": {
            "_0": "address[] Array of randomly selected node addresses"
          }
        },
        "isValidNode(address)": {
          "params": {
            "node": "The address of the node to check"
          },
          "returns": {
            "_0": "bool True if the node is valid, false otherwise"
          }
        },
        "registerNode(address)": {
          "params": {
            "node": "The address of the node to register"
          }
        },
        "requestEntitlementCheck(address,bytes32,uint256,address[])": {
          "params": {
            "callerAddress": "The address initiating the check",
            "nodes": "Array of node addresses that will perform the check",
            "roleId": "The role ID to check entitlements against",
            "transactionId": "The unique identifier of the transaction"
          }
        },
        "requestEntitlementCheckV2(address,bytes32,uint256,bytes)": {
          "params": {
            "extraData": "Additional data required for the check",
            "requestId": "The unique identifier for this specific request",
            "transactionId": "The unique identifier of the transaction",
            "walletAddress": "The wallet address to check entitlements for"
          }
        },
        "unregisterNode(address)": {
          "params": {
            "node": "The address of the node to unregister"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getNodeAtIndex(uint256)": {
          "notice": "Get the node address at a specific index"
        },
        "getNodeCount()": {
          "notice": "Get the total number of registered nodes"
        },
        "getNodesByOperator(address)": {
          "notice": "Get all nodes registered to a specific operator"
        },
        "getRandomNodes(uint256)": {
          "notice": "Get a random selection of registered nodes"
        },
        "isValidNode(address)": {
          "notice": "Check if a node address is registered and valid"
        },
        "registerNode(address)": {
          "notice": "Register a new node in the system"
        },
        "requestEntitlementCheck(address,bytes32,uint256,address[])": {
          "notice": "Request an entitlement check for a transaction"
        },
        "requestEntitlementCheckV2(address,bytes32,uint256,bytes)": {
          "notice": "Request an entitlement check with additional data (V2)"
        },
        "unregisterNode(address)": {
          "notice": "Unregister an existing node from the system"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/base/registry/facets/checker/IEntitlementChecker.sol": "IEntitlementChecker"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/base/registry/facets/checker/IEntitlementChecker.sol": {
      "keccak256": "0x09bb1a23de39267836f97b670edcde8efd72255afd54529f5e6b3b9aa6603e4b",
      "urls": [
        "bzz-raw://5ef2fb19a74acd625fa47e518cd9a09d182d381e0822a206545febede0bd4a44",
        "dweb:/ipfs/Qmb9BSPvBkb2MihJAcPu96R6HeCYGx9QJJZpSy3pfi82GB"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "EntitlementChecker_InsufficientNumberOfNodes",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_InvalidNodeOperator",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_InvalidOperator",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_NodeAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_NodeNotRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_OperatorNotActive",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "callerAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "contractAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "selectedNodes",
            "type": "address[]"
          }
        ],
        "name": "EntitlementCheckRequested",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "name": "NodeRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "name": "NodeUnregistered",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "name": "getNodeAtIndex",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getNodeCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "getNodesByOperator",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "count",
            "type": "uint256"
          }
        ],
        "name": "getRandomNodes",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "name": "isValidNode",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "name": "registerNode",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callerAddress",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]"
          }
        ],
        "name": "requestEntitlementCheck",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "node",
            "type": "address"
          }
        ],
        "name": "unregisterNode",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/base/registry/facets/checker/IEntitlementChecker.sol": "IEntitlementChecker"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/@openzeppelin/",
      ":@prb/math/=lib/@prb/math/src/",
      ":@prb/test/=lib/@prb/test/src/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64/=lib/base64/",
      ":ds-test/=lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat-deploy/=lib/hardhat-deploy/"
    ]
  },
  "sources": {
    "contracts/src/base/registry/facets/checker/IEntitlementChecker.sol": {
      "keccak256": "0xbeb7bfa236f19172b29eac53be03a3b377de3524b2d836192b0c64ebe708c204",
      "license": "MIT",
      "urls": [
        "bzz-raw://3d5a103a2b7b6be1ffa6662db6081763bcd210216fefc25307b835c555e0cf4d",
        "dweb:/ipfs/QmUCvhZdZpVnyJuZVgd2qGduTf11384TmmBJb2RaEBHxhh"
      ]
    }
  },
  "version": 1
}
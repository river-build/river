/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRolesBase {
  export type CreateEntitlementStruct = {
    module: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CreateEntitlementStructOutput = [string, string] & {
    module: string;
    data: string;
  };

  export type RoleStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
    permissions: PromiseOrValue<string>[];
    entitlements: PromiseOrValue<string>[];
  };

  export type RoleStructOutput = [
    BigNumber,
    string,
    boolean,
    string[],
    string[]
  ] & {
    id: BigNumber;
    name: string;
    disabled: boolean;
    permissions: string[];
    entitlements: string[];
  };
}

export interface IRolesInterface extends utils.Interface {
  functions: {
    "addPermissionsToRole(uint256,string[])": FunctionFragment;
    "addRoleToEntitlement(uint256,(address,bytes))": FunctionFragment;
    "clearChannelPermissionOverrides(uint256,bytes32)": FunctionFragment;
    "createRole(string,string[],(address,bytes)[])": FunctionFragment;
    "getChannelPermissionOverrides(uint256,bytes32)": FunctionFragment;
    "getPermissionsByRoleId(uint256)": FunctionFragment;
    "getRoleById(uint256)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "removePermissionsFromRole(uint256,string[])": FunctionFragment;
    "removeRole(uint256)": FunctionFragment;
    "removeRoleFromEntitlement(uint256,(address,bytes))": FunctionFragment;
    "setChannelPermissionOverrides(uint256,bytes32,string[])": FunctionFragment;
    "updateRole(uint256,string,string[],(address,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPermissionsToRole"
      | "addRoleToEntitlement"
      | "clearChannelPermissionOverrides"
      | "createRole"
      | "getChannelPermissionOverrides"
      | "getPermissionsByRoleId"
      | "getRoleById"
      | "getRoles"
      | "removePermissionsFromRole"
      | "removeRole"
      | "removeRoleFromEntitlement"
      | "setChannelPermissionOverrides"
      | "updateRole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPermissionsToRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToEntitlement",
    values: [PromiseOrValue<BigNumberish>, IRolesBase.CreateEntitlementStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "clearChannelPermissionOverrides",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      IRolesBase.CreateEntitlementStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelPermissionOverrides",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsByRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePermissionsFromRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleFromEntitlement",
    values: [PromiseOrValue<BigNumberish>, IRolesBase.CreateEntitlementStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelPermissionOverrides",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRole",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      IRolesBase.CreateEntitlementStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPermissionsToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearChannelPermissionOverrides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChannelPermissionOverrides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionsFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleFromEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelPermissionOverrides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRole", data: BytesLike): Result;

  events: {
    "PermissionsAddedToChannelRole(address,uint256,bytes32)": EventFragment;
    "PermissionsRemovedFromChannelRole(address,uint256,bytes32)": EventFragment;
    "PermissionsUpdatedForChannelRole(address,uint256,bytes32)": EventFragment;
    "RoleCreated(address,uint256)": EventFragment;
    "RoleRemoved(address,uint256)": EventFragment;
    "RoleUpdated(address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "PermissionsAddedToChannelRole"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermissionsRemovedFromChannelRole"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermissionsUpdatedForChannelRole"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleUpdated"): EventFragment;
}

export interface PermissionsAddedToChannelRoleEventObject {
  updater: string;
  roleId: BigNumber;
  channelId: string;
}
export type PermissionsAddedToChannelRoleEvent = TypedEvent<
  [string, BigNumber, string],
  PermissionsAddedToChannelRoleEventObject
>;

export type PermissionsAddedToChannelRoleEventFilter =
  TypedEventFilter<PermissionsAddedToChannelRoleEvent>;

export interface PermissionsRemovedFromChannelRoleEventObject {
  updater: string;
  roleId: BigNumber;
  channelId: string;
}
export type PermissionsRemovedFromChannelRoleEvent = TypedEvent<
  [string, BigNumber, string],
  PermissionsRemovedFromChannelRoleEventObject
>;

export type PermissionsRemovedFromChannelRoleEventFilter =
  TypedEventFilter<PermissionsRemovedFromChannelRoleEvent>;

export interface PermissionsUpdatedForChannelRoleEventObject {
  updater: string;
  roleId: BigNumber;
  channelId: string;
}
export type PermissionsUpdatedForChannelRoleEvent = TypedEvent<
  [string, BigNumber, string],
  PermissionsUpdatedForChannelRoleEventObject
>;

export type PermissionsUpdatedForChannelRoleEventFilter =
  TypedEventFilter<PermissionsUpdatedForChannelRoleEvent>;

export interface RoleCreatedEventObject {
  creator: string;
  roleId: BigNumber;
}
export type RoleCreatedEvent = TypedEvent<
  [string, BigNumber],
  RoleCreatedEventObject
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export interface RoleRemovedEventObject {
  remover: string;
  roleId: BigNumber;
}
export type RoleRemovedEvent = TypedEvent<
  [string, BigNumber],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface RoleUpdatedEventObject {
  updater: string;
  roleId: BigNumber;
}
export type RoleUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RoleUpdatedEventObject
>;

export type RoleUpdatedEventFilter = TypedEventFilter<RoleUpdatedEvent>;

export interface IRoles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRolesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPermissionsToRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRole(
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { permissions: string[] }>;

    getPermissionsByRoleId(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { permissions: string[] }>;

    getRoleById(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IRolesBase.RoleStructOutput] & { role: IRolesBase.RoleStructOutput }
    >;

    getRoles(
      overrides?: CallOverrides
    ): Promise<
      [IRolesBase.RoleStructOutput[]] & { roles: IRolesBase.RoleStructOutput[] }
    >;

    removePermissionsFromRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRole(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleFromEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRole(
      roleId: PromiseOrValue<BigNumberish>,
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPermissionsToRole(
    roleId: PromiseOrValue<BigNumberish>,
    permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToEntitlement(
    roleId: PromiseOrValue<BigNumberish>,
    entitlement: IRolesBase.CreateEntitlementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearChannelPermissionOverrides(
    roleId: PromiseOrValue<BigNumberish>,
    channelId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRole(
    roleName: PromiseOrValue<string>,
    permissions: PromiseOrValue<string>[],
    entitlements: IRolesBase.CreateEntitlementStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChannelPermissionOverrides(
    roleId: PromiseOrValue<BigNumberish>,
    channelId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPermissionsByRoleId(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleById(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRolesBase.RoleStructOutput>;

  getRoles(overrides?: CallOverrides): Promise<IRolesBase.RoleStructOutput[]>;

  removePermissionsFromRole(
    roleId: PromiseOrValue<BigNumberish>,
    permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRole(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleFromEntitlement(
    roleId: PromiseOrValue<BigNumberish>,
    entitlement: IRolesBase.CreateEntitlementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChannelPermissionOverrides(
    roleId: PromiseOrValue<BigNumberish>,
    channelId: PromiseOrValue<BytesLike>,
    permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRole(
    roleId: PromiseOrValue<BigNumberish>,
    roleName: PromiseOrValue<string>,
    permissions: PromiseOrValue<string>[],
    entitlements: IRolesBase.CreateEntitlementStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPermissionsToRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    clearChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRole(
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPermissionsByRoleId(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleById(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRolesBase.RoleStructOutput>;

    getRoles(overrides?: CallOverrides): Promise<IRolesBase.RoleStructOutput[]>;

    removePermissionsFromRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRole(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleFromEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRole(
      roleId: PromiseOrValue<BigNumberish>,
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PermissionsAddedToChannelRole(address,uint256,bytes32)"(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsAddedToChannelRoleEventFilter;
    PermissionsAddedToChannelRole(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsAddedToChannelRoleEventFilter;

    "PermissionsRemovedFromChannelRole(address,uint256,bytes32)"(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsRemovedFromChannelRoleEventFilter;
    PermissionsRemovedFromChannelRole(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsRemovedFromChannelRoleEventFilter;

    "PermissionsUpdatedForChannelRole(address,uint256,bytes32)"(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsUpdatedForChannelRoleEventFilter;
    PermissionsUpdatedForChannelRole(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      channelId?: PromiseOrValue<BytesLike> | null
    ): PermissionsUpdatedForChannelRoleEventFilter;

    "RoleCreated(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleCreatedEventFilter;
    RoleCreated(
      creator?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleCreatedEventFilter;

    "RoleRemoved(address,uint256)"(
      remover?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      remover?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleRemovedEventFilter;

    "RoleUpdated(address,uint256)"(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleUpdatedEventFilter;
    RoleUpdated(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleUpdatedEventFilter;
  };

  estimateGas: {
    addPermissionsToRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRole(
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionsByRoleId(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleById(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    removePermissionsFromRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRole(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleFromEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRole(
      roleId: PromiseOrValue<BigNumberish>,
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPermissionsToRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRole(
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionsByRoleId(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleById(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePermissionsFromRole(
      roleId: PromiseOrValue<BigNumberish>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRole(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleFromEntitlement(
      roleId: PromiseOrValue<BigNumberish>,
      entitlement: IRolesBase.CreateEntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChannelPermissionOverrides(
      roleId: PromiseOrValue<BigNumberish>,
      channelId: PromiseOrValue<BytesLike>,
      permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRole(
      roleId: PromiseOrValue<BigNumberish>,
      roleName: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>[],
      entitlements: IRolesBase.CreateEntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IEntitlementCheckerInterface extends utils.Interface {
  functions: {
    "getNodeAtIndex(uint256)": FunctionFragment;
    "getNodeCount()": FunctionFragment;
    "getNodesByOperator(address)": FunctionFragment;
    "getRandomNodes(uint256)": FunctionFragment;
    "isValidNode(address)": FunctionFragment;
    "registerNode(address)": FunctionFragment;
    "requestEntitlementCheck(address,bytes32,uint256,address[])": FunctionFragment;
    "unregisterNode(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getNodeAtIndex"
      | "getNodeCount"
      | "getNodesByOperator"
      | "getRandomNodes"
      | "isValidNode"
      | "registerNode"
      | "requestEntitlementCheck"
      | "unregisterNode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNodeAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodesByOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNodes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEntitlementCheck",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterNode",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNodeAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodesByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEntitlementCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterNode",
    data: BytesLike
  ): Result;

  events: {
    "EntitlementCheckRequested(address,address,bytes32,uint256,address[])": EventFragment;
    "NodeRegistered(address)": EventFragment;
    "NodeUnregistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntitlementCheckRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeUnregistered"): EventFragment;
}

export interface EntitlementCheckRequestedEventObject {
  callerAddress: string;
  contractAddress: string;
  transactionId: string;
  roleId: BigNumber;
  selectedNodes: string[];
}
export type EntitlementCheckRequestedEvent = TypedEvent<
  [string, string, string, BigNumber, string[]],
  EntitlementCheckRequestedEventObject
>;

export type EntitlementCheckRequestedEventFilter =
  TypedEventFilter<EntitlementCheckRequestedEvent>;

export interface NodeRegisteredEventObject {
  nodeAddress: string;
}
export type NodeRegisteredEvent = TypedEvent<
  [string],
  NodeRegisteredEventObject
>;

export type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;

export interface NodeUnregisteredEventObject {
  nodeAddress: string;
}
export type NodeUnregisteredEvent = TypedEvent<
  [string],
  NodeUnregisteredEventObject
>;

export type NodeUnregisteredEventFilter =
  TypedEventFilter<NodeUnregisteredEvent>;

export interface IEntitlementChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntitlementCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNodeAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNodeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNodesByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRandomNodes(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isValidNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestEntitlementCheck(
      callerAddress: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      nodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getNodeAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

  getNodesByOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRandomNodes(
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isValidNode(
    node: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerNode(
    node: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestEntitlementCheck(
    callerAddress: PromiseOrValue<string>,
    transactionId: PromiseOrValue<BytesLike>,
    roleId: PromiseOrValue<BigNumberish>,
    nodes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterNode(
    node: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNodeAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNodesByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRandomNodes(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isValidNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestEntitlementCheck(
      callerAddress: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      nodes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EntitlementCheckRequested(address,address,bytes32,uint256,address[])"(
      callerAddress?: null,
      contractAddress?: null,
      transactionId?: null,
      roleId?: null,
      selectedNodes?: null
    ): EntitlementCheckRequestedEventFilter;
    EntitlementCheckRequested(
      callerAddress?: null,
      contractAddress?: null,
      transactionId?: null,
      roleId?: null,
      selectedNodes?: null
    ): EntitlementCheckRequestedEventFilter;

    "NodeRegistered(address)"(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRegisteredEventFilter;
    NodeRegistered(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRegisteredEventFilter;

    "NodeUnregistered(address)"(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeUnregisteredEventFilter;
    NodeUnregistered(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeUnregisteredEventFilter;
  };

  estimateGas: {
    getNodeAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNodesByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNodes(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestEntitlementCheck(
      callerAddress: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      nodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNodeAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNodesByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNodes(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidNode(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestEntitlementCheck(
      callerAddress: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      nodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterNode(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ReviewStorage {
  export type ContentStruct = {
    comment: PromiseOrValue<string>;
    rating: PromiseOrValue<BigNumberish>;
  };

  export type ContentStructOutput = [string, number] & {
    comment: string;
    rating: number;
  };
}

export interface IReviewInterface extends utils.Interface {
  functions: {
    "getAllReviews()": FunctionFragment;
    "getReview(address)": FunctionFragment;
    "setReview(uint8,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getAllReviews" | "getReview" | "setReview"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllReviews",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReview",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReview",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReview", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReview", data: BytesLike): Result;

  events: {
    "ReviewAdded(address,tuple)": EventFragment;
    "ReviewDeleted(address)": EventFragment;
    "ReviewUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReviewAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewUpdated"): EventFragment;
}

export interface ReviewAddedEventObject {
  user: string;
  review: ReviewStorage.ContentStructOutput;
}
export type ReviewAddedEvent = TypedEvent<
  [string, ReviewStorage.ContentStructOutput],
  ReviewAddedEventObject
>;

export type ReviewAddedEventFilter = TypedEventFilter<ReviewAddedEvent>;

export interface ReviewDeletedEventObject {
  user: string;
}
export type ReviewDeletedEvent = TypedEvent<[string], ReviewDeletedEventObject>;

export type ReviewDeletedEventFilter = TypedEventFilter<ReviewDeletedEvent>;

export interface ReviewUpdatedEventObject {
  user: string;
  review: ReviewStorage.ContentStructOutput;
}
export type ReviewUpdatedEvent = TypedEvent<
  [string, ReviewStorage.ContentStructOutput],
  ReviewUpdatedEventObject
>;

export type ReviewUpdatedEventFilter = TypedEventFilter<ReviewUpdatedEvent>;

export interface IReview extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReviewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllReviews(
      overrides?: CallOverrides
    ): Promise<
      [string[], ReviewStorage.ContentStructOutput[]] & {
        users: string[];
        reviews: ReviewStorage.ContentStructOutput[];
      }
    >;

    getReview(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReviewStorage.ContentStructOutput]>;

    setReview(
      action: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllReviews(
    overrides?: CallOverrides
  ): Promise<
    [string[], ReviewStorage.ContentStructOutput[]] & {
      users: string[];
      reviews: ReviewStorage.ContentStructOutput[];
    }
  >;

  getReview(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReviewStorage.ContentStructOutput>;

  setReview(
    action: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllReviews(
      overrides?: CallOverrides
    ): Promise<
      [string[], ReviewStorage.ContentStructOutput[]] & {
        users: string[];
        reviews: ReviewStorage.ContentStructOutput[];
      }
    >;

    getReview(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReviewStorage.ContentStructOutput>;

    setReview(
      action: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReviewAdded(address,tuple)"(
      user?: PromiseOrValue<string> | null,
      review?: null
    ): ReviewAddedEventFilter;
    ReviewAdded(
      user?: PromiseOrValue<string> | null,
      review?: null
    ): ReviewAddedEventFilter;

    "ReviewDeleted(address)"(
      user?: PromiseOrValue<string> | null
    ): ReviewDeletedEventFilter;
    ReviewDeleted(
      user?: PromiseOrValue<string> | null
    ): ReviewDeletedEventFilter;

    "ReviewUpdated(address,tuple)"(
      user?: PromiseOrValue<string> | null,
      review?: null
    ): ReviewUpdatedEventFilter;
    ReviewUpdated(
      user?: PromiseOrValue<string> | null,
      review?: null
    ): ReviewUpdatedEventFilter;
  };

  estimateGas: {
    getAllReviews(overrides?: CallOverrides): Promise<BigNumber>;

    getReview(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setReview(
      action: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllReviews(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReview(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setReview(
      action: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

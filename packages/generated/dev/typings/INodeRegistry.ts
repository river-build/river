/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type NodeStruct = {
  status: PromiseOrValue<BigNumberish>;
  url: PromiseOrValue<string>;
  nodeAddress: PromiseOrValue<string>;
  operator: PromiseOrValue<string>;
};

export type NodeStructOutput = [number, string, string, string] & {
  status: number;
  url: string;
  nodeAddress: string;
  operator: string;
};

export interface INodeRegistryInterface extends utils.Interface {
  functions: {
    "getAllNodeAddresses()": FunctionFragment;
    "getAllNodes()": FunctionFragment;
    "getNode(address)": FunctionFragment;
    "getNodeCount()": FunctionFragment;
    "registerNode(address,string,uint8)": FunctionFragment;
    "removeNode(address)": FunctionFragment;
    "updateNodeStatus(address,uint8)": FunctionFragment;
    "updateNodeUrl(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllNodeAddresses"
      | "getAllNodes"
      | "getNode"
      | "getNodeCount"
      | "registerNode"
      | "removeNode"
      | "updateNodeStatus"
      | "updateNodeUrl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllNodeAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeUrl",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllNodeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeUrl",
    data: BytesLike
  ): Result;

  events: {
    "NodeAdded(address,address,string,uint8)": EventFragment;
    "NodeRemoved(address)": EventFragment;
    "NodeStatusUpdated(address,uint8)": EventFragment;
    "NodeUrlUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeUrlUpdated"): EventFragment;
}

export interface NodeAddedEventObject {
  nodeAddress: string;
  operator: string;
  url: string;
  status: number;
}
export type NodeAddedEvent = TypedEvent<
  [string, string, string, number],
  NodeAddedEventObject
>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeRemovedEventObject {
  nodeAddress: string;
}
export type NodeRemovedEvent = TypedEvent<[string], NodeRemovedEventObject>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export interface NodeStatusUpdatedEventObject {
  nodeAddress: string;
  status: number;
}
export type NodeStatusUpdatedEvent = TypedEvent<
  [string, number],
  NodeStatusUpdatedEventObject
>;

export type NodeStatusUpdatedEventFilter =
  TypedEventFilter<NodeStatusUpdatedEvent>;

export interface NodeUrlUpdatedEventObject {
  nodeAddress: string;
  url: string;
}
export type NodeUrlUpdatedEvent = TypedEvent<
  [string, string],
  NodeUrlUpdatedEventObject
>;

export type NodeUrlUpdatedEventFilter = TypedEventFilter<NodeUrlUpdatedEvent>;

export interface INodeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INodeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllNodeAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getAllNodes(overrides?: CallOverrides): Promise<[NodeStructOutput[]]>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NodeStructOutput]>;

    getNodeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNodeStatus(
      nodeAddress: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNodeUrl(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllNodeAddresses(overrides?: CallOverrides): Promise<string[]>;

  getAllNodes(overrides?: CallOverrides): Promise<NodeStructOutput[]>;

  getNode(
    nodeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NodeStructOutput>;

  getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

  registerNode(
    nodeAddress: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeNode(
    nodeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNodeStatus(
    nodeAddress: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNodeUrl(
    nodeAddress: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllNodeAddresses(overrides?: CallOverrides): Promise<string[]>;

    getAllNodes(overrides?: CallOverrides): Promise<NodeStructOutput[]>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NodeStructOutput>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNodeStatus(
      nodeAddress: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNodeUrl(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NodeAdded(address,address,string,uint8)"(
      nodeAddress?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      url?: null,
      status?: null
    ): NodeAddedEventFilter;
    NodeAdded(
      nodeAddress?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      url?: null,
      status?: null
    ): NodeAddedEventFilter;

    "NodeRemoved(address)"(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRemovedEventFilter;
    NodeRemoved(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRemovedEventFilter;

    "NodeStatusUpdated(address,uint8)"(
      nodeAddress?: PromiseOrValue<string> | null,
      status?: null
    ): NodeStatusUpdatedEventFilter;
    NodeStatusUpdated(
      nodeAddress?: PromiseOrValue<string> | null,
      status?: null
    ): NodeStatusUpdatedEventFilter;

    "NodeUrlUpdated(address,string)"(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null
    ): NodeUrlUpdatedEventFilter;
    NodeUrlUpdated(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null
    ): NodeUrlUpdatedEventFilter;
  };

  estimateGas: {
    getAllNodeAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getAllNodes(overrides?: CallOverrides): Promise<BigNumber>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNodeStatus(
      nodeAddress: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNodeUrl(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllNodeAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNodeStatus(
      nodeAddress: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNodeUrl(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IArchitect, IArchitectInterface } from "../IArchitect";

const _abi = [
  {
    type: "function",
    name: "getProxyInitializer",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISpaceProxyInitializer",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSpaceArchitectImplementations",
    inputs: [],
    outputs: [
      {
        name: "ownerTokenImplementation",
        type: "address",
        internalType: "contract ISpaceOwner",
      },
      {
        name: "userEntitlementImplementation",
        type: "address",
        internalType: "contract IUserEntitlement",
      },
      {
        name: "ruleEntitlementImplementation",
        type: "address",
        internalType: "contract IRuleEntitlementV2",
      },
      {
        name: "legacyRuleEntitlement",
        type: "address",
        internalType: "contract IRuleEntitlement",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSpaceByTokenId",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "space",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTokenIdBySpace",
    inputs: [
      {
        name: "space",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setProxyInitializer",
    inputs: [
      {
        name: "proxyInitializer",
        type: "address",
        internalType: "contract ISpaceProxyInitializer",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setSpaceArchitectImplementations",
    inputs: [
      {
        name: "ownerTokenImplementation",
        type: "address",
        internalType: "contract ISpaceOwner",
      },
      {
        name: "userEntitlementImplementation",
        type: "address",
        internalType: "contract IUserEntitlement",
      },
      {
        name: "ruleEntitlementImplementation",
        type: "address",
        internalType: "contract IRuleEntitlementV2",
      },
      {
        name: "legacyRuleEntitlement",
        type: "address",
        internalType: "contract IRuleEntitlement",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Architect__ProxyInitializerSet",
    inputs: [
      {
        name: "proxyInitializer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SpaceCreated",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "space",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "Architect__InvalidAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "Architect__InvalidNetworkId",
    inputs: [],
  },
  {
    type: "error",
    name: "Architect__InvalidPricingModule",
    inputs: [],
  },
  {
    type: "error",
    name: "Architect__InvalidStringLength",
    inputs: [],
  },
  {
    type: "error",
    name: "Architect__NotContract",
    inputs: [],
  },
] as const;

export class IArchitect__factory {
  static readonly abi = _abi;
  static createInterface(): IArchitectInterface {
    return new utils.Interface(_abi) as IArchitectInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IArchitect {
    return new Contract(address, _abi, signerOrProvider) as IArchitect;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISpaceOwner, ISpaceOwnerInterface } from "../ISpaceOwner";

const _abi = [
  {
    type: "function",
    name: "getFactory",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSpaceInfo",
    inputs: [
      {
        name: "space",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ISpaceOwnerBase.Space",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "createdAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "shortDescription",
            type: "string",
            internalType: "string",
          },
          {
            name: "longDescription",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mintSpace",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "uri",
        type: "string",
        internalType: "string",
      },
      {
        name: "space",
        type: "address",
        internalType: "address",
      },
      {
        name: "shortDescription",
        type: "string",
        internalType: "string",
      },
      {
        name: "longDescription",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "nextTokenId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setFactory",
    inputs: [
      {
        name: "factory",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateSpaceInfo",
    inputs: [
      {
        name: "space",
        type: "address",
        internalType: "address",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "uri",
        type: "string",
        internalType: "string",
      },
      {
        name: "shortDescription",
        type: "string",
        internalType: "string",
      },
      {
        name: "longDescription",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "SpaceOwner__SetFactory",
    inputs: [
      {
        name: "factory",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SpaceOwner__UpdateSpace",
    inputs: [
      {
        name: "space",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "SpaceOwner__OnlyFactoryAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "SpaceOwner__OnlySpaceOwnerAllowed",
    inputs: [],
  },
] as const;

export class ISpaceOwner__factory {
  static readonly abi = _abi;
  static createInterface(): ISpaceOwnerInterface {
    return new utils.Interface(_abi) as ISpaceOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISpaceOwner {
    return new Contract(address, _abi, signerOrProvider) as ISpaceOwner;
  }
}

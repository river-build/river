/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ISpaceOwnerBase {
  export type SpaceStruct = {
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    shortDescription: PromiseOrValue<string>;
    longDescription: PromiseOrValue<string>;
  };

  export type SpaceStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    name: string;
    uri: string;
    tokenId: BigNumber;
    createdAt: BigNumber;
    shortDescription: string;
    longDescription: string;
  };
}

export interface ISpaceOwnerInterface extends utils.Interface {
  functions: {
    "getDefaultUri()": FunctionFragment;
    "getFactory()": FunctionFragment;
    "getSpaceByTokenId(uint256)": FunctionFragment;
    "getSpaceInfo(address)": FunctionFragment;
    "mintSpace(string,string,address,string,string)": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "setDefaultUri(string)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "updateSpaceInfo(address,string,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDefaultUri"
      | "getFactory"
      | "getSpaceByTokenId"
      | "getSpaceInfo"
      | "mintSpace"
      | "nextTokenId"
      | "setDefaultUri"
      | "setFactory"
      | "updateSpaceInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDefaultUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpace",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultUri",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSpaceInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefaultUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintSpace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSpaceInfo",
    data: BytesLike
  ): Result;

  events: {
    "SpaceOwner__SetDefaultUri(string)": EventFragment;
    "SpaceOwner__SetFactory(address)": EventFragment;
    "SpaceOwner__UpdateSpace(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SpaceOwner__SetDefaultUri"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceOwner__SetFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceOwner__UpdateSpace"): EventFragment;
}

export interface SpaceOwner__SetDefaultUriEventObject {
  uri: string;
}
export type SpaceOwner__SetDefaultUriEvent = TypedEvent<
  [string],
  SpaceOwner__SetDefaultUriEventObject
>;

export type SpaceOwner__SetDefaultUriEventFilter =
  TypedEventFilter<SpaceOwner__SetDefaultUriEvent>;

export interface SpaceOwner__SetFactoryEventObject {
  factory: string;
}
export type SpaceOwner__SetFactoryEvent = TypedEvent<
  [string],
  SpaceOwner__SetFactoryEventObject
>;

export type SpaceOwner__SetFactoryEventFilter =
  TypedEventFilter<SpaceOwner__SetFactoryEvent>;

export interface SpaceOwner__UpdateSpaceEventObject {
  space: string;
}
export type SpaceOwner__UpdateSpaceEvent = TypedEvent<
  [string],
  SpaceOwner__UpdateSpaceEventObject
>;

export type SpaceOwner__UpdateSpaceEventFilter =
  TypedEventFilter<SpaceOwner__UpdateSpaceEvent>;

export interface ISpaceOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISpaceOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDefaultUri(overrides?: CallOverrides): Promise<[string]>;

    getFactory(overrides?: CallOverrides): Promise<[string]>;

    getSpaceByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSpaceInfo(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ISpaceOwnerBase.SpaceStructOutput]>;

    mintSpace(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      space: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDefaultUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSpaceInfo(
      space: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getDefaultUri(overrides?: CallOverrides): Promise<string>;

  getFactory(overrides?: CallOverrides): Promise<string>;

  getSpaceByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSpaceInfo(
    space: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ISpaceOwnerBase.SpaceStructOutput>;

  mintSpace(
    name: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    space: PromiseOrValue<string>,
    shortDescription: PromiseOrValue<string>,
    longDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  setDefaultUri(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSpaceInfo(
    space: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    shortDescription: PromiseOrValue<string>,
    longDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDefaultUri(overrides?: CallOverrides): Promise<string>;

    getFactory(overrides?: CallOverrides): Promise<string>;

    getSpaceByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSpaceInfo(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ISpaceOwnerBase.SpaceStructOutput>;

    mintSpace(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      space: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultUri(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSpaceInfo(
      space: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SpaceOwner__SetDefaultUri(string)"(
      uri?: null
    ): SpaceOwner__SetDefaultUriEventFilter;
    SpaceOwner__SetDefaultUri(uri?: null): SpaceOwner__SetDefaultUriEventFilter;

    "SpaceOwner__SetFactory(address)"(
      factory?: null
    ): SpaceOwner__SetFactoryEventFilter;
    SpaceOwner__SetFactory(factory?: null): SpaceOwner__SetFactoryEventFilter;

    "SpaceOwner__UpdateSpace(address)"(
      space?: PromiseOrValue<string> | null
    ): SpaceOwner__UpdateSpaceEventFilter;
    SpaceOwner__UpdateSpace(
      space?: PromiseOrValue<string> | null
    ): SpaceOwner__UpdateSpaceEventFilter;
  };

  estimateGas: {
    getDefaultUri(overrides?: CallOverrides): Promise<BigNumber>;

    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getSpaceByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceInfo(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSpace(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      space: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSpaceInfo(
      space: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDefaultUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpaceByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceInfo(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSpace(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      space: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDefaultUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSpaceInfo(
      space: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      shortDescription: PromiseOrValue<string>,
      longDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

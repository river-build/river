/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISpaceDelegationInterface extends utils.Interface {
  functions: {
    "addSpaceDelegation(address,address)": FunctionFragment;
    "getSpaceDelegation(address)": FunctionFragment;
    "getSpaceDelegationsByOperator(address)": FunctionFragment;
    "getSpaceFactory()": FunctionFragment;
    "getTotalDelegation(address)": FunctionFragment;
    "mainnetDelegation()": FunctionFragment;
    "removeSpaceDelegation(address)": FunctionFragment;
    "riverToken()": FunctionFragment;
    "setMainnetDelegation(address)": FunctionFragment;
    "setRiverToken(address)": FunctionFragment;
    "setSpaceFactory(address)": FunctionFragment;
    "setStakeRequirement(uint256)": FunctionFragment;
    "stakeRequirement()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSpaceDelegation"
      | "getSpaceDelegation"
      | "getSpaceDelegationsByOperator"
      | "getSpaceFactory"
      | "getTotalDelegation"
      | "mainnetDelegation"
      | "removeSpaceDelegation"
      | "riverToken"
      | "setMainnetDelegation"
      | "setRiverToken"
      | "setSpaceFactory"
      | "setStakeRequirement"
      | "stakeRequirement"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSpaceDelegation",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceDelegation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceDelegationsByOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDelegation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainnetDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSpaceDelegation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "riverToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMainnetDelegation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiverToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeRequirement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRequirement",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSpaceDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceDelegationsByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainnetDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSpaceDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riverToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMainnetDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRequirement",
    data: BytesLike
  ): Result;

  events: {
    "MainnetDelegationChanged(address)": EventFragment;
    "RiverTokenChanged(address)": EventFragment;
    "SpaceDelegatedToOperator(address,address)": EventFragment;
    "SpaceFactoryChanged(address)": EventFragment;
    "StakeRequirementChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MainnetDelegationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiverTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceDelegatedToOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRequirementChanged"): EventFragment;
}

export interface MainnetDelegationChangedEventObject {
  mainnetDelegation: string;
}
export type MainnetDelegationChangedEvent = TypedEvent<
  [string],
  MainnetDelegationChangedEventObject
>;

export type MainnetDelegationChangedEventFilter =
  TypedEventFilter<MainnetDelegationChangedEvent>;

export interface RiverTokenChangedEventObject {
  riverToken: string;
}
export type RiverTokenChangedEvent = TypedEvent<
  [string],
  RiverTokenChangedEventObject
>;

export type RiverTokenChangedEventFilter =
  TypedEventFilter<RiverTokenChangedEvent>;

export interface SpaceDelegatedToOperatorEventObject {
  space: string;
  operator: string;
}
export type SpaceDelegatedToOperatorEvent = TypedEvent<
  [string, string],
  SpaceDelegatedToOperatorEventObject
>;

export type SpaceDelegatedToOperatorEventFilter =
  TypedEventFilter<SpaceDelegatedToOperatorEvent>;

export interface SpaceFactoryChangedEventObject {
  spaceFactory: string;
}
export type SpaceFactoryChangedEvent = TypedEvent<
  [string],
  SpaceFactoryChangedEventObject
>;

export type SpaceFactoryChangedEventFilter =
  TypedEventFilter<SpaceFactoryChangedEvent>;

export interface StakeRequirementChangedEventObject {
  stakeRequirement: BigNumber;
}
export type StakeRequirementChangedEvent = TypedEvent<
  [BigNumber],
  StakeRequirementChangedEventObject
>;

export type StakeRequirementChangedEventFilter =
  TypedEventFilter<StakeRequirementChangedEvent>;

export interface ISpaceDelegation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISpaceDelegationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSpaceDelegation(
      space: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSpaceDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSpaceFactory(overrides?: CallOverrides): Promise<[string]>;

    getTotalDelegation(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mainnetDelegation(overrides?: CallOverrides): Promise<[string]>;

    removeSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riverToken(overrides?: CallOverrides): Promise<[string]>;

    setMainnetDelegation(
      mainnetDelegation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiverToken(
      riverToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpaceFactory(
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakeRequirement(
      stakeRequirement_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addSpaceDelegation(
    space: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSpaceDelegation(
    space: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSpaceDelegationsByOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSpaceFactory(overrides?: CallOverrides): Promise<string>;

  getTotalDelegation(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mainnetDelegation(overrides?: CallOverrides): Promise<string>;

  removeSpaceDelegation(
    space: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riverToken(overrides?: CallOverrides): Promise<string>;

  setMainnetDelegation(
    mainnetDelegation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiverToken(
    riverToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpaceFactory(
    spaceFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakeRequirement(
    stakeRequirement_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addSpaceDelegation(
      space: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSpaceDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSpaceFactory(overrides?: CallOverrides): Promise<string>;

    getTotalDelegation(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainnetDelegation(overrides?: CallOverrides): Promise<string>;

    removeSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    riverToken(overrides?: CallOverrides): Promise<string>;

    setMainnetDelegation(
      mainnetDelegation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiverToken(
      riverToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpaceFactory(
      spaceFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeRequirement(
      stakeRequirement_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRequirement(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MainnetDelegationChanged(address)"(
      mainnetDelegation?: PromiseOrValue<string> | null
    ): MainnetDelegationChangedEventFilter;
    MainnetDelegationChanged(
      mainnetDelegation?: PromiseOrValue<string> | null
    ): MainnetDelegationChangedEventFilter;

    "RiverTokenChanged(address)"(
      riverToken?: PromiseOrValue<string> | null
    ): RiverTokenChangedEventFilter;
    RiverTokenChanged(
      riverToken?: PromiseOrValue<string> | null
    ): RiverTokenChangedEventFilter;

    "SpaceDelegatedToOperator(address,address)"(
      space?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null
    ): SpaceDelegatedToOperatorEventFilter;
    SpaceDelegatedToOperator(
      space?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null
    ): SpaceDelegatedToOperatorEventFilter;

    "SpaceFactoryChanged(address)"(
      spaceFactory?: PromiseOrValue<string> | null
    ): SpaceFactoryChangedEventFilter;
    SpaceFactoryChanged(
      spaceFactory?: PromiseOrValue<string> | null
    ): SpaceFactoryChangedEventFilter;

    "StakeRequirementChanged(uint256)"(
      stakeRequirement?: null
    ): StakeRequirementChangedEventFilter;
    StakeRequirementChanged(
      stakeRequirement?: null
    ): StakeRequirementChangedEventFilter;
  };

  estimateGas: {
    addSpaceDelegation(
      space: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDelegation(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainnetDelegation(overrides?: CallOverrides): Promise<BigNumber>;

    removeSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riverToken(overrides?: CallOverrides): Promise<BigNumber>;

    setMainnetDelegation(
      mainnetDelegation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiverToken(
      riverToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpaceFactory(
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakeRequirement(
      stakeRequirement_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeRequirement(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSpaceDelegation(
      space: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDelegation(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainnetDelegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSpaceDelegation(
      space: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riverToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMainnetDelegation(
      mainnetDelegation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiverToken(
      riverToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpaceFactory(
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakeRequirement(
      stakeRequirement_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeRequirement(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

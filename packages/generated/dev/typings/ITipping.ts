/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITippingBase {
  export type TipRequestStruct = {
    receiver: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    messageId: PromiseOrValue<BytesLike>;
    channelId: PromiseOrValue<BytesLike>;
  };

  export type TipRequestStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    receiver: string;
    tokenId: BigNumber;
    currency: string;
    amount: BigNumber;
    messageId: string;
    channelId: string;
  };
}

export interface ITippingInterface extends utils.Interface {
  functions: {
    "tip((address,uint256,address,uint256,bytes32,bytes32))": FunctionFragment;
    "tipAmountByCurrency(address)": FunctionFragment;
    "tippingCurrencies()": FunctionFragment;
    "tipsByCurrencyAndTokenId(uint256,address)": FunctionFragment;
    "totalTipsByCurrency(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "tip"
      | "tipAmountByCurrency"
      | "tippingCurrencies"
      | "tipsByCurrencyAndTokenId"
      | "totalTipsByCurrency"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "tip",
    values: [ITippingBase.TipRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tipAmountByCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tippingCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tipsByCurrencyAndTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTipsByCurrency",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tipAmountByCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tippingCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tipsByCurrencyAndTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTipsByCurrency",
    data: BytesLike
  ): Result;

  events: {
    "Tip(uint256,address,address,address,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Tip"): EventFragment;
}

export interface TipEventObject {
  tokenId: BigNumber;
  currency: string;
  sender: string;
  receiver: string;
  amount: BigNumber;
  messageId: string;
  channelId: string;
}
export type TipEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, string, string],
  TipEventObject
>;

export type TipEventFilter = TypedEventFilter<TipEvent>;

export interface ITipping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITippingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    tip(
      tipRequest: ITippingBase.TipRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tipAmountByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tippingCurrencies(overrides?: CallOverrides): Promise<[string[]]>;

    tipsByCurrencyAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTipsByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  tip(
    tipRequest: ITippingBase.TipRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tipAmountByCurrency(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tippingCurrencies(overrides?: CallOverrides): Promise<string[]>;

  tipsByCurrencyAndTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTipsByCurrency(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    tip(
      tipRequest: ITippingBase.TipRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tipAmountByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tippingCurrencies(overrides?: CallOverrides): Promise<string[]>;

    tipsByCurrencyAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTipsByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Tip(uint256,address,address,address,uint256,bytes32,bytes32)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null,
      sender?: null,
      receiver?: null,
      amount?: null,
      messageId?: null,
      channelId?: null
    ): TipEventFilter;
    Tip(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null,
      sender?: null,
      receiver?: null,
      amount?: null,
      messageId?: null,
      channelId?: null
    ): TipEventFilter;
  };

  estimateGas: {
    tip(
      tipRequest: ITippingBase.TipRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tipAmountByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tippingCurrencies(overrides?: CallOverrides): Promise<BigNumber>;

    tipsByCurrencyAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTipsByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    tip(
      tipRequest: ITippingBase.TipRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tipAmountByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tippingCurrencies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tipsByCurrencyAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTipsByCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ICrossChainEntitlement {
  export type ParameterStruct = {
    name: PromiseOrValue<string>;
    primitive: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type ParameterStructOutput = [string, string, string] & {
    name: string;
    primitive: string;
    description: string;
  };
}

export interface ICrossChainEntitlementInterface extends utils.Interface {
  functions: {
    "isEntitled(address[],bytes)": FunctionFragment;
    "parameters()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "isEntitled" | "parameters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isEntitled",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isEntitled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;

  events: {};
}

export interface ICrossChainEntitlement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrossChainEntitlementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isEntitled(
      users: PromiseOrValue<string>[],
      parameters: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    parameters(
      overrides?: CallOverrides
    ): Promise<[ICrossChainEntitlement.ParameterStructOutput[]]>;
  };

  isEntitled(
    users: PromiseOrValue<string>[],
    parameters: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parameters(
    overrides?: CallOverrides
  ): Promise<ICrossChainEntitlement.ParameterStructOutput[]>;

  callStatic: {
    isEntitled(
      users: PromiseOrValue<string>[],
      parameters: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parameters(
      overrides?: CallOverrides
    ): Promise<ICrossChainEntitlement.ParameterStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    isEntitled(
      users: PromiseOrValue<string>[],
      parameters: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isEntitled(
      users: PromiseOrValue<string>[],
      parameters: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMembershipBase {
  export type MembershipStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    maxSupply: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    feeRecipient: PromiseOrValue<string>;
    freeAllocation: PromiseOrValue<BigNumberish>;
    pricingModule: PromiseOrValue<string>;
  };

  export type MembershipStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    price: BigNumber;
    maxSupply: BigNumber;
    duration: BigNumber;
    currency: string;
    feeRecipient: string;
    freeAllocation: BigNumber;
    pricingModule: string;
  };
}

export declare namespace IArchitectBase {
  export type MembershipRequirementsStruct = {
    everyone: PromiseOrValue<boolean>;
    users: PromiseOrValue<string>[];
    ruleData: PromiseOrValue<BytesLike>;
    syncEntitlements: PromiseOrValue<boolean>;
  };

  export type MembershipRequirementsStructOutput = [
    boolean,
    string[],
    string,
    boolean
  ] & {
    everyone: boolean;
    users: string[];
    ruleData: string;
    syncEntitlements: boolean;
  };

  export type MembershipStruct = {
    settings: IMembershipBase.MembershipStruct;
    requirements: IArchitectBase.MembershipRequirementsStruct;
    permissions: PromiseOrValue<string>[];
  };

  export type MembershipStructOutput = [
    IMembershipBase.MembershipStructOutput,
    IArchitectBase.MembershipRequirementsStructOutput,
    string[]
  ] & {
    settings: IMembershipBase.MembershipStructOutput;
    requirements: IArchitectBase.MembershipRequirementsStructOutput;
    permissions: string[];
  };

  export type ChannelInfoStruct = { metadata: PromiseOrValue<string> };

  export type ChannelInfoStructOutput = [string] & { metadata: string };

  export type SpaceInfoStruct = {
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    shortDescription: PromiseOrValue<string>;
    longDescription: PromiseOrValue<string>;
    membership: IArchitectBase.MembershipStruct;
    channel: IArchitectBase.ChannelInfoStruct;
  };

  export type SpaceInfoStructOutput = [
    string,
    string,
    string,
    string,
    IArchitectBase.MembershipStructOutput,
    IArchitectBase.ChannelInfoStructOutput
  ] & {
    name: string;
    uri: string;
    shortDescription: string;
    longDescription: string;
    membership: IArchitectBase.MembershipStructOutput;
    channel: IArchitectBase.ChannelInfoStructOutput;
  };

  export type MetadataStruct = {
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    shortDescription: PromiseOrValue<string>;
    longDescription: PromiseOrValue<string>;
  };

  export type MetadataStructOutput = [string, string, string, string] & {
    name: string;
    uri: string;
    shortDescription: string;
    longDescription: string;
  };

  export type PrepayStruct = { supply: PromiseOrValue<BigNumberish> };

  export type PrepayStructOutput = [BigNumber] & { supply: BigNumber };

  export type CreateSpaceStruct = {
    metadata: IArchitectBase.MetadataStruct;
    membership: IArchitectBase.MembershipStruct;
    channel: IArchitectBase.ChannelInfoStruct;
    prepay: IArchitectBase.PrepayStruct;
  };

  export type CreateSpaceStructOutput = [
    IArchitectBase.MetadataStructOutput,
    IArchitectBase.MembershipStructOutput,
    IArchitectBase.ChannelInfoStructOutput,
    IArchitectBase.PrepayStructOutput
  ] & {
    metadata: IArchitectBase.MetadataStructOutput;
    membership: IArchitectBase.MembershipStructOutput;
    channel: IArchitectBase.ChannelInfoStructOutput;
    prepay: IArchitectBase.PrepayStructOutput;
  };
}

export interface ICreateSpaceInterface extends utils.Interface {
  functions: {
    "createSpace((string,string,string,string,((string,string,uint256,uint256,uint64,address,address,uint256,address),(bool,address[],bytes,bool),string[]),(string)))": FunctionFragment;
    "createSpaceWithPrepay(((string,string,string,string),((string,string,uint256,uint256,uint64,address,address,uint256,address),(bool,address[],bytes,bool),string[]),(string),(uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createSpace" | "createSpaceWithPrepay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSpace",
    values: [IArchitectBase.SpaceInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpaceWithPrepay",
    values: [IArchitectBase.CreateSpaceStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpaceWithPrepay",
    data: BytesLike
  ): Result;

  events: {
    "Architect__ProxyInitializerSet(address)": EventFragment;
    "SpaceCreated(address,uint256,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "Architect__ProxyInitializerSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceCreated"): EventFragment;
}

export interface Architect__ProxyInitializerSetEventObject {
  proxyInitializer: string;
}
export type Architect__ProxyInitializerSetEvent = TypedEvent<
  [string],
  Architect__ProxyInitializerSetEventObject
>;

export type Architect__ProxyInitializerSetEventFilter =
  TypedEventFilter<Architect__ProxyInitializerSetEvent>;

export interface SpaceCreatedEventObject {
  owner: string;
  tokenId: BigNumber;
  space: string;
}
export type SpaceCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  SpaceCreatedEventObject
>;

export type SpaceCreatedEventFilter = TypedEventFilter<SpaceCreatedEvent>;

export interface ICreateSpace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreateSpaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSpace(
      SpaceInfo: IArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSpaceWithPrepay(
      createSpace: IArchitectBase.CreateSpaceStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createSpace(
    SpaceInfo: IArchitectBase.SpaceInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSpaceWithPrepay(
    createSpace: IArchitectBase.CreateSpaceStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSpace(
      SpaceInfo: IArchitectBase.SpaceInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createSpaceWithPrepay(
      createSpace: IArchitectBase.CreateSpaceStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Architect__ProxyInitializerSet(address)"(
      proxyInitializer?: PromiseOrValue<string> | null
    ): Architect__ProxyInitializerSetEventFilter;
    Architect__ProxyInitializerSet(
      proxyInitializer?: PromiseOrValue<string> | null
    ): Architect__ProxyInitializerSetEventFilter;

    "SpaceCreated(address,uint256,address)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      space?: PromiseOrValue<string> | null
    ): SpaceCreatedEventFilter;
    SpaceCreated(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      space?: PromiseOrValue<string> | null
    ): SpaceCreatedEventFilter;
  };

  estimateGas: {
    createSpace(
      SpaceInfo: IArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSpaceWithPrepay(
      createSpace: IArchitectBase.CreateSpaceStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSpace(
      SpaceInfo: IArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSpaceWithPrepay(
      createSpace: IArchitectBase.CreateSpaceStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

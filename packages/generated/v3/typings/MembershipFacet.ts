/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMembershipBase {
  export type MembershipStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    maxSupply: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    feeRecipient: PromiseOrValue<string>;
    freeAllocation: PromiseOrValue<BigNumberish>;
    pricingModule: PromiseOrValue<string>;
  };

  export type MembershipStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    price: BigNumber;
    maxSupply: BigNumber;
    duration: BigNumber;
    currency: string;
    feeRecipient: string;
    freeAllocation: BigNumber;
    pricingModule: string;
  };
}

export declare namespace IRuleEntitlement {
  export type OperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type OperationStructOutput = [number, number] & {
    opType: number;
    index: number;
  };

  export type CheckOperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    threshold: PromiseOrValue<BigNumberish>;
  };

  export type CheckOperationStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber
  ] & {
    opType: number;
    chainId: BigNumber;
    contractAddress: string;
    threshold: BigNumber;
  };

  export type LogicalOperationStruct = {
    logOpType: PromiseOrValue<BigNumberish>;
    leftOperationIndex: PromiseOrValue<BigNumberish>;
    rightOperationIndex: PromiseOrValue<BigNumberish>;
  };

  export type LogicalOperationStructOutput = [number, number, number] & {
    logOpType: number;
    leftOperationIndex: number;
    rightOperationIndex: number;
  };

  export type RuleDataStruct = {
    operations: IRuleEntitlement.OperationStruct[];
    checkOperations: IRuleEntitlement.CheckOperationStruct[];
    logicalOperations: IRuleEntitlement.LogicalOperationStruct[];
  };

  export type RuleDataStructOutput = [
    IRuleEntitlement.OperationStructOutput[],
    IRuleEntitlement.CheckOperationStructOutput[],
    IRuleEntitlement.LogicalOperationStructOutput[]
  ] & {
    operations: IRuleEntitlement.OperationStructOutput[];
    checkOperations: IRuleEntitlement.CheckOperationStructOutput[];
    logicalOperations: IRuleEntitlement.LogicalOperationStructOutput[];
  };
}

export interface MembershipFacetInterface extends utils.Interface {
  functions: {
    "__ERC721A_init(string,string)": FunctionFragment;
    "__EntitlementGated_init(address)": FunctionFragment;
    "__Membership_init((string,string,uint256,uint256,uint64,address,address,uint256,address),address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "expiresAt(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMembershipCurrency()": FunctionFragment;
    "getMembershipDuration()": FunctionFragment;
    "getMembershipFreeAllocation()": FunctionFragment;
    "getMembershipImage()": FunctionFragment;
    "getMembershipLimit()": FunctionFragment;
    "getMembershipPrice()": FunctionFragment;
    "getMembershipPricingModule()": FunctionFragment;
    "getMembershipRenewalPrice(uint256)": FunctionFragment;
    "getRuleData(bytes32,uint256)": FunctionFragment;
    "getSpaceFactory()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "joinSpace(address)": FunctionFragment;
    "joinSpaceWithReferral(address,address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "postEntitlementCheckResult(bytes32,uint256,uint8)": FunctionFragment;
    "renewMembership(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMembershipFreeAllocation(uint256)": FunctionFragment;
    "setMembershipImage(string)": FunctionFragment;
    "setMembershipLimit(uint256)": FunctionFragment;
    "setMembershipPrice(uint256)": FunctionFragment;
    "setMembershipPricingModule(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__ERC721A_init"
      | "__EntitlementGated_init"
      | "__Membership_init"
      | "approve"
      | "balanceOf"
      | "expiresAt"
      | "getApproved"
      | "getMembershipCurrency"
      | "getMembershipDuration"
      | "getMembershipFreeAllocation"
      | "getMembershipImage"
      | "getMembershipLimit"
      | "getMembershipPrice"
      | "getMembershipPricingModule"
      | "getMembershipRenewalPrice"
      | "getRuleData"
      | "getSpaceFactory"
      | "isApprovedForAll"
      | "joinSpace"
      | "joinSpaceWithReferral"
      | "name"
      | "ownerOf"
      | "postEntitlementCheckResult"
      | "renewMembership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setMembershipFreeAllocation"
      | "setMembershipImage"
      | "setMembershipLimit"
      | "setMembershipPrice"
      | "setMembershipPricingModule"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__ERC721A_init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__EntitlementGated_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__Membership_init",
    values: [IMembershipBase.MembershipStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiresAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipFreeAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipImage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipPricingModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipRenewalPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuleData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSpace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSpaceWithReferral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "postEntitlementCheckResult",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renewMembership",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipFreeAllocation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipImage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipPricingModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__ERC721A_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__EntitlementGated_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Membership_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiresAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipFreeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipPricingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipRenewalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinSpace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinSpaceWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postEntitlementCheckResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipFreeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipPricingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Banned(address,uint256)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "EntitlementCheckResultPosted(bytes32,uint8)": EventFragment;
    "Initialized(uint32)": EventFragment;
    "InterfaceAdded(bytes4)": EventFragment;
    "InterfaceRemoved(bytes4)": EventFragment;
    "MembershipCurrencyUpdated(address)": EventFragment;
    "MembershipFeeRecipientUpdated(address)": EventFragment;
    "MembershipFreeAllocationUpdated(uint256)": EventFragment;
    "MembershipLimitUpdated(uint256)": EventFragment;
    "MembershipPriceUpdated(uint256)": EventFragment;
    "MembershipTokenIssued(address,uint256)": EventFragment;
    "MembershipTokenRejected(address)": EventFragment;
    "MembershipWithdrawal(address,uint256)": EventFragment;
    "Membership__ReferralCreated(uint256,uint16)": EventFragment;
    "Membership__ReferralRemoved(uint256)": EventFragment;
    "Membership__ReferralTimeCreated(uint256,uint16,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleCreated(address,uint256)": EventFragment;
    "RoleRemoved(address,uint256)": EventFragment;
    "RoleUpdated(address,uint256)": EventFragment;
    "SubscriptionUpdate(uint256,uint64)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unbanned(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Banned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EntitlementCheckResultPosted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipCurrencyUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipFeeRecipientUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipFreeAllocationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipTokenIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipTokenRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipWithdrawal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Membership__ReferralCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Membership__ReferralRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Membership__ReferralTimeCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BannedEventObject {
  moderator: string;
  tokenId: BigNumber;
}
export type BannedEvent = TypedEvent<[string, BigNumber], BannedEventObject>;

export type BannedEventFilter = TypedEventFilter<BannedEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface EntitlementCheckResultPostedEventObject {
  transactionId: string;
  result: number;
}
export type EntitlementCheckResultPostedEvent = TypedEvent<
  [string, number],
  EntitlementCheckResultPostedEventObject
>;

export type EntitlementCheckResultPostedEventFilter =
  TypedEventFilter<EntitlementCheckResultPostedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterfaceAddedEventObject {
  interfaceId: string;
}
export type InterfaceAddedEvent = TypedEvent<
  [string],
  InterfaceAddedEventObject
>;

export type InterfaceAddedEventFilter = TypedEventFilter<InterfaceAddedEvent>;

export interface InterfaceRemovedEventObject {
  interfaceId: string;
}
export type InterfaceRemovedEvent = TypedEvent<
  [string],
  InterfaceRemovedEventObject
>;

export type InterfaceRemovedEventFilter =
  TypedEventFilter<InterfaceRemovedEvent>;

export interface MembershipCurrencyUpdatedEventObject {
  currency: string;
}
export type MembershipCurrencyUpdatedEvent = TypedEvent<
  [string],
  MembershipCurrencyUpdatedEventObject
>;

export type MembershipCurrencyUpdatedEventFilter =
  TypedEventFilter<MembershipCurrencyUpdatedEvent>;

export interface MembershipFeeRecipientUpdatedEventObject {
  recipient: string;
}
export type MembershipFeeRecipientUpdatedEvent = TypedEvent<
  [string],
  MembershipFeeRecipientUpdatedEventObject
>;

export type MembershipFeeRecipientUpdatedEventFilter =
  TypedEventFilter<MembershipFeeRecipientUpdatedEvent>;

export interface MembershipFreeAllocationUpdatedEventObject {
  allocation: BigNumber;
}
export type MembershipFreeAllocationUpdatedEvent = TypedEvent<
  [BigNumber],
  MembershipFreeAllocationUpdatedEventObject
>;

export type MembershipFreeAllocationUpdatedEventFilter =
  TypedEventFilter<MembershipFreeAllocationUpdatedEvent>;

export interface MembershipLimitUpdatedEventObject {
  limit: BigNumber;
}
export type MembershipLimitUpdatedEvent = TypedEvent<
  [BigNumber],
  MembershipLimitUpdatedEventObject
>;

export type MembershipLimitUpdatedEventFilter =
  TypedEventFilter<MembershipLimitUpdatedEvent>;

export interface MembershipPriceUpdatedEventObject {
  price: BigNumber;
}
export type MembershipPriceUpdatedEvent = TypedEvent<
  [BigNumber],
  MembershipPriceUpdatedEventObject
>;

export type MembershipPriceUpdatedEventFilter =
  TypedEventFilter<MembershipPriceUpdatedEvent>;

export interface MembershipTokenIssuedEventObject {
  recipient: string;
  tokenId: BigNumber;
}
export type MembershipTokenIssuedEvent = TypedEvent<
  [string, BigNumber],
  MembershipTokenIssuedEventObject
>;

export type MembershipTokenIssuedEventFilter =
  TypedEventFilter<MembershipTokenIssuedEvent>;

export interface MembershipTokenRejectedEventObject {
  recipient: string;
}
export type MembershipTokenRejectedEvent = TypedEvent<
  [string],
  MembershipTokenRejectedEventObject
>;

export type MembershipTokenRejectedEventFilter =
  TypedEventFilter<MembershipTokenRejectedEvent>;

export interface MembershipWithdrawalEventObject {
  recipient: string;
  amount: BigNumber;
}
export type MembershipWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  MembershipWithdrawalEventObject
>;

export type MembershipWithdrawalEventFilter =
  TypedEventFilter<MembershipWithdrawalEvent>;

export interface Membership__ReferralCreatedEventObject {
  code: BigNumber;
  bps: number;
}
export type Membership__ReferralCreatedEvent = TypedEvent<
  [BigNumber, number],
  Membership__ReferralCreatedEventObject
>;

export type Membership__ReferralCreatedEventFilter =
  TypedEventFilter<Membership__ReferralCreatedEvent>;

export interface Membership__ReferralRemovedEventObject {
  code: BigNumber;
}
export type Membership__ReferralRemovedEvent = TypedEvent<
  [BigNumber],
  Membership__ReferralRemovedEventObject
>;

export type Membership__ReferralRemovedEventFilter =
  TypedEventFilter<Membership__ReferralRemovedEvent>;

export interface Membership__ReferralTimeCreatedEventObject {
  code: BigNumber;
  bps: number;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type Membership__ReferralTimeCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber],
  Membership__ReferralTimeCreatedEventObject
>;

export type Membership__ReferralTimeCreatedEventFilter =
  TypedEventFilter<Membership__ReferralTimeCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleCreatedEventObject {
  creator: string;
  roleId: BigNumber;
}
export type RoleCreatedEvent = TypedEvent<
  [string, BigNumber],
  RoleCreatedEventObject
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export interface RoleRemovedEventObject {
  remover: string;
  roleId: BigNumber;
}
export type RoleRemovedEvent = TypedEvent<
  [string, BigNumber],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface RoleUpdatedEventObject {
  updater: string;
  roleId: BigNumber;
}
export type RoleUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RoleUpdatedEventObject
>;

export type RoleUpdatedEventFilter = TypedEventFilter<RoleUpdatedEvent>;

export interface SubscriptionUpdateEventObject {
  tokenId: BigNumber;
  expiration: BigNumber;
}
export type SubscriptionUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  SubscriptionUpdateEventObject
>;

export type SubscriptionUpdateEventFilter =
  TypedEventFilter<SubscriptionUpdateEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnbannedEventObject {
  moderator: string;
  tokenId: BigNumber;
}
export type UnbannedEvent = TypedEvent<
  [string, BigNumber],
  UnbannedEventObject
>;

export type UnbannedEventFilter = TypedEventFilter<UnbannedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MembershipFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MembershipFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __ERC721A_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __Membership_init(
      info: IMembershipBase.MembershipStruct,
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expiresAt(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMembershipCurrency(overrides?: CallOverrides): Promise<[string]>;

    getMembershipDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMembershipFreeAllocation(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMembershipImage(overrides?: CallOverrides): Promise<[string]>;

    getMembershipLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMembershipPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMembershipPricingModule(overrides?: CallOverrides): Promise<[string]>;

    getMembershipRenewalPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRuleEntitlement.RuleDataStructOutput]>;

    getSpaceFactory(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinSpace(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinSpaceWithReferral(
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipFreeAllocation(
      newAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipImage(
      newImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipPricingModule(
      pricingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __ERC721A_init(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __EntitlementGated_init(
    entitlementChecker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __Membership_init(
    info: IMembershipBase.MembershipStruct,
    spaceFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expiresAt(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMembershipCurrency(overrides?: CallOverrides): Promise<string>;

  getMembershipDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getMembershipFreeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  getMembershipImage(overrides?: CallOverrides): Promise<string>;

  getMembershipLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getMembershipPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMembershipPricingModule(overrides?: CallOverrides): Promise<string>;

  getMembershipRenewalPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRuleData(
    transactionId: PromiseOrValue<BytesLike>,
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRuleEntitlement.RuleDataStructOutput>;

  getSpaceFactory(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinSpace(
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinSpaceWithReferral(
    receiver: PromiseOrValue<string>,
    referrer: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  postEntitlementCheckResult(
    transactionId: PromiseOrValue<BytesLike>,
    roleId: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewMembership(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipFreeAllocation(
    newAllocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipImage(
    newImage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipLimit(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipPricingModule(
    pricingModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __ERC721A_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __Membership_init(
      info: IMembershipBase.MembershipStruct,
      spaceFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiresAt(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMembershipCurrency(overrides?: CallOverrides): Promise<string>;

    getMembershipDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipFreeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipImage(overrides?: CallOverrides): Promise<string>;

    getMembershipLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipPricingModule(overrides?: CallOverrides): Promise<string>;

    getMembershipRenewalPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRuleEntitlement.RuleDataStructOutput>;

    getSpaceFactory(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinSpace(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    joinSpaceWithReferral(
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipFreeAllocation(
      newAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipImage(
      newImage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipPricingModule(
      pricingModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Banned(address,uint256)"(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BannedEventFilter;
    Banned(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BannedEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;

    "EntitlementCheckResultPosted(bytes32,uint8)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
    EntitlementCheckResultPosted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;

    "Initialized(uint32)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterfaceAdded(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;
    InterfaceAdded(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;

    "InterfaceRemoved(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;
    InterfaceRemoved(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;

    "MembershipCurrencyUpdated(address)"(
      currency?: PromiseOrValue<string> | null
    ): MembershipCurrencyUpdatedEventFilter;
    MembershipCurrencyUpdated(
      currency?: PromiseOrValue<string> | null
    ): MembershipCurrencyUpdatedEventFilter;

    "MembershipFeeRecipientUpdated(address)"(
      recipient?: PromiseOrValue<string> | null
    ): MembershipFeeRecipientUpdatedEventFilter;
    MembershipFeeRecipientUpdated(
      recipient?: PromiseOrValue<string> | null
    ): MembershipFeeRecipientUpdatedEventFilter;

    "MembershipFreeAllocationUpdated(uint256)"(
      allocation?: PromiseOrValue<BigNumberish> | null
    ): MembershipFreeAllocationUpdatedEventFilter;
    MembershipFreeAllocationUpdated(
      allocation?: PromiseOrValue<BigNumberish> | null
    ): MembershipFreeAllocationUpdatedEventFilter;

    "MembershipLimitUpdated(uint256)"(
      limit?: PromiseOrValue<BigNumberish> | null
    ): MembershipLimitUpdatedEventFilter;
    MembershipLimitUpdated(
      limit?: PromiseOrValue<BigNumberish> | null
    ): MembershipLimitUpdatedEventFilter;

    "MembershipPriceUpdated(uint256)"(
      price?: PromiseOrValue<BigNumberish> | null
    ): MembershipPriceUpdatedEventFilter;
    MembershipPriceUpdated(
      price?: PromiseOrValue<BigNumberish> | null
    ): MembershipPriceUpdatedEventFilter;

    "MembershipTokenIssued(address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MembershipTokenIssuedEventFilter;
    MembershipTokenIssued(
      recipient?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MembershipTokenIssuedEventFilter;

    "MembershipTokenRejected(address)"(
      recipient?: PromiseOrValue<string> | null
    ): MembershipTokenRejectedEventFilter;
    MembershipTokenRejected(
      recipient?: PromiseOrValue<string> | null
    ): MembershipTokenRejectedEventFilter;

    "MembershipWithdrawal(address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): MembershipWithdrawalEventFilter;
    MembershipWithdrawal(
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): MembershipWithdrawalEventFilter;

    "Membership__ReferralCreated(uint256,uint16)"(
      code?: PromiseOrValue<BigNumberish> | null,
      bps?: null
    ): Membership__ReferralCreatedEventFilter;
    Membership__ReferralCreated(
      code?: PromiseOrValue<BigNumberish> | null,
      bps?: null
    ): Membership__ReferralCreatedEventFilter;

    "Membership__ReferralRemoved(uint256)"(
      code?: PromiseOrValue<BigNumberish> | null
    ): Membership__ReferralRemovedEventFilter;
    Membership__ReferralRemoved(
      code?: PromiseOrValue<BigNumberish> | null
    ): Membership__ReferralRemovedEventFilter;

    "Membership__ReferralTimeCreated(uint256,uint16,uint256,uint256)"(
      code?: PromiseOrValue<BigNumberish> | null,
      bps?: null,
      startTime?: null,
      endTime?: null
    ): Membership__ReferralTimeCreatedEventFilter;
    Membership__ReferralTimeCreated(
      code?: PromiseOrValue<BigNumberish> | null,
      bps?: null,
      startTime?: null,
      endTime?: null
    ): Membership__ReferralTimeCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleCreated(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleCreatedEventFilter;
    RoleCreated(
      creator?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleCreatedEventFilter;

    "RoleRemoved(address,uint256)"(
      remover?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      remover?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleRemovedEventFilter;

    "RoleUpdated(address,uint256)"(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleUpdatedEventFilter;
    RoleUpdated(
      updater?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): RoleUpdatedEventFilter;

    "SubscriptionUpdate(uint256,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      expiration?: null
    ): SubscriptionUpdateEventFilter;
    SubscriptionUpdate(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      expiration?: null
    ): SubscriptionUpdateEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unbanned(address,uint256)"(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnbannedEventFilter;
    Unbanned(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnbannedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    __ERC721A_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __Membership_init(
      info: IMembershipBase.MembershipStruct,
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiresAt(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembershipCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipFreeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipImage(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipPricingModule(overrides?: CallOverrides): Promise<BigNumber>;

    getMembershipRenewalPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceFactory(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinSpace(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinSpaceWithReferral(
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipFreeAllocation(
      newAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipImage(
      newImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipPricingModule(
      pricingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __ERC721A_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __Membership_init(
      info: IMembershipBase.MembershipStruct,
      spaceFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiresAt(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipFreeAllocation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipImage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipPricingModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipRenewalPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinSpace(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinSpaceWithReferral(
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      roleId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipFreeAllocation(
      newAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipImage(
      newImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipPricingModule(
      pricingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

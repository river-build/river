import { BigNumberish, ethers } from 'ethers';
import { ChannelDetails, ChannelMetadata, EntitlementDetails, EntitlementModuleType, EntitlementShim, Permission, RoleDetails, RoleEntitlements } from '../ContractTypes';
import { IChannelShim } from './IChannelShim';
import { IRolesBase, IRolesShim } from './IRolesShim';
import { ISpaceOwnerBase, ISpaceOwnerShim } from './ISpaceOwnerShim';
import { IEntitlementsShim } from './IEntitlementsShim';
import { IMulticallShim } from './IMulticallShim';
import { OwnableFacetShim } from './OwnableFacetShim';
import { TokenPausableFacetShim } from './TokenPausableFacetShim';
import { IMembershipShim } from './IMembershipShim';
import { IBanningShim } from './IBanningShim';
import { IERC721AQueryableShim } from './IERC721AQueryableShim';
import { IEntitlementDataQueryableShim } from './IEntitlementDataQueryableShim';
import { ContractVersion } from '../IStaticContractsInfo';
interface SpaceConstructorArgs {
    address: string;
    spaceId: string;
    version: ContractVersion;
    provider: ethers.providers.Provider | undefined;
    spaceOwnerAddress: string;
}
export declare class Space {
    private readonly address;
    private readonly addressToEntitlement;
    private readonly spaceId;
    private readonly version;
    readonly provider: ethers.providers.Provider | undefined;
    private readonly channel;
    private readonly entitlements;
    private readonly multicall;
    private readonly ownable;
    private readonly pausable;
    private readonly roles;
    private readonly spaceOwner;
    private readonly membership;
    private readonly banning;
    private readonly erc721AQueryable;
    private readonly entitlementDataQueryable;
    constructor({ address, version, spaceId, provider, spaceOwnerAddress }: SpaceConstructorArgs);
    private getAllShims;
    get Address(): string;
    get SpaceId(): string;
    get Channels(): IChannelShim;
    get Multicall(): IMulticallShim;
    get Ownable(): OwnableFacetShim;
    get Pausable(): TokenPausableFacetShim;
    get Roles(): IRolesShim;
    get Entitlements(): IEntitlementsShim;
    get SpaceOwner(): ISpaceOwnerShim;
    get Membership(): IMembershipShim;
    get Banning(): IBanningShim;
    get ERC721AQueryable(): IERC721AQueryableShim;
    get EntitlementDataQueryable(): IEntitlementDataQueryableShim;
    getSpaceInfo(): Promise<ISpaceOwnerBase.SpaceStruct>;
    getRole(roleId: BigNumberish): Promise<RoleDetails | null>;
    getChannel(channelNetworkId: string): Promise<ChannelDetails | null>;
    getChannelMetadata(channelNetworkId: string): Promise<ChannelMetadata | null>;
    getChannels(): Promise<ChannelMetadata[]>;
    getChannelRoles(channelNetworkId: string): Promise<IRolesBase.RoleStructOutput[]>;
    getPermissionsByRoleId(roleId: number): Promise<Permission[]>;
    private getChannelRoleEntitlements;
    findEntitlementByType(entitlementType: EntitlementModuleType): Promise<EntitlementShim | null>;
    parseError(error: unknown): Error;
    parseLog(log: ethers.providers.Log): ethers.utils.LogDescription;
    private getEntitlementByAddress;
    private getRoleInfo;
    getEntitlementShims(): Promise<EntitlementShim[]>;
    getEntitlementDetails(entitlementShims: EntitlementShim[], roleId: BigNumberish): Promise<EntitlementDetails>;
    private getChannelsWithRole;
    private getRolesInfo;
    getRoleEntitlements(entitlementShims: EntitlementShim[], roleId: BigNumberish): Promise<RoleEntitlements | null>;
}
export {};
//# sourceMappingURL=Space.d.ts.map
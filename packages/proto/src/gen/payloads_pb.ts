// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file payloads.proto (package river, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message river.ChannelMessage
 */
export class ChannelMessage extends Message<ChannelMessage> {
  /**
   * @generated from oneof river.ChannelMessage.payload
   */
  payload: {
    /**
     * @generated from field: river.ChannelMessage.Post post = 1;
     */
    value: ChannelMessage_Post;
    case: "post";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Reaction reaction = 2;
     */
    value: ChannelMessage_Reaction;
    case: "reaction";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Edit edit = 3;
     */
    value: ChannelMessage_Edit;
    case: "edit";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Redaction redaction = 4;
     */
    value: ChannelMessage_Redaction;
    case: "redaction";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChannelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post", kind: "message", T: ChannelMessage_Post, oneof: "payload" },
    { no: 2, name: "reaction", kind: "message", T: ChannelMessage_Reaction, oneof: "payload" },
    { no: 3, name: "edit", kind: "message", T: ChannelMessage_Edit, oneof: "payload" },
    { no: 4, name: "redaction", kind: "message", T: ChannelMessage_Redaction, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage {
    return new ChannelMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage {
    return new ChannelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage {
    return new ChannelMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage | PlainMessage<ChannelMessage> | undefined, b: ChannelMessage | PlainMessage<ChannelMessage> | undefined): boolean {
    return proto3.util.equals(ChannelMessage, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Reaction
 */
export class ChannelMessage_Reaction extends Message<ChannelMessage_Reaction> {
  /**
   * @generated from field: string ref_event_id = 1;
   */
  refEventId = "";

  /**
   * @generated from field: string reaction = 2;
   */
  reaction = "";

  constructor(data?: PartialMessage<ChannelMessage_Reaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Reaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Reaction {
    return new ChannelMessage_Reaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Reaction {
    return new ChannelMessage_Reaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Reaction {
    return new ChannelMessage_Reaction().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Reaction | PlainMessage<ChannelMessage_Reaction> | undefined, b: ChannelMessage_Reaction | PlainMessage<ChannelMessage_Reaction> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Reaction, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Edit
 */
export class ChannelMessage_Edit extends Message<ChannelMessage_Edit> {
  /**
   * @generated from field: string ref_event_id = 1;
   */
  refEventId = "";

  /**
   * @generated from field: river.ChannelMessage.Post post = 2;
   */
  post?: ChannelMessage_Post;

  constructor(data?: PartialMessage<ChannelMessage_Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "post", kind: "message", T: ChannelMessage_Post },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Edit {
    return new ChannelMessage_Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Edit {
    return new ChannelMessage_Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Edit {
    return new ChannelMessage_Edit().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Edit | PlainMessage<ChannelMessage_Edit> | undefined, b: ChannelMessage_Edit | PlainMessage<ChannelMessage_Edit> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Edit, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Redaction
 */
export class ChannelMessage_Redaction extends Message<ChannelMessage_Redaction> {
  /**
   * @generated from field: string ref_event_id = 1;
   */
  refEventId = "";

  /**
   * @generated from field: optional string reason = 2;
   */
  reason?: string;

  constructor(data?: PartialMessage<ChannelMessage_Redaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Redaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Redaction {
    return new ChannelMessage_Redaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Redaction {
    return new ChannelMessage_Redaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Redaction {
    return new ChannelMessage_Redaction().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Redaction | PlainMessage<ChannelMessage_Redaction> | undefined, b: ChannelMessage_Redaction | PlainMessage<ChannelMessage_Redaction> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Redaction, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post
 */
export class ChannelMessage_Post extends Message<ChannelMessage_Post> {
  /**
   * @generated from field: optional string thread_id = 1;
   */
  threadId?: string;

  /**
   * @generated from field: optional string thread_preview = 2;
   */
  threadPreview?: string;

  /**
   * @generated from field: optional string reply_id = 3;
   */
  replyId?: string;

  /**
   * @generated from field: optional string reply_preview = 4;
   */
  replyPreview?: string;

  /**
   * @generated from oneof river.ChannelMessage.Post.content
   */
  content: {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.Text text = 101;
     */
    value: ChannelMessage_Post_Content_Text;
    case: "text";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.Image image = 102;
     */
    value: ChannelMessage_Post_Content_Image;
    case: "image";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.GM gm = 103;
     */
    value: ChannelMessage_Post_Content_GM;
    case: "gm";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChannelMessage_Post>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thread_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "thread_preview", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "reply_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "reply_preview", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 101, name: "text", kind: "message", T: ChannelMessage_Post_Content_Text, oneof: "content" },
    { no: 102, name: "image", kind: "message", T: ChannelMessage_Post_Content_Image, oneof: "content" },
    { no: 103, name: "gm", kind: "message", T: ChannelMessage_Post_Content_GM, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post {
    return new ChannelMessage_Post().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post {
    return new ChannelMessage_Post().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post {
    return new ChannelMessage_Post().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post | PlainMessage<ChannelMessage_Post> | undefined, b: ChannelMessage_Post | PlainMessage<ChannelMessage_Post> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Mention
 */
export class ChannelMessage_Post_Mention extends Message<ChannelMessage_Post_Mention> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from oneof river.ChannelMessage.Post.Mention.mentionBehavior
   */
  mentionBehavior: {
    /**
     * @generated from field: google.protobuf.Empty at_channel = 100;
     */
    value: Empty;
    case: "atChannel";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.RoleMention at_role = 101;
     */
    value: ChannelMessage_Post_RoleMention;
    case: "atRole";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChannelMessage_Post_Mention>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Mention";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "at_channel", kind: "message", T: Empty, oneof: "mentionBehavior" },
    { no: 101, name: "at_role", kind: "message", T: ChannelMessage_Post_RoleMention, oneof: "mentionBehavior" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Mention {
    return new ChannelMessage_Post_Mention().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Mention {
    return new ChannelMessage_Post_Mention().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Mention {
    return new ChannelMessage_Post_Mention().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Mention | PlainMessage<ChannelMessage_Post_Mention> | undefined, b: ChannelMessage_Post_Mention | PlainMessage<ChannelMessage_Post_Mention> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Mention, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.RoleMention
 */
export class ChannelMessage_Post_RoleMention extends Message<ChannelMessage_Post_RoleMention> {
  /**
   * @generated from field: int32 role_id = 1;
   */
  roleId = 0;

  constructor(data?: PartialMessage<ChannelMessage_Post_RoleMention>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.RoleMention";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_RoleMention {
    return new ChannelMessage_Post_RoleMention().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_RoleMention {
    return new ChannelMessage_Post_RoleMention().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_RoleMention {
    return new ChannelMessage_Post_RoleMention().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_RoleMention | PlainMessage<ChannelMessage_Post_RoleMention> | undefined, b: ChannelMessage_Post_RoleMention | PlainMessage<ChannelMessage_Post_RoleMention> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_RoleMention, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Attachment
 */
export class ChannelMessage_Post_Attachment extends Message<ChannelMessage_Post_Attachment> {
  /**
   * @generated from oneof river.ChannelMessage.Post.Attachment.content
   */
  content: {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.Image image = 101;
     */
    value: ChannelMessage_Post_Content_Image;
    case: "image";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.EmbeddedMedia embeddedMedia = 102;
     */
    value: ChannelMessage_Post_Content_EmbeddedMedia;
    case: "embeddedMedia";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.ChunkedMedia chunkedMedia = 103;
     */
    value: ChannelMessage_Post_Content_ChunkedMedia;
    case: "chunkedMedia";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.EmbeddedMessage embeddedMessage = 104;
     */
    value: ChannelMessage_Post_Content_EmbeddedMessage;
    case: "embeddedMessage";
  } | {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.UnfurledURL unfurledUrl = 105;
     */
    value: ChannelMessage_Post_Content_UnfurledURL;
    case: "unfurledUrl";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChannelMessage_Post_Attachment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Attachment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "image", kind: "message", T: ChannelMessage_Post_Content_Image, oneof: "content" },
    { no: 102, name: "embeddedMedia", kind: "message", T: ChannelMessage_Post_Content_EmbeddedMedia, oneof: "content" },
    { no: 103, name: "chunkedMedia", kind: "message", T: ChannelMessage_Post_Content_ChunkedMedia, oneof: "content" },
    { no: 104, name: "embeddedMessage", kind: "message", T: ChannelMessage_Post_Content_EmbeddedMessage, oneof: "content" },
    { no: 105, name: "unfurledUrl", kind: "message", T: ChannelMessage_Post_Content_UnfurledURL, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Attachment {
    return new ChannelMessage_Post_Attachment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Attachment {
    return new ChannelMessage_Post_Attachment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Attachment {
    return new ChannelMessage_Post_Attachment().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Attachment | PlainMessage<ChannelMessage_Post_Attachment> | undefined, b: ChannelMessage_Post_Attachment | PlainMessage<ChannelMessage_Post_Attachment> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Attachment, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content
 */
export class ChannelMessage_Post_Content extends Message<ChannelMessage_Post_Content> {
  constructor(data?: PartialMessage<ChannelMessage_Post_Content>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content {
    return new ChannelMessage_Post_Content().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content {
    return new ChannelMessage_Post_Content().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content {
    return new ChannelMessage_Post_Content().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content | PlainMessage<ChannelMessage_Post_Content> | undefined, b: ChannelMessage_Post_Content | PlainMessage<ChannelMessage_Post_Content> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.Text
 */
export class ChannelMessage_Post_Content_Text extends Message<ChannelMessage_Post_Content_Text> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: repeated river.ChannelMessage.Post.Mention mentions = 2;
   */
  mentions: ChannelMessage_Post_Mention[] = [];

  /**
   * @generated from field: repeated river.ChannelMessage.Post.Attachment attachments = 3;
   */
  attachments: ChannelMessage_Post_Attachment[] = [];

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_Text>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.Text";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mentions", kind: "message", T: ChannelMessage_Post_Mention, repeated: true },
    { no: 3, name: "attachments", kind: "message", T: ChannelMessage_Post_Attachment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_Text {
    return new ChannelMessage_Post_Content_Text().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Text {
    return new ChannelMessage_Post_Content_Text().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Text {
    return new ChannelMessage_Post_Content_Text().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_Text | PlainMessage<ChannelMessage_Post_Content_Text> | undefined, b: ChannelMessage_Post_Content_Text | PlainMessage<ChannelMessage_Post_Content_Text> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_Text, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.Image
 */
export class ChannelMessage_Post_Content_Image extends Message<ChannelMessage_Post_Content_Image> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: river.ChannelMessage.Post.Content.Image.Info info = 2;
   */
  info?: ChannelMessage_Post_Content_Image_Info;

  /**
   * @generated from field: optional river.ChannelMessage.Post.Content.Image.Info thumbnail = 3;
   */
  thumbnail?: ChannelMessage_Post_Content_Image_Info;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "info", kind: "message", T: ChannelMessage_Post_Content_Image_Info },
    { no: 3, name: "thumbnail", kind: "message", T: ChannelMessage_Post_Content_Image_Info, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_Image {
    return new ChannelMessage_Post_Content_Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Image {
    return new ChannelMessage_Post_Content_Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Image {
    return new ChannelMessage_Post_Content_Image().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_Image | PlainMessage<ChannelMessage_Post_Content_Image> | undefined, b: ChannelMessage_Post_Content_Image | PlainMessage<ChannelMessage_Post_Content_Image> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_Image, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.Image.Info
 */
export class ChannelMessage_Post_Content_Image_Info extends Message<ChannelMessage_Post_Content_Image_Info> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string mimetype = 2;
   */
  mimetype = "";

  /**
   * @generated from field: optional int32 size = 3;
   */
  size?: number;

  /**
   * @generated from field: optional int32 width = 4;
   */
  width?: number;

  /**
   * @generated from field: optional int32 height = 5;
   */
  height?: number;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_Image_Info>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.Image.Info";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mimetype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_Image_Info {
    return new ChannelMessage_Post_Content_Image_Info().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Image_Info {
    return new ChannelMessage_Post_Content_Image_Info().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_Image_Info {
    return new ChannelMessage_Post_Content_Image_Info().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_Image_Info | PlainMessage<ChannelMessage_Post_Content_Image_Info> | undefined, b: ChannelMessage_Post_Content_Image_Info | PlainMessage<ChannelMessage_Post_Content_Image_Info> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_Image_Info, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.GM
 */
export class ChannelMessage_Post_Content_GM extends Message<ChannelMessage_Post_Content_GM> {
  /**
   * @generated from field: string type_url = 1;
   */
  typeUrl = "";

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: Uint8Array;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_GM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.GM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_GM {
    return new ChannelMessage_Post_Content_GM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_GM {
    return new ChannelMessage_Post_Content_GM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_GM {
    return new ChannelMessage_Post_Content_GM().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_GM | PlainMessage<ChannelMessage_Post_Content_GM> | undefined, b: ChannelMessage_Post_Content_GM | PlainMessage<ChannelMessage_Post_Content_GM> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_GM, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.MediaInfo
 */
export class ChannelMessage_Post_Content_MediaInfo extends Message<ChannelMessage_Post_Content_MediaInfo> {
  /**
   * @generated from field: string mimetype = 1;
   */
  mimetype = "";

  /**
   * @generated from field: int64 sizeBytes = 2;
   */
  sizeBytes = protoInt64.zero;

  /**
   * @generated from field: int32 widthPixels = 3;
   */
  widthPixels = 0;

  /**
   * @generated from field: int32 heightPixels = 4;
   */
  heightPixels = 0;

  /**
   * @generated from field: string filename = 5;
   */
  filename = "";

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_MediaInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.MediaInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mimetype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sizeBytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "widthPixels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "heightPixels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_MediaInfo {
    return new ChannelMessage_Post_Content_MediaInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_MediaInfo {
    return new ChannelMessage_Post_Content_MediaInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_MediaInfo {
    return new ChannelMessage_Post_Content_MediaInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_MediaInfo | PlainMessage<ChannelMessage_Post_Content_MediaInfo> | undefined, b: ChannelMessage_Post_Content_MediaInfo | PlainMessage<ChannelMessage_Post_Content_MediaInfo> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_MediaInfo, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.EmbeddedMedia
 */
export class ChannelMessage_Post_Content_EmbeddedMedia extends Message<ChannelMessage_Post_Content_EmbeddedMedia> {
  /**
   * @generated from field: river.ChannelMessage.Post.Content.MediaInfo info = 1;
   */
  info?: ChannelMessage_Post_Content_MediaInfo;

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_EmbeddedMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.EmbeddedMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: ChannelMessage_Post_Content_MediaInfo },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_EmbeddedMedia {
    return new ChannelMessage_Post_Content_EmbeddedMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMedia {
    return new ChannelMessage_Post_Content_EmbeddedMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMedia {
    return new ChannelMessage_Post_Content_EmbeddedMedia().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_EmbeddedMedia | PlainMessage<ChannelMessage_Post_Content_EmbeddedMedia> | undefined, b: ChannelMessage_Post_Content_EmbeddedMedia | PlainMessage<ChannelMessage_Post_Content_EmbeddedMedia> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_EmbeddedMedia, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.ChunkedMedia
 */
export class ChannelMessage_Post_Content_ChunkedMedia extends Message<ChannelMessage_Post_Content_ChunkedMedia> {
  /**
   * @generated from field: river.ChannelMessage.Post.Content.MediaInfo info = 1;
   */
  info?: ChannelMessage_Post_Content_MediaInfo;

  /**
   * @generated from field: string streamId = 2;
   */
  streamId = "";

  /**
   * @generated from field: river.ChannelMessage.Post.Content.EmbeddedMedia thumbnail = 3;
   */
  thumbnail?: ChannelMessage_Post_Content_EmbeddedMedia;

  /**
   * @generated from oneof river.ChannelMessage.Post.Content.ChunkedMedia.encryption
   */
  encryption: {
    /**
     * @generated from field: river.ChannelMessage.Post.Content.ChunkedMedia.AESGCM aesgcm = 101;
     */
    value: ChannelMessage_Post_Content_ChunkedMedia_AESGCM;
    case: "aesgcm";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_ChunkedMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.ChunkedMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: ChannelMessage_Post_Content_MediaInfo },
    { no: 2, name: "streamId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "thumbnail", kind: "message", T: ChannelMessage_Post_Content_EmbeddedMedia },
    { no: 101, name: "aesgcm", kind: "message", T: ChannelMessage_Post_Content_ChunkedMedia_AESGCM, oneof: "encryption" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_ChunkedMedia {
    return new ChannelMessage_Post_Content_ChunkedMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_ChunkedMedia {
    return new ChannelMessage_Post_Content_ChunkedMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_ChunkedMedia {
    return new ChannelMessage_Post_Content_ChunkedMedia().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_ChunkedMedia | PlainMessage<ChannelMessage_Post_Content_ChunkedMedia> | undefined, b: ChannelMessage_Post_Content_ChunkedMedia | PlainMessage<ChannelMessage_Post_Content_ChunkedMedia> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_ChunkedMedia, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.ChunkedMedia.AESGCM
 */
export class ChannelMessage_Post_Content_ChunkedMedia_AESGCM extends Message<ChannelMessage_Post_Content_ChunkedMedia_AESGCM> {
  /**
   * @generated from field: bytes iv = 1;
   */
  iv = new Uint8Array(0);

  /**
   * @generated from field: bytes secretKey = 2;
   */
  secretKey = new Uint8Array(0);

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_ChunkedMedia_AESGCM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.ChunkedMedia.AESGCM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iv", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "secretKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_ChunkedMedia_AESGCM {
    return new ChannelMessage_Post_Content_ChunkedMedia_AESGCM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_ChunkedMedia_AESGCM {
    return new ChannelMessage_Post_Content_ChunkedMedia_AESGCM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_ChunkedMedia_AESGCM {
    return new ChannelMessage_Post_Content_ChunkedMedia_AESGCM().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_ChunkedMedia_AESGCM | PlainMessage<ChannelMessage_Post_Content_ChunkedMedia_AESGCM> | undefined, b: ChannelMessage_Post_Content_ChunkedMedia_AESGCM | PlainMessage<ChannelMessage_Post_Content_ChunkedMedia_AESGCM> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_ChunkedMedia_AESGCM, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.EmbeddedMessage
 */
export class ChannelMessage_Post_Content_EmbeddedMessage extends Message<ChannelMessage_Post_Content_EmbeddedMessage> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: river.ChannelMessage.Post post = 2;
   */
  post?: ChannelMessage_Post;

  /**
   * @generated from field: river.ChannelMessage.Post.Content.EmbeddedMessage.Info info = 3;
   */
  info?: ChannelMessage_Post_Content_EmbeddedMessage_Info;

  /**
   * @generated from field: river.ChannelMessage.Post.Content.EmbeddedMessage.StaticInfo staticInfo = 4;
   */
  staticInfo?: ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_EmbeddedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.EmbeddedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "post", kind: "message", T: ChannelMessage_Post },
    { no: 3, name: "info", kind: "message", T: ChannelMessage_Post_Content_EmbeddedMessage_Info },
    { no: 4, name: "staticInfo", kind: "message", T: ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage {
    return new ChannelMessage_Post_Content_EmbeddedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage {
    return new ChannelMessage_Post_Content_EmbeddedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage {
    return new ChannelMessage_Post_Content_EmbeddedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_EmbeddedMessage | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage> | undefined, b: ChannelMessage_Post_Content_EmbeddedMessage | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_EmbeddedMessage, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.EmbeddedMessage.Info
 */
export class ChannelMessage_Post_Content_EmbeddedMessage_Info extends Message<ChannelMessage_Post_Content_EmbeddedMessage_Info> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: int64 createdAtEpochMs = 2;
   */
  createdAtEpochMs = protoInt64.zero;

  /**
   * @generated from field: string spaceId = 3;
   */
  spaceId = "";

  /**
   * @generated from field: string channelId = 4;
   */
  channelId = "";

  /**
   * @generated from field: string messageId = 5;
   */
  messageId = "";

  /**
   * @generated from field: optional string replyId = 6;
   */
  replyId?: string;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_EmbeddedMessage_Info>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.EmbeddedMessage.Info";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "createdAtEpochMs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "spaceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "channelId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "messageId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "replyId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_Info {
    return new ChannelMessage_Post_Content_EmbeddedMessage_Info().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_Info {
    return new ChannelMessage_Post_Content_EmbeddedMessage_Info().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_Info {
    return new ChannelMessage_Post_Content_EmbeddedMessage_Info().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_EmbeddedMessage_Info | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage_Info> | undefined, b: ChannelMessage_Post_Content_EmbeddedMessage_Info | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage_Info> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_EmbeddedMessage_Info, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.EmbeddedMessage.StaticInfo
 */
export class ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo extends Message<ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo> {
  /**
   * @generated from field: optional string userName = 1;
   */
  userName?: string;

  /**
   * @generated from field: optional string displayName = 2;
   */
  displayName?: string;

  /**
   * @generated from field: optional string channelName = 3;
   */
  channelName?: string;

  /**
   * @generated from field: optional string spaceName = 4;
   */
  spaceName?: string;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.EmbeddedMessage.StaticInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "displayName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "channelName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "spaceName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo {
    return new ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo {
    return new ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo {
    return new ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo> | undefined, b: ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo | PlainMessage<ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_EmbeddedMessage_StaticInfo, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.UnfurledURL
 */
export class ChannelMessage_Post_Content_UnfurledURL extends Message<ChannelMessage_Post_Content_UnfurledURL> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: optional river.ChannelMessage.Post.Content.UnfurledURL.Image image = 4;
   */
  image?: ChannelMessage_Post_Content_UnfurledURL_Image;

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_UnfurledURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.UnfurledURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image", kind: "message", T: ChannelMessage_Post_Content_UnfurledURL_Image, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_UnfurledURL {
    return new ChannelMessage_Post_Content_UnfurledURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_UnfurledURL {
    return new ChannelMessage_Post_Content_UnfurledURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_UnfurledURL {
    return new ChannelMessage_Post_Content_UnfurledURL().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_UnfurledURL | PlainMessage<ChannelMessage_Post_Content_UnfurledURL> | undefined, b: ChannelMessage_Post_Content_UnfurledURL | PlainMessage<ChannelMessage_Post_Content_UnfurledURL> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_UnfurledURL, a, b);
  }
}

/**
 * @generated from message river.ChannelMessage.Post.Content.UnfurledURL.Image
 */
export class ChannelMessage_Post_Content_UnfurledURL_Image extends Message<ChannelMessage_Post_Content_UnfurledURL_Image> {
  /**
   * @generated from field: int32 height = 1;
   */
  height = 0;

  /**
   * @generated from field: int32 width = 2;
   */
  width = 0;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<ChannelMessage_Post_Content_UnfurledURL_Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelMessage.Post.Content.UnfurledURL.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessage_Post_Content_UnfurledURL_Image {
    return new ChannelMessage_Post_Content_UnfurledURL_Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_UnfurledURL_Image {
    return new ChannelMessage_Post_Content_UnfurledURL_Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessage_Post_Content_UnfurledURL_Image {
    return new ChannelMessage_Post_Content_UnfurledURL_Image().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessage_Post_Content_UnfurledURL_Image | PlainMessage<ChannelMessage_Post_Content_UnfurledURL_Image> | undefined, b: ChannelMessage_Post_Content_UnfurledURL_Image | PlainMessage<ChannelMessage_Post_Content_UnfurledURL_Image> | undefined): boolean {
    return proto3.util.equals(ChannelMessage_Post_Content_UnfurledURL_Image, a, b);
  }
}

/**
 * @generated from message river.ChannelProperties
 */
export class ChannelProperties extends Message<ChannelProperties> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string topic = 2;
   */
  topic = "";

  constructor(data?: PartialMessage<ChannelProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.ChannelProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelProperties {
    return new ChannelProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelProperties {
    return new ChannelProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelProperties {
    return new ChannelProperties().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelProperties | PlainMessage<ChannelProperties> | undefined, b: ChannelProperties | PlainMessage<ChannelProperties> | undefined): boolean {
    return proto3.util.equals(ChannelProperties, a, b);
  }
}

/**
 * @generated from message river.UserMetadataProperties
 */
export class UserMetadataProperties extends Message<UserMetadataProperties> {
  /**
   * @generated from field: optional string username = 1;
   */
  username?: string;

  /**
   * @generated from field: optional string display_name = 2;
   */
  displayName?: string;

  constructor(data?: PartialMessage<UserMetadataProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.UserMetadataProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserMetadataProperties {
    return new UserMetadataProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserMetadataProperties {
    return new UserMetadataProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserMetadataProperties {
    return new UserMetadataProperties().fromJsonString(jsonString, options);
  }

  static equals(a: UserMetadataProperties | PlainMessage<UserMetadataProperties> | undefined, b: UserMetadataProperties | PlainMessage<UserMetadataProperties> | undefined): boolean {
    return proto3.util.equals(UserMetadataProperties, a, b);
  }
}

/**
 * @generated from message river.FullyReadMarkers
 */
export class FullyReadMarkers extends Message<FullyReadMarkers> {
  /**
   * map of ThreadId to Content
   *
   * @generated from field: map<string, river.FullyReadMarkers.Content> markers = 1;
   */
  markers: { [key: string]: FullyReadMarkers_Content } = {};

  constructor(data?: PartialMessage<FullyReadMarkers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.FullyReadMarkers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "markers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FullyReadMarkers_Content} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullyReadMarkers {
    return new FullyReadMarkers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullyReadMarkers {
    return new FullyReadMarkers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullyReadMarkers {
    return new FullyReadMarkers().fromJsonString(jsonString, options);
  }

  static equals(a: FullyReadMarkers | PlainMessage<FullyReadMarkers> | undefined, b: FullyReadMarkers | PlainMessage<FullyReadMarkers> | undefined): boolean {
    return proto3.util.equals(FullyReadMarkers, a, b);
  }
}

/**
 * @generated from message river.FullyReadMarkers.Content
 */
export class FullyReadMarkers_Content extends Message<FullyReadMarkers_Content> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * @generated from field: optional string thread_parent_id = 2;
   */
  threadParentId?: string;

  /**
   * id of the first unread event in the stream
   *
   * @generated from field: string event_id = 3;
   */
  eventId = "";

  /**
   * event number of the first unread event in the stream
   *
   * @generated from field: int64 event_num = 4;
   */
  eventNum = protoInt64.zero;

  /**
   * begining of the unread window, on marking as read, number is set to end+1
   *
   * @generated from field: int64 begin_unread_window = 5;
   */
  beginUnreadWindow = protoInt64.zero;

  /**
   * latest event seen by the code
   *
   * @generated from field: int64 end_unread_window = 6;
   */
  endUnreadWindow = protoInt64.zero;

  /**
   * @generated from field: bool is_unread = 7;
   */
  isUnread = false;

  /**
   * timestamp when the event was marked as read
   *
   * @generated from field: int64 markedReadAtTs = 8;
   */
  markedReadAtTs = protoInt64.zero;

  /**
   * @generated from field: int32 mentions = 9;
   */
  mentions = 0;

  constructor(data?: PartialMessage<FullyReadMarkers_Content>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.FullyReadMarkers.Content";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "thread_parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "event_num", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "begin_unread_window", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "end_unread_window", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "is_unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "markedReadAtTs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "mentions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullyReadMarkers_Content {
    return new FullyReadMarkers_Content().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullyReadMarkers_Content {
    return new FullyReadMarkers_Content().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullyReadMarkers_Content {
    return new FullyReadMarkers_Content().fromJsonString(jsonString, options);
  }

  static equals(a: FullyReadMarkers_Content | PlainMessage<FullyReadMarkers_Content> | undefined, b: FullyReadMarkers_Content | PlainMessage<FullyReadMarkers_Content> | undefined): boolean {
    return proto3.util.equals(FullyReadMarkers_Content, a, b);
  }
}

/**
 * * 
 * UserInboxMessage payload for group session key sharing.
 *
 * @generated from message river.SessionKeys
 */
export class SessionKeys extends Message<SessionKeys> {
  /**
   * @generated from field: repeated string keys = 1;
   */
  keys: string[] = [];

  constructor(data?: PartialMessage<SessionKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "river.SessionKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionKeys {
    return new SessionKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionKeys {
    return new SessionKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionKeys {
    return new SessionKeys().fromJsonString(jsonString, options);
  }

  static equals(a: SessionKeys | PlainMessage<SessionKeys> | undefined, b: SessionKeys | PlainMessage<SessionKeys> | undefined): boolean {
    return proto3.util.equals(SessionKeys, a, b);
  }
}

